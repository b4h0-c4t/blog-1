<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2016-07-07T19:36:31+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.8]]></title>
    <link href="http://blog.koba04.com/post/2016/06/23/react-dot-js-links-vol-dot-8/"/>
    <updated>2016-06-23T13:33:36+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/23/react-dot-js-links-vol-dot-8</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.2.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.2.0">https://github.com/facebook/react/releases/tag/v15.2.0</a></li>
</ul>


<p>15.2.0がリリースされました。</p>

<p>プロダクションビルドでエラーコードが付加されるようになりエラーの調査がしやすくなったことや、PropTypesやkeyのwarning時のスタックトレースがComponentのツリーで表示されるようになりました。
開発をサポートするための機能です。</p>

<p>その他はちょっとしたバグ修正などが中心です。</p>

<h2>Core Notes June 23</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-23.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-23.md</a></li>
</ul>


<p>恒例のCore TeamのMeeting Noteです。</p>

<p>Facebook内での<code>React.createClass</code>からClassによるComponent定義への移行作業は引き続き行われているようです。</p>

<h2>Core Notes June 30</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-30.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-30.md</a></li>
</ul>


<p>こちらもMeeting Noteです。
新しいReconcilerが徐々に動き始めているようです。
また、<code>React.createClass</code>からClassによるComponentによる移行についても進んでいるようです。
下のcodemodを使って、ClassによるComponent定義&amp;property initializer&amp;Flowに変換を行っているようです。</p>

<ul>
<li><a href="https://github.com/reactjs/react-codemod/pull/54">https://github.com/reactjs/react-codemod/pull/54</a></li>
</ul>


<p>React Teamとしては、Class + property initializer + Flowの組み合わせについては、ドッグフーディング中なので現時点では推奨しているわけでないという立場です。</p>

<p>また、Facebook内部ではPureRenderMixinがたくさん使われていて、それを置き換えるためのものとして<code>React.PureComponent</code>が考えられているようです。</p>

<p><code>React.PureComponent</code>に関しては、最初のProposalでは内部のStateless Functional Componentsにも最適化が適用される予定でしたが、混乱や問題点があることから、新しく出されたPRではただのClass版のPureRenderMixinとなっています。そしてmergeされました。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/7195">https://github.com/facebook/react/pull/7195</a></li>
<li><a href="https://github.com/facebook/react/issues/6914">https://github.com/facebook/react/issues/6914</a></li>
</ul>


<p>また、<code>React.createClass</code>をAddonにして、さらに<code>Perf</code>と<code>TestUtils</code>以外のAddonsについては、React Team外にownershipを移して管理するも考えているようです。</p>

<h2>Resolve refs in the order of the children #7101</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7101">https://github.com/facebook/react/pull/7101</a></li>
</ul>


<p>更新時の新しくマウントされるReactElementに対するRefの解決する順番を変更するPRです。
詳しくはPRにある画像を見るとわかると思います。</p>

<h2>Added jsx-self babel transform plugin #3540</h2>

<ul>
<li><a href="https://github.com/babel/babel/pull/3540">https://github.com/babel/babel/pull/3540</a></li>
</ul>


<p>warning目的でReactElementに<code>__self</code>のPropを追加するBabelのtransfomerです。
developmentの時だけ有効にすることが推奨されています。</p>

<h2>Spec proposal: extending the language to allow spreading children #57</h2>

<ul>
<li><a href="https://github.com/facebook/jsx/issues/57">https://github.com/facebook/jsx/issues/57</a></li>
</ul>


<p>JSXでのchildrenの仕様に対するProposalです。
JSXChildを拡張して<code>{...children}</code>を許容するようにするものです。</p>

<h2>RFC: Flat bundle using Rollup</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7178">https://github.com/facebook/react/pull/7178</a></li>
</ul>


<p>現在CommonJSベースで書かれているReactのコードをRollupでバンドルしてTree ShakingやDead Code Eliminationによりファイルサイズを削減するPRです。React Teamのインターンの人ですね。</p>

<p>まずはトップレベルでない<code>require</code>を全てトップレベルにしてES Modulesに変換できるようにして、BabelでCommonJSをES Modulesに変換してRollupでバンドルするという方法を採っているようです。
(RollupのCommonJSプラグインを使う方法よりサイズが小さくなるらしいです)</p>

<h2>Flow v0.28.0</h2>

<ul>
<li><a href="https://github.com/facebook/flow/releases/tag/v0.28.0">https://github.com/facebook/flow/releases/tag/v0.28.0</a></li>
</ul>


<p>Flowの0.28.0がリリースされています。
変更内容については、下記のブログでも書かれています。</p>

<ul>
<li><a href="https://flowtype.org/blog/2016/07/01/New-Unions-Intersections.html">https://flowtype.org/blog/2016/07/01/New-Unions-Intersections.html</a></li>
</ul>


<h2>ReactNative v0.29.0</h2>

<ul>
<li><a href="https://github.com/facebook/react-native/releases/tag/v0.29.0">https://github.com/facebook/react-native/releases/tag/v0.29.0</a></li>
</ul>


<p>ReactNativeの0.29.0がリリースされています。</p>

<h2>Don&rsquo;t Use Bind When Passing Props</h2>

<ul>
<li><a href="https://daveceddia.com/avoid-bind-when-passing-props/">https://daveceddia.com/avoid-bind-when-passing-props/</a></li>
</ul>


<p>PureComponentなんかとも関連しますが、なぜrenderメソッドの中でFunction.prototype.bindしたりArrow Function使うのがダメなのかについて書いたエントリーです。
過去にもあったような気もしますが。
上記を使って書かれているサンプルも多いので、使うときは何が起きているのか意識して使った方がいいと思います。
（Function.prototype.bindやArrow Functionsを使うと当たり前ですが新しい関数が都度生成されるので）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Immutable App ArchitectureについてのTalkを観た]]></title>
    <link href="http://blog.koba04.com/post/2016/06/21/immutable-app-architecture/"/>
    <updated>2016-06-21T01:30:35+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/21/immutable-app-architecture</id>
    <content type="html"><![CDATA[<iframe src="https://player.vimeo.com/video/166790294" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p><a href="https://vimeo.com/166790294">Render 2016 - Lee Byron</a> from <a href="https://vimeo.com/whiteoctober">White October</a> on <a href="https://vimeo.com">Vimeo</a>.</p>


<ul>
<li><a href="https://vimeo.com/166790294">https://vimeo.com/166790294</a></li>
<li><a href="http://2016.render-conf.com/talks#immutable-user-interfaces">http://2016.render-conf.com/talks#immutable-user-interfaces</a></li>
</ul>


<p>Dan AbramovもReact EuropeのQ&amp;AでおすすめしていたTalkで、改めて見て面白い内容だったので紹介します。</p>

<p>FacebookがReactやGraphQL、Immutable.jsを使ってどのようなアーキテクチャでアプリケーションを作成しているのかということを解説したTalkです。
特にFluxのような新しい概念が提唱されているわけではありませんが、最近のフロントエンドの流れやFacebookが目指しているものがわかりやすく解説されています。</p>

<p>Architectureの話が中心で各ライブラリーの説明や、細かい実装についてのTalkではありません。
各ライブラリーの使い方が〜という話ではなく、どういったArchitectureでWebやiOSやAndroidなどのクライアントサイドを作っていくのかを考えたい人にとっては、参考になるTalkだと思います。</p>

<p>というわけで、軽く内容を。
いろいろ省略しているので、気になった人はぜひTalkを観てください。</p>

<!-- more -->


<h2>Immutable App Architecture</h2>

<p>まず最初に、Architectureの選択は、アプリケーションの品質、開発の簡単さや難しさ、リリース後の改善のサイクルにも大きく影響を及ぼすものであるとしています。</p>

<blockquote><p>Architecture is about Choosing Elements of Abstraction</p></blockquote>

<p>例として、MVC &amp; RESTなArchitectureをInformation Richなアプリケーションで採用した場合、<strong>What Changed</strong> と <strong>Data Synchronization</strong> の部分が問題になるとしています。
変更管理とデータ同期の部分ですね。</p>

<p>特にFacebookは、ネットワーク環境が整備されていない国も含めた全世界にサービスを提供しているので、<strong>Data Synchronization</strong> におけるネットワークのレイテンシーの解決については力を注いでいるように感じます。</p>

<p>Webの場合、 <strong>What Changed</strong> の部分にはReactを使ったComponentによるViewの抽象化とImmutable.jsによるデータ管理の単純化、 <strong>Data Synchronization</strong> の部分にはGraphQLを使って必要最低限のデータのやりとりのみ行う方法を解説しています。</p>

<p>これらを踏まえて、Immutable App Architectureとして、下記の図のような構成を紹介しています。</p>

<p><img src="http://blog.koba04.com/images/posts/immutable-app-architecture/immutable-app-architecture.png" title="'Immutable App Architecture'" ></p>

<p>詳細については動画を見てほしいのですが下のような要素があります。
Fluxについて聞いたことがあるとだいたいイメージできると思います。</p>

<h3>Component</h3>

<p>Componentは下のようなStateを受け取りViewを返すピュアな関数です。
Viewへの反映を最適化します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(State) =&gt; View</span></code></pre></td></tr></table></div></figure>


<p>ReactやReactNative、ComponentKitが担っている部分です。</p>

<h3>View</h3>

<p>DOMやUIViewやAndroidのViewなど各Platformが提供しているViewです。
Mutationが前提になっていて、管理や最適化が難しいとしています。</p>

<h3>Actions</h3>

<p>新しいStateを作成する部分です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(State) =&gt; State</span></code></pre></td></tr></table></div></figure>


<p>ActionごとにStateを再作成するのはパフォーマンス的にツラいのでは？ということに対しては、<strong>Structural Sharing</strong> のアプローチを紹介しています。</p>

<p>Structural Sharingは、Immurable.jsなどで使われていて、変更があった箇所とその上位の要素だけを再作成して、その他は参照を付け替えるだけなので全体を毎回再生成しているわけではないということです。
もちろん、Immutable.jsを使わなくても実装することは可能で、Reduxを使っている人にはおなじみだと思います。</p>

<p><img src="http://blog.koba04.com/images/posts/immutable-app-architecture/structual-sharing.png" title="'Structural Sharing'" ></p>

<p>Immutableにすることにより、Memoizationなどの最適化のテクニックも適用しやすいとしています。</p>

<p>また、サーバーからデータを取得するActionのI/Fは下記のように定義しています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(State) =&gt; State, Promise&lt;State&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>(State) =&gt; Promise&lt;State&gt;</code>の場合、ネットワークが貧弱な環境ではユーザーにすぐにレスポンスを返せないので、「すぐに反映させるためにクライアント側で作成したState」と「サーバーからのレスポンスを反映したStateを返すPromise」の2つを返しています。
このアプローチは次のQueueの部分でも重要になってきます。</p>

<p>もっと複雑な非同期処理をやっている人にとっては、Observableなどで処理した方がいいのかもしれませんが、これで十分なことも多いのかなと思います。</p>

<h3>Queue</h3>

<p>同時に発生する複数のActionをシリアライズして処理するためのQueueです。</p>

<p><code>(State) =&gt; State, Promise&lt;State&gt;</code>のActionの場合、Promiseで解決されるStateを本当のState(<strong>True State</strong>)として、Promiseでない方のStateを <strong>Optimistic State</strong> として扱います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(State) =&gt; State, Promise&lt;State&gt;
</span><span class='line'>   |         |              |--------&gt; True State
</span><span class='line'>   |         |----&gt; Optimistic State
</span><span class='line'>   |--&gt; Current State</span></code></pre></td></tr></table></div></figure>


<p><code>(State) =&gt; State, Promise&lt;State&gt;</code>の場合、まずは <strong>Optimistic State</strong> の方をStateとして扱いViewが更新されます。その後、Promiseがresolveされた時に、<strong>True State</strong> が更新されてQueueにあるActionが再度適用されます。</p>

<p>TODOアイテムの作成を例にすると、下記のような流れになると解説されています。</p>

<hr />

<ul>
<li>入力したTODOのテキストをOptimistic Stateとして即時にStateに反映する</li>
<li>QueueにあるActionをOptimistic Stateに適用する</li>
</ul>


<p>〜サーバーからレスポンスが返ってくる〜</p>

<ul>
<li>サーバーから受け取ったidなどを持った完全な形のTODOをTrue Stateに反映する</li>
<li>QueueにあるActionを再度True Stateに適用する</li>
</ul>


<hr />

<p>これにより、ネットワークリクエストが失敗した場合は、 <strong>Optimistic State</strong> から <strong>True State</strong> に戻せばいいだけなのでロールバックも簡単だとしています。</p>

<p><img src="http://blog.koba04.com/images/posts/immutable-app-architecture/action-queue.png" title="'Action Queue'" ></p>

<p>それぞれ依存する<code>(State) =&gt; State, Promise&lt;State&gt;</code>のActionが複数Queueに積まれた時にどう処理するのかなど細かい不明な点はありますが、こんな感じだと思います。</p>

<h3>State</h3>

<p>Stateはアプリケーションの状態でImmutableです。
Action毎に作成されます。</p>

<p>Initial Stateはサーバーから作成されます。</p>

<h3>Models</h3>

<p>ModelはStateを構成するComponentが必要とするGraphQLのTypeで定義されたデータの形です。</p>

<blockquote><p>Colocated Data Dependencies</p></blockquote>

<p>Plainなオブジェクト（JavaでいうPOJO）であることを推奨しています（JSの場合はImmutable.jsのデータ構造の場合も）。</p>

<p><img src="http://blog.koba04.com/images/posts/immutable-app-architecture/immutable-app-model.png" title="'Model'" ></p>

<h2>まとめ</h2>

<p><img src="http://blog.koba04.com/images/posts/immutable-app-architecture/immutable-app-architecture.png" title="'Immutable App Architecture'" ></p>

<p>上記のように構成されるImmutable App Architectureは <strong>Pure Function</strong>、<strong>Immutability</strong>、<strong>Composition</strong> を組み合わせた <strong>Composition of Simple Elements</strong> だとしています。
Immutable App ArchitectureはFacebookのアプリでも使われていてフィットしているとのことです。</p>

<p>と、しながらもArchitectureの選択はトレードオフだとしています。
なのでアプリケーションを完成させた後も、すぐにゼロから再構築することを考えて、よりよいArchitectureを常に探求する必要があるとしています。</p>

<blockquote><p>There is no Architecture Nirvana.</p>

<p>Exploration and Improvement.</p></blockquote>

<p>Please watch the video!</p>

<ul>
<li><a href="https://vimeo.com/166790294">https://vimeo.com/166790294</a></li>
</ul>


<p>(詳細が聞き取れなかった部分もあるので、間違ってるところがあったら指摘してもらえるとありがたいです)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.7]]></title>
    <link href="http://blog.koba04.com/post/2016/06/16/reactjs-links-vol7/"/>
    <updated>2016-06-16T13:33:36+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/16/reactjs-links-vol7</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Team meeting notes</h2>

<p>恒例のCore Teamのmeeting noteです。</p>

<h3>May 26</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-26.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-26.md</a></li>
</ul>


<p>主にES classesによるComponent定義で<code>React.createClass</code>による定義を置き換えることについて書かれています。
ドキュメントやMixinをどうするか、Class Property Initializerについてのスタンスなど。</p>

<p>その他では、Incremental Reconcilerが入った時にTestUtilsのrenderIntoDocumentが同期的なことについてどうするかについても触れられています。</p>

<h3>June 2</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-02.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-02.md</a></li>
</ul>


<p>PureComponentによるStateless Functional Componentsの最適化について多く触れられています。
また、Facebookのコードベースを<code>React.createClass</code>からES classesに移行する計画があるようです。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/6914">https://github.com/facebook/react/pull/6914</a></li>
</ul>


<h3>June 9</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-09.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-09.md</a></li>
</ul>


<p>主に新しいReconcilerの状況についてや、問題となる点について話されています。</p>

<p>あとは、Facebook内の<code>React.createClass</code>からES classesに移行する方法についてが引き続き触れられています。</p>

<p>新しいトピックでいうと、大きなfeatureについてはTC39のようにchampionを立てて進めていくプロセスを採用するかどうかが検討されているようです。</p>

<h2>RFC: Make Refs Opt-in #6974</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6974">https://github.com/facebook/react/issues/6974</a></li>
</ul>


<p>Refsをopt-inの機能にするという提案(discussion)です。</p>

<h2>React ContextTypes, PropTypes when using an already static typed language like TypeScript #6525</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6525">https://github.com/facebook/react/issues/6525</a></li>
</ul>


<p>PropTypesのFlowやTypeScriptで置き換えた場合でもContextTypesを使う必要があることについてのIssue(?)です。</p>

<h2>New marketing copy on homepage #7012</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7012">https://github.com/facebook/react/pull/7012</a></li>
</ul>


<p>Reactのトップページに、特徴として書かれていた「JUST THE UI」、「VIRTUAL DOM」、「DATA FLOW」が「Declarative」、「Component-Based」、「Learn Once, Write Anywhere」に更新されました。</p>

<p>この変更は、Reactは「JUST THE UI」でありMVCのVだという記述が、Reactを使う時にReduxなどのFlux系のライブラリーが必ず必要であるかのように捉えられてしまっている現状なんかも踏まえたもののようです。</p>

<h2>ReactEurope</h2>

<p>ReactEuropeの動画が公開されています。</p>

<ul>
<li><a href="https://www.react-europe.org/">https://www.react-europe.org/</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa">https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa</a> (Day1)</li>
<li><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof">https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof</a> (Day2)</li>
</ul>


<p>別途、まとめを書ければ書くかも。</p>

<h2>Experimenting with React Native at Khan Academy</h2>

<ul>
<li><a href="https://docs.google.com/document/d/1PU51njrUweehKFgSu69C7OAEdyp6rHmsvQ7KIcLaHqw/edit#">https://docs.google.com/document/d/1PU51njrUweehKFgSu69C7OAEdyp6rHmsvQ7KIcLaHqw/edit#</a></li>
</ul>


<p>Khan AcademyでのReactNativeについてのレポートです。実際に取り入れようとした時に何が問題になったかなど触れられていて参考になります。</p>

<h2>Q&amp;A with Ben Alpert</h2>

<ul>
<li><a href="https://github.com/reactiflux/q-and-a/blob/master/ben-alpert_react-core.md">https://github.com/reactiflux/q-and-a/blob/master/ben-alpert_react-core.md</a></li>
</ul>


<p>Reactのcore memberであるBen Alpertに対するQ&amp;Aです。
New renconcilerについてのトピックが多くて興味深いです。</p>

<h2>State Streams and React</h2>

<ul>
<li><a href="https://medium.com/@markusctz/state-streams-and-react-7921e3c376a4#.39bp3z2fa">https://medium.com/@markusctz/state-streams-and-react-7921e3c376a4#.39bp3z2fa</a></li>
</ul>


<p>RxJSでRedux風なアーキテクチャを構築し、Reactと組み合わせて作るというエントリーです。わかりやすいです。
後半は作者が実際に作った<code>udeo</code>というライブラリーについての説明です。</p>

<ul>
<li><a href="https://github.com/mcoetzee/udeo">https://github.com/mcoetzee/udeo</a></li>
</ul>


<h2>react-enroute</h2>

<ul>
<li><a href="https://github.com/tj/react-enroute">https://github.com/tj/react-enroute</a></li>
</ul>


<p>TJが開発しているreact-router風なlightweightなルーティングライブラリーです。
ルーティングにはenrouteというライブラリーを使っていて、react-enrouteはReactとの繋ぎこみだけをやっているような感じです。</p>

<ul>
<li><a href="https://github.com/lapwinglabs/enroute">https://github.com/lapwinglabs/enroute</a></li>
</ul>


<h2>3 Reasons why I stopped using React.setState</h2>

<ul>
<li><a href="https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.umnvins0y">https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.umnvins0y</a></li>
</ul>


<p>ReactのsetStateのハマリどころなどについて解説したエントリーです。
MobXの作者なので、後半はMobX最高という感じになっています。</p>

<h2>Feature Request: Allow reducers to consult global state #1768</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1768">https://github.com/reactjs/redux/pull/1768</a></li>
</ul>


<p>Reduxのreducerで各ReducerでグローバルなStateも受け取れるようにしようというfeature requestです。
mergeされそうな雰囲気?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.6 5/19〜5/27]]></title>
    <link href="http://blog.koba04.com/post/2016/05/27/reactjs-links-vol6/"/>
    <updated>2016-05-27T19:04:55+09:00</updated>
    <id>http://blog.koba04.com/post/2016/05/27/reactjs-links-vol6</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.1.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.1.0">https://github.com/facebook/react/releases/tag/v15.1.0</a></li>
</ul>


<p>React v15.1.0がリリースされています。
基本的にはbug fixなどですが、Perfが書き直されています。その際、<code>printDOM</code>はdeprecatedになり、代わりに<code>printOperations</code>を使うようになりました。</p>

<h2>React Core Team meeting notes</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-19.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-19.md</a></li>
</ul>


<p>恒例のmeeting noteです。
今回のものは、<code>React.createClass</code>のAPIについてや、<code>PropTypes</code>の扱いなどについて触れられており、今後どうなっていくかに関わる重要なポイントに触れられています。</p>

<p>Stateless Functional ComponentsとES2015 ClassesによるComponent定義が中心であり、PropTypesについてはFlowやTypeScriptなどで置き換えていきたいという流れです。
まだ先の話になると思いますが。</p>

<p>その他にも、パッチ、マイナーリリースを2週間ごとに行う計画や、複数パッケージの管理に<a href="https://lernajs.io/">Lerna</a>を使う計画などについても言及されています。</p>

<h2>RFC: Should createClass be considered legacy? (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6811">https://github.com/facebook/react/pull/6811</a></li>
</ul>


<p>上記のmeeting notesにも関わる内容で、<code>React.createClass</code>をlegacyとして扱うためのブログポストのPRです。
結局、まだその時ではないということでmergeされませんでしたが、meeting note以上に詳しく書かれているので興味のある人はみるといいと思います。</p>

<h2>Support Server Rendering of <code>amp</code> Attribute #6798 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6798">https://github.com/facebook/react/issues/6798</a></li>
</ul>


<p><code>amp</code>のタグをSSRでサポートするかどうかについてのIssueです。</p>

<h2>Copy React ART tests and add hacks to fix them #6775 (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6775">https://github.com/facebook/react/pull/6775</a></li>
</ul>


<p>ReactARTのrendererがReactNativeと同様に、メンテナンス上の理由から<code>facebook/react</code>のリポジトリに入りました。</p>

<h2>RFC: Error code system #6874</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6874">https://github.com/facebook/react/pull/6874</a></li>
</ul>


<p>Core Meeting Notesにあったエラーシステム周りの作業が始まっています。</p>

<h2>Redux 4.0 ?</h2>

<p>Reduxで4.0に向けた議論が始まっています。</p>

<h3>RFC: Simplify middleware signature</h3>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/1744">https://github.com/reactjs/redux/issues/1744</a></li>
</ul>


<p>これは結局入らないみたいですね。</p>

<h3>Proof of Concept: Enhancer Overhaul</h3>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1702">https://github.com/reactjs/redux/pull/1702</a></li>
</ul>


<p><code>store base</code>と呼ばれているこちらのStore enhancerのAPI変更については議論中です。
Storeを直接拡張するのではなく、今MiddlewareのAPIとして渡している<code>{getState, dispatch}</code>の形式を<code>store base</code>として抽象化して、それを拡張できるようにする感じなのかな？</p>

<h2>Understanding MobX and when to use it. #199 (MobX Issue)</h2>

<ul>
<li><a href="https://github.com/mobxjs/mobx/issues/199">https://github.com/mobxjs/mobx/issues/199</a></li>
</ul>


<p>MobXとReduxでのアプローチの違いについての議論です。</p>

<h2>Spectacle</h2>

<ul>
<li><a href="http://formidable.com/open-source/spectacle/">http://formidable.com/open-source/spectacle/</a></li>
</ul>


<p>Reactを使い、JSXでスライドを作成するライブラリーです。
Markdownなんかも使えるようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.5 5/12〜5/18]]></title>
    <link href="http://blog.koba04.com/post/2016/05/18/reactjs-links-vol5/"/>
    <updated>2016-05-18T23:27:34+09:00</updated>
    <id>http://blog.koba04.com/post/2016/05/18/reactjs-links-vol5</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Meeting Note May 12 (React Meeting Note)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-12.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-12.md</a></li>
</ul>


<p>恒例のCore TeamのMeeting Noteです。
現在だと、production build時のエラーがわかりにくいものであったりとエラー周りの仕組みに不便なところがあるのでそれを改善することをReact Teamに来たインターンの人がやるそうです。すごい環境のインターンだ&hellip;。</p>

<p>RustやEmber参考にしたRFCのプロセスを構築することが検討されているようです。
また、ShallowRenderingとは別のテスト用にrendererのプロトタイプが作られていたりとこちらも興味深いです。</p>

<h2>Docs need one or more diagrams #653 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/653#issuecomment-216844781">https://github.com/reactjs/redux/issues/653#issuecomment-216844781</a></li>
</ul>


<p>Reduxでのデータの流れがダイアグラムで示されていてわかりやすいので、はじめて触る人は見ておくといいかもしれません。</p>

<h2>Tiny React Renderer (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/iamdustan/tiny-react-renderer">https://github.com/iamdustan/tiny-react-renderer</a></li>
</ul>


<p>ReactのRendererを理解するための小さな実装です。カスタムRendererを作りたかったり、Reactの内部を知りたい人はソースをみるといいんじゃないかと思います。</p>

<h2>react-router-scroll (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/taion/react-router-scroll">https://github.com/taion/react-router-scroll</a></li>
</ul>


<p>ReactRouterでスクロールマネージメントを行うためのライブラリーです。
scroll-behaviorをラップする感じになっているようです。</p>

<h2>flow-typed (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/flowtype/flow-typed">https://github.com/flowtype/flow-typed</a></li>
</ul>


<p>Flowの型定義を管理するリポジトリーです。前に公開されたリポジトリーですが、最近型定義が集まり出しています。</p>

<h2>Why did you update (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/garbles/why-did-you-update">https://github.com/garbles/why-did-you-update</a></li>
</ul>


<p>Reactにモンキーパッチを当てて、PropやStateが変わってないのにrerenderが行われたことを教えてくれるライブラリーです。
パフォーマンスチューニングしたい場合に便利かもしれません。</p>

<h2>Higher Order Components: Theory and Practice</h2>

<ul>
<li><a href="http://engineering.blogfoster.com/higher-order-components-theory-and-practice/">http://engineering.blogfoster.com/higher-order-components-theory-and-practice/</a></li>
</ul>


<p>ReactでMixinの代わりとしてよく使われるHigh Order Componentsのパターンについてのエントリーです。</p>

<h2>redux-observable (Redux Middleware)</h2>

<ul>
<li><a href="https://medium.com/@benlesh/redux-observable-ec0b00d2eb52">https://medium.com/@benlesh/redux-observable-ec0b00d2eb52</a></li>
</ul>


<p>ReduxとRxJS v5を組み合わせるためのライブラリーについてのエントリーです。
Ben LeshさんはRxJS v5のメインの開発者であり、以前に紹介した通りReduxに<code>es-observable</code>のspecに対応させるPRを送っていましたがここで結びつきました。このライブラリーはNetflixでも使っているようです。</p>

<p><a href="http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2/">http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2/</a></p>

<h2>React Elements vs React Components vs Component Backing Instances (React)</h2>

<ul>
<li><a href="https://medium.com/@fay_jai/react-elements-vs-react-components-vs-component-backing-instances-14d42729f62">https://medium.com/@fay_jai/react-elements-vs-react-components-vs-component-backing-instances-14d42729f62</a></li>
</ul>


<p>ReactElementとReact ComponentとComponentのinstanceの違いについてのエントリーです。</p>

<h2>Getting Started with React Native Development on Windows</h2>

<ul>
<li><a href="https://shift.infinite.red/getting-started-with-react-native-development-on-windows-90d85a72ae65">https://shift.infinite.red/getting-started-with-react-native-development-on-windows-90d85a72ae65</a></li>
</ul>


<p>ReactNativeの開発をWindows上で行う方法について解説したエントリーです。</p>

<h2>UI Testing in React</h2>

<ul>
<li><a href="https://voice.kadira.io/ui-testing-in-react-74fd90a5d58b#.tr0046jgs">https://voice.kadira.io/ui-testing-in-react-74fd90a5d58b#.tr0046jgs</a></li>
</ul>


<p>ReactでのUIテストについてのエントリーです。
テストをFunctional TestingとVisual Testingに分類して、Functional Testingはenzymeを、Visual TestingはReact
Storybookをそれぞれ使う方法が紹介されています。</p>

<h2>React Amsterdam</h2>

<ul>
<li><a href="https://speakerdeck.com/reactamsterdam">https://speakerdeck.com/reactamsterdam</a></li>
<li><a href="https://www.youtube.com/channel/UCsFrt8oKNYXGspSlX9u6uXw">https://www.youtube.com/channel/UCsFrt8oKNYXGspSlX9u6uXw</a></li>
</ul>


<p>React Amsterdamのスライドと動画が公開されています。
ReactNativeのinternalやJSSの話もあったりして色々面白そうです。</p>

<ul>
<li><a href="https://speakerdeck.com/reactamsterdam/tadeu-zagallo-facebook-london-react-native-architecture-overview">https://speakerdeck.com/reactamsterdam/tadeu-zagallo-facebook-london-react-native-architecture-overview</a></li>
<li><a href="https://speakerdeck.com/reactamsterdam/oleg-slobodskoi-chatgrape-berlin-javascript-style-sheets">https://speakerdeck.com/reactamsterdam/oleg-slobodskoi-chatgrape-berlin-javascript-style-sheets</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.4 4/29〜5/11]]></title>
    <link href="http://blog.koba04.com/post/2016/05/11/reactjs-links-vol4/"/>
    <updated>2016-05-11T18:41:13+09:00</updated>
    <id>http://blog.koba04.com/post/2016/05/11/reactjs-links-vol4</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.0.2 (React Release)</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.0.2">https://github.com/facebook/react/releases/tag/v15.0.2</a></li>
</ul>


<p>Reactのv15.0.2がリリースされています。Bug fixが中心です。</p>

<h2>React Core Meeting Note April 28 (React Meeting Note)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-04/april-28.md">https://github.com/reactjs/core-notes/blob/master/2016-04/april-28.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/pull/10">https://github.com/reactjs/core-notes/pull/10</a></li>
</ul>


<p>React Coreチームのmeeting noteです。
v15になったこともあり、リリースサイクルについての議論が行われているようです。</p>

<p>また、<code>Experimenting with StyleSheet.create() on the web</code>のようなトピックもあり、こちらも興味深いです。</p>

<h2>React Core Meeting Note May 5 (React Meeting Note)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-05.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-05.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/pull/13">https://github.com/reactjs/core-notes/pull/13</a></li>
</ul>


<p>React Coreチームのmeeting noteです。</p>

<p>また、<code>airbnb/enzyme</code>をofficialのTestUtilsに？みたいな話もあってこちらも注目です。</p>

<p>あとは、Server Side RenderingやCSSのvendor prefixについての議論もされています。</p>

<h2>Add new ReactPerf #6046 (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6046">https://github.com/facebook/react/pull/6046</a></li>
</ul>


<p>Dan Abramovが作業していたReactPerfのrewriteされたものがmergeされました。
<code>react@15.1.0-alpha.1</code>で試すことができます。</p>

<h2>RFC: New Reconciler Infra (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6690">https://github.com/facebook/react/pull/6690</a></li>
</ul>


<p>Reactのコア部分であるReconcilerと呼ばれているComponentの更新処理を管理する部分の新しいアウトラインとなる実装がmergeされました。まだ初期という感じですが。。
通常、Reactを使う場合にこのReconcilerは使われないので、コンセプトを共有するための実装という感じです。</p>

<p>後、コードベースがFlowになっていますね。ReactNativeのコードはFlowが使われていたりするので、今後Reactの本体のコードにもFlowが使われていくようになるかもしれません。</p>

<h2>React Native 0.25.1 (React Native Release)</h2>

<ul>
<li><a href="https://github.com/facebook/react-native/releases/tag/v0.25.1">https://github.com/facebook/react-native/releases/tag/v0.25.1</a></li>
</ul>


<p>これまでは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">View</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>と<code>react-native</code>からReactもComponentもimportする必要あったのが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">View</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにView部分だけを<code>react-native</code>からimportする形になり、rendererの1つとしてのReact Nativeという形に近づきました。</p>

<h2>Flux 3.0 (Flux Release)</h2>

<ul>
<li><a href="https://github.com/facebook/flux/blob/master/CHANGELOG.md#300">https://github.com/facebook/flux/blob/master/CHANGELOG.md#300</a></li>
</ul>


<p>大きなところでは、Immutable.jsのMapをStateとして使うためのMapStoreが削除されました。</p>

<h2>React Native Express (React Native Tutorial)</h2>

<ul>
<li><a href="http://www.reactnativeexpress.com/">http://www.reactnativeexpress.com/</a></li>
</ul>


<p>ReactNativeのためのチュートリアル的なサイトです。サンプルが<code>react-native-web</code>を使って確認できるのは面白いですね。</p>

<h2>Proof of Concept: Enhancer Overhaul #1702 (Redux PR)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1702">https://github.com/reactjs/redux/pull/1702</a></li>
</ul>


<p>Storeを拡張する辺りについての新しいコンセプトについて議論されています。</p>

<h2>Mobile Twitter Web(React Users)</h2>

<ul>
<li><a href="https://mobile.twitter.com/">https://mobile.twitter.com/</a></li>
</ul>


<p>TwitterのモバイルWeb版がいつの間にかリニューアルされていて、Reactが使われています。
React Developer Toolsで見る限り、<code>react-router</code>と<code>redux</code>も使われているようです。</p>

<h2>State management is easy &ndash; Introduction to MobX (Slide)</h2>

<ul>
<li><a href="https://speakerdeck.com/mweststrate/state-management-is-easy-introduction-to-mobx">https://speakerdeck.com/mweststrate/state-management-is-easy-introduction-to-mobx</a></li>
</ul>


<p>Mendixというところが作ったMobXの紹介スライドです。
Storeとなるクラスの値をobservableにして、Compnentがobserveとなるような感じです。
これだとデータの流れが不明確になって大規模だと辛そうですが&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.3 4/20〜4/28]]></title>
    <link href="http://blog.koba04.com/post/2016/04/28/reactjs-links-vol3/"/>
    <updated>2016-04-28T19:19:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/28/reactjs-links-vol3</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React core meeting notes April 21 (React)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-04/april-21.md">https://github.com/reactjs/core-notes/blob/master/2016-04/april-21.md</a></li>
</ul>


<p>ReactのCore Teamによるmeeting note(4/21)が公開されています。</p>

<p>特に大きな何かがあるわけではないですが、いくつかのbugをfixした<code>15.0.2</code>が今週にも出そうです。
その他では、v15のリリース時にバタバタしたのでリリースプロセスの見直しなどが検討されているようです。
あとは、ReactのコードベースをFlow化することも議題に挙がっていました。</p>

<p>次の大きなfeatureとしては下のNew Core AlgorithmのIssueです。
詳細はまだわかりませんが、現在一度にまとめて行っているDOMの更新を分割して行うような感じになるなのかなと思います。
最初に表示されている部分だけを更新して、その後に非表示エリアのDOMを非同期で更新するみたいな。</p>

<p>この内容はこの後で紹介するDan AbamovのQ&amp;Aでも言及されていたので興味のある人は見てみるといいと思います。</p>

<ul>
<li><a href="https://github.com/facebook/react/issues/6170">https://github.com/facebook/react/issues/6170</a></li>
</ul>


<h2>Disabled inputs should not respond to clicks in IE (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6215">https://github.com/facebook/react/pull/6215</a></li>
</ul>


<p>IE11でdisableだった場合にもonChageイベントが発行されるバグを修正するPRがmergeされました。</p>

<h2>Move React Core Integration and Injection to the Core Repo #6338 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6338">https://github.com/facebook/react/pull/6338</a></li>
</ul>


<p>React NativeのReactとの連携部分がReactのリポジトリの中に含まれるようになりました。
特に何か変わることはないと思いますが、よりReact Nativeはreact-domのようにただのrendererの1つであるという位置付けになっていく流れなのかなと思います。</p>

<p>(実際なかなかそこまでうまく分割できていないようですが&hellip;)</p>

<h2>Provide info about component tree to devtools #6549 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6549">https://github.com/facebook/react/pull/6549</a></li>
</ul>


<p>React Perfの再構築に伴って、React DevToolのようなものを作るための環境が整備されてきています。
ソースを見る感じ、EventHandlerを登録しておくことで、Reactの中で起こるイベントをlistenすることができるようになるのでthird partyのライブラリーも作りやすくなるのかなと思います。</p>

<h2>Add comments/attribute indicating which component was rendered #6559 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6559">https://github.com/facebook/react/issues/6559</a></li>
</ul>


<p>ChromeとFirefox以外のReactのDevToolsを持っていないブラウザーだと、どのComponentがrenderされたのかわからないので、<code>data-reactcomponent</code>のような属性をDOMに付与するのはどうかという提案です。
もちろん開発環境のみで、別のフラグでOn/Offできるような感じで。</p>

<p>いるのかな&hellip;。</p>

<h2>QA with Dan Abramov in Reactiflux (Link)</h2>

<ul>
<li><a href="https://github.com/reactiflux/q-and-a/blob/master/dan-abramov_react-core.md">https://github.com/reactiflux/q-and-a/blob/master/dan-abramov_react-core.md</a></li>
</ul>


<p>Dan AbramovがReactifluxのDiscordで行ったQ&amp;Aのまとめです。
Facebookで何をやってるとかRedux、Reactについての質問に答えています。</p>

<p>今後の予定は下記で確認できます。Ben Alpertの会が個人的に楽しみです。そして何気にJonathan Carterが。</p>

<ul>
<li><a href="https://paper.dropbox.com/doc/Reactiflux-QA-Schedule-7QAfGzEqfKjtN9UmhYYM9">https://paper.dropbox.com/doc/Reactiflux-QA-Schedule-7QAfGzEqfKjtN9UmhYYM9</a></li>
</ul>


<h2>AMA with Lee Byron (Link)</h2>

<ul>
<li><a href="https://hashnode.com/ama/with-lee-byron-cin0kpe8p0073rb53b19emcda">https://hashnode.com/ama/with-lee-byron-cin0kpe8p0073rb53b19emcda</a></li>
</ul>


<p>GraphQLやImmutable.jsのメンテナーであるLee Byronが色々質問に答えています。
GraphQLやImmutable.jsだけでなく、Facebook内での開発についてやReactについてやCSS modulesどう思うかなど色々答えているので面白いです。
GraphQLとFalcor比べてどう？TypeScriptがあるのになんでFlowを作っているのか？
Burnoutにどう対処すべきかなどなど。(FacebookにはHack-a-monthという仕組みがあるらしい)</p>

<h2>Add Redux Logo #1671 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1671">https://github.com/reactjs/redux/pull/1671</a></li>
<li><a href="https://github.com/reactjs/redux/issues/151">https://github.com/reactjs/redux/issues/151</a> (ロゴのアイデア)</li>
</ul>


<p>ようやくReduxのロゴが決まったようです。</p>

<h2>Redux FAQ (Redux documentation)</h2>

<ul>
<li><a href="http://redux.js.org/docs/FAQ.html">http://redux.js.org/docs/FAQ.html</a></li>
</ul>


<p>少し前に追加されたReduxのFAQページです。</p>

<p><strong>Do I have to put all my state into Redux? Should I ever use React’s setState()?</strong>や、<strong>How can I represent “side effects” such as AJAX calls? Why do we need things like “action creators”, “thunks”, and “middleware” to do async behavior?</strong>など、Reduxでアプリケーションを作る時に気になるような質問があるので、Reduxを使っている人は見てみることをオススメします。</p>

<h2>Remove unneeded code #1640 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1640">https://github.com/reactjs/redux/pull/1640</a></li>
</ul>


<p>Reduxのutils/warningがなぜ↓のようなことをしているのか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// This error was thrown as a convenience so that if you enable</span>
</span><span class='line'>    <span class="c1">// &quot;break on all exceptions&quot; in your console,</span>
</span><span class='line'>    <span class="c1">// it would pause the execution at this line.</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span>
</span><span class='line'>  <span class="cm">/* eslint-disable no-empty */</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/reactjs/redux/blob/master/src/utils/warning.js#L13-L19">https://github.com/reactjs/redux/blob/master/src/utils/warning.js#L13-L19</a></p>

<p>&ldquo;break on all exceptions&#8221;を有効にしている時にここで止まるようにしているんですね。なるほど。</p>

<h2>How to sync Redux state and url hash tag params (Redux Stackoverflow)</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/36722584/how-to-sync-redux-state-and-url-hash-tag-params/36749963#36749963">http://stackoverflow.com/questions/36722584/how-to-sync-redux-state-and-url-hash-tag-params/36749963#36749963</a></li>
</ul>


<p>ReduxでURLのqueryやhashで状態を管理したい時にStateとどう同期すればいいの？<code>react-router-redux</code>使えばいいの？という質問です。
それに対して作者のDan Abramovが解答しています。
Reduxの質問に解答しているのをよく見るのでわからないことがあったらstackoverflowで聞いてみるといいかもしれないですね。</p>

<p>Stateと管理する必要はなくて、必要となった時にURLから値を取得して使えばいいという答えです。
StateにすることでActionになるので、リプレイなどがやりやすくなるメリットはありますが、必要でない場合は複雑になるだけです。</p>

<h2>MobX (Library)</h2>

<ul>
<li><a href="https://github.com/mobxjs/mobx">https://github.com/mobxjs/mobx</a></li>
</ul>


<p>Observableを活用したReduxライクなState Managementのライブラリーです。
TypeScriptで書かれています。
Reactと組み合わせることが想定されているようで、Reactとbindingするためのライブラリーもあります。</p>

<p>10分でわかる説明</p>

<ul>
<li><a href="https://mobxjs.github.io/mobx/getting-started.html">https://mobxjs.github.io/mobx/getting-started.html</a></li>
</ul>


<p>ちゃんと中身見てないので、イマイチどのあたりが素晴らしいのかわからかなったので、気が向いたらまた見てみます。
<code>@observable decorator (ES2015)</code>って書いたのがとても気になりました&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Podcasts I'm listening]]></title>
    <link href="http://blog.koba04.com/post/2016/04/21/podcasts-im-listening/"/>
    <updated>2016-04-21T18:39:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/21/podcasts-im-listening</id>
    <content type="html"><![CDATA[<p>以前Qiitaで少し書きましたが、最近聴いている英語のPodcastの一覧のメモ。
日本語だとRebuild.fmとかmozaic.fmとかを聴いてますがまぁ言うまでもないので。</p>

<p>英語力の問題で内容と話す人によっては全く意味がわからないこともありますが、こんな感じのPodcastをsubscribeしていて、気になったエピソードだけを通勤時に聞いています。
週に1〜2エピソードくらいしか聴いてないですが&hellip;。</p>

<p>なんとなく、よく聴いている順番に並べてみました。</p>

<!-- more -->


<h2>Software Engineering Daily</h2>

<ul>
<li><a href="http://softwareengineeringdaily.com/">http://softwareengineeringdaily.com/</a></li>
</ul>


<p>本当にデイリーで1hくらいのエピソードが配信されていてすごいです。
基本的には1on1のインタビュー形式で、オーナーの人がゆっくり話してくれるのでわかりやすいです。</p>

<p>内容はサーバーサイドからフロントエンド、Netflixなどの開発スタイルなど幅広い感じです。ただ、JavaScript系の話が多いような気もします。</p>

<p>英語の聞き取りやすさもそうですが、What is Flux?のようなすごいシンプルな質問から入っていったりするので内容もわかりやすいです。</p>

<h2>JavaScript Jabber</h2>

<ul>
<li><a href="https://devchat.tv/js-jabber">https://devchat.tv/js-jabber</a></li>
</ul>


<p>JavaScript系のPodcastだと一番有名な気がします。
レギュラーのパネリストもゲストも複数なことが多く、盛り上がってくると複数人がわーっと話すので、ついていけないことも多いです。</p>

<p>個人的には取り上げているトピックやゲストが興味深いことが多いです。</p>

<p>最近音楽が変わったのですが、個人的には前の曲の方が好きでした。あの曲なんだったんだろう&hellip;。</p>

<h2>5 Minutes of JavaScript</h2>

<ul>
<li><a href="https://fivejs.codeschool.com/">https://fivejs.codeschool.com/</a></li>
</ul>


<p>Podcastのスポンサーとして個人的にはおなじみのCode SchoolがやっているPodcastです。
毎週JavaScriptに関するトピックを30s〜60sくらいで何個か取り上げていくPodcastです。</p>

<p>たいてい7minくらいなので気軽に聞けます。</p>

<h2>Modern Web</h2>

<ul>
<li><a href="http://www.modern-web.org/#/modern-web-podcast">http://www.modern-web.org/#/modern-web-podcast</a></li>
</ul>


<p>最近聴き始めたPodcastです。
JavaScriptのフロントエンド周りが中心です。Emberの話とFRPとかRxJSとかObservableとかの話が多い印象です。
まぁ1〜2エピソードしか聞いてないですが、聴きやすい気がしています。</p>

<h2>JavaScript Air</h2>

<ul>
<li><a href="https://javascriptair.com/">https://javascriptair.com/</a></li>
</ul>


<p>JavaScriptに関する、話題になっているライブラリーなどを取り上げてレギュラーのパネリストとゲスト複数人でワイワイ話すスタイルのPodcastです。</p>

<p>Google Hangoutで収録しているようですが、人によっては音がかなり悪くて聞き取りにくいことも&hellip;。
ただ、内容はフロントエンドやっている人には面白いものが多いです。</p>

<p>ちなみにレギュラーのパネリストにReduxの作者のDan Abramovがいて、たまに出てます。あんまり話さないけど。</p>

<h2>The Web Platform Podcast</h2>

<ul>
<li><a href="http://www.thewebplatformpodcast.com/">http://www.thewebplatformpodcast.com/</a></li>
</ul>


<p>Webに関する話題を取り上げるPodcastです。
フロントエンド系の話が多い印象がありますが、Platformの話やWebなど広い範囲のテーマを取り上げている印象です。</p>

<h2>The Changelog</h2>

<ul>
<li><a href="https://changelog.com/podcast/">https://changelog.com/podcast/</a></li>
</ul>


<p>Webやプログラミングに関する話題を広く取り上げているPodcastです。
DHHが出たりなどおおっ、思う人がたまに出て来て面白いです。</p>

<h2>NodeUp</h2>

<ul>
<li><a href="http://nodeup.com/">http://nodeup.com/</a></li>
</ul>


<p>Node.js自体に関する話題が多いPodcastです。</p>

<h2>Software Engineering Radio</h2>

<ul>
<li><a href="http://www.se-radio.net/">http://www.se-radio.net/</a></li>
</ul>


<p>名前の通り、Software Engineeringに関するテーマを取り上げたPodcastです。DevOpsとか。
Dave Thomasが出たりもしてました。</p>

<h2>React Native Radio</h2>

<ul>
<li><a href="https://devchat.tv/react-native-radio">https://devchat.tv/react-native-radio</a></li>
</ul>


<p>React Nativeに関する話題を取り上げるPodcastです。
React Native以外にもAndre Staltzが出てCycle.jsの話をしたり、Facebookの人が出てGraphQLの話をしたリもしています。</p>

<h2>Soft Skills Engineering</h2>

<ul>
<li><a href="https://itunes.apple.com/us/podcast/soft-skills-engineering/id1091341048?mt=2">https://itunes.apple.com/us/podcast/soft-skills-engineering/id1091341048?mt=2</a></li>
</ul>


<p>まだ1話して聞いてないですが&hellip;。
Softとある通り、tech以外の話題を取り上げているPodcastです。
キャリアについてなど他のPodcastではあまり話題にならないような内容について話されています。</p>

<p>おわり。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.2 4/15〜4/19]]></title>
    <link href="http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2/"/>
    <updated>2016-04-19T19:19:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>Server-side Environments (React documentation)</h2>

<ul>
<li><a href="http://facebook.github.io/react/docs/environments.html">http://facebook.github.io/react/docs/environments.html</a></li>
</ul>


<p>あまり内容はありませんが、NashornとNode環境でReactを使った例を紹介するドキュメントが追加されました。</p>

<h2>Error reporting in production #2686 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/2686">https://github.com/facebook/react/issues/2686</a></li>
</ul>


<p>かなり前のIssueですが、最近また盛り上がっているので紹介します。</p>

<p>Reactでは、warningとerrorの2種類のログレベルがありますが、現在は<code>NODE_ENV</code>がproductionであるかどうかでログを有効にするか無効にするかを切り替えることしかできません。
このissueはその辺りの改善に関するものです。</p>

<p>前回紹介したリンクでも、developmentビルドとproductionビルドのパフォーマンスの違いについてありましたが、developmentビルドでは実行速度を気にせずにデバッグログを出力していて、productionビルドでは速度優先で不要なチェックは一切行われていません。
その結果、パフォーマンスに大きな違いがあります。</p>

<p>そのため、developmentビルドのままで本番に投入することも難しく、かといってproductionビルドのままでerrorのログを確認したいという場面に対応できていません。
現在作り直しが行われているPerf周りでもPROFILEフラグをという話もあるので、その辺りとあわせて<code>REACT_ENV</code>のような新しい仕組みが入るかもしれません。</p>

<h2>Two Weird Tricks with Redux (Blog)</h2>

<ul>
<li><a href="http://jlongster.com/Two-Weird-Tricks-with-Redux">http://jlongster.com/Two-Weird-Tricks-with-Redux</a></li>
</ul>


<p>Firefox Developer Toolの開発をしている<a href="https://twitter.com/jlongster">@jlongster</a>さんによるFirefox Developer Toolsの開発にReduxを使った時の話です。
非同期処理をどうやって扱ったかということが書かれています。</p>

<p>言及されているソースはこのあたりにあるので気になる人は見るといいと思います。</p>

<ul>
<li><a href="https://github.com/mozilla/gecko-dev/tree/master/devtools/client/debugger/content">https://github.com/mozilla/gecko-dev/tree/master/devtools/client/debugger/content</a></li>
</ul>


<h2>React Flip Move (Library)</h2>

<ul>
<li><a href="https://github.com/joshwcomeau/react-flip-move/">https://github.com/joshwcomeau/react-flip-move/</a></li>
</ul>


<p>React Componentをアニメーションさせるためのライブラリーです。
READMEを見る限り、シンプルで使いやすそうです。react-motionを使っているのかと思ったけど独自実装でした。</p>

<h2>What to use for React styling? (Blog)</h2>

<ul>
<li><a href="http://andrewhfarmer.com/how-to-style-react/">http://andrewhfarmer.com/how-to-style-react/</a></li>
</ul>


<p>ReactとCSSをどのように組み合わせるのかを解説したエントリーです。
MethodologiesとPreprocessorsとPostprocessorsとInline Style Helpersのアプローチに分けて、それぞれどんな特徴でどんなライブラリーがあるということが解説されています。
ReactとCSSの扱いに悩んでいる人は見てみるといいかもしれません。</p>

<h2>Proposal: Add support for observable spec interop point #1631 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/1631">https://github.com/reactjs/redux/issues/1631</a></li>
<li><a href="https://github.com/reactjs/redux/pull/1632">https://github.com/reactjs/redux/pull/1632</a></li>
</ul>


<p>ReduxのStoreを現在stage1のes-observableの<code>Symbol.observable</code>に対応させるIssueとPRです。
これにより、RxJS 5やその他のライブラリーとも組み合わせやすくなります。</p>

<p>PR出してるのはRxJS 5のメインの開発者である<a href="https://github.com/blesh">blesh</a>さんです。
<code>Symbol.observable</code>のponyfillには<a href="https://github.com/blesh/symbol-observable">blesh/symbol-observable</a>が使われています。</p>

<h2>eslint-config-airbnb 7,0 (Library)</h2>

<ul>
<li><a href="https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/CHANGELOG.md#700--2016-04-11">https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/CHANGELOG.md#700&#8211;2016-04-11</a></li>
</ul>


<p>Reactに関するLintも含んでいるeslint-config-airbnbの7.0がリリースされています。
React Componentのaccessibilityを検査する<code>eslint-plugin-a11y</code>が依存に追加されたので、アップデートする際は追加でインストールする必要があります。</p>

<ul>
<li><a href="https://github.com/evcohen/eslint-plugin-jsx-a11y">https://github.com/evcohen/eslint-plugin-jsx-a11y</a></li>
</ul>


<h2>5 Open Source React Native Projects To Learn From (React Native Blog)</h2>

<ul>
<li><a href="https://medium.com/@bilalbudhani/5-open-source-react-native-projects-to-learn-from-fb7e5cfe29f2">https://medium.com/@bilalbudhani/5-open-source-react-native-projects-to-learn-from-fb7e5cfe29f2</a></li>
</ul>


<p>ソースが公開されている5つのReactNativeのアプリが紹介されています。</p>

<h2>React Hot Loader 3.0 alpha demo (Library)</h2>

<ul>
<li><a href="https://github.com/gaearon/react-hot-loader/pull/240">https://github.com/gaearon/react-hot-loader/pull/240</a></li>
</ul>


<p>React Hot Loaderの3.0のalpha版がリリースされています。2は飛ばして一気に3になったようです。
3.0のデモは下記で紹介されていますので使っている人は確認してみるといいと思います。</p>

<ul>
<li><a href="https://github.com/gaearon/react-hot-boilerplate/pull/61">https://github.com/gaearon/react-hot-boilerplate/pull/61</a></li>
</ul>


<p>個人的には使っていないので詳細はわからないですが、Stateless ComponentsやHOC辺りのサポートや設定周りが改善されたようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Links vol.1 4/6〜4/14]]></title>
    <link href="http://blog.koba04.com/post/2016/04/14/reactjs-links-vol1/"/>
    <updated>2016-04-14T13:17:31+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/14/reactjs-links-vol1</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<p>今週はF8があったのでReact Native関連の記事が多くありました。</p>

<!-- more -->


<h2>React v15</h2>

<ul>
<li><a href="http://facebook.github.io/react/blog/2016/04/07/react-v15.html">http://facebook.github.io/react/blog/2016/04/07/react-v15.html</a></li>
<li><a href="https://facebook.github.io/react/blog/2016/04/08/react-v15.0.1.html">https://facebook.github.io/react/blog/2016/04/08/react-v15.0.1.html</a></li>
</ul>


<p>React v15がリリースされました。バグがあったのですぐに15.0.1がリリースされています。インストールする際には15.0.1を使用してください。</p>

<p>細かいfeatureについてはブログ書いたのでそちらをみてください</p>

<ul>
<li><a href="http://blog.koba04.com/post/2016/03/09/react-js-v15-changes/">http://blog.koba04.com/post/2016/03/09/react-js-v15-changes/</a></li>
</ul>


<h2>React Native: A year in review</h2>

<ul>
<li><a href="https://code.facebook.com/posts/597378980427792/react-native-a-year-in-review/">https://code.facebook.com/posts/597378980427792/react-native-a-year-in-review/</a></li>
</ul>


<p>React Nativeが2013年の夏に社内の(?)hackathonで誕生してから、30,000以上のstarをgithubで得るようになるまでのStoryが書かれています。
&ldquo;The React Native team has grown from around 10 to around 20 engineers in the past year&#8221;や&#8221;we are 1 percent finished. &#8220;とあるように、今後も力を入れていくことがわかります。
Facebookのエンジニア以外からのcommitも30%くらいあって、Facebook以外でも使われていることがわかります。</p>

<p>また、facebookがreact-nativeのリポジトリをどのように管理しているのかや、たくさんのissueやPRを処理するために作ったmention-botなどについても書かれていて、巨大なOSSをgithubでどう管理するかという点でも面白いです。</p>

<p><a href="https://github.com/facebook/mention-bot">https://github.com/facebook/mention-bot</a></p>

<h2>Building the F8 2016 App</h2>

<ul>
<li><a href="http://makeitopen.com/">http://makeitopen.com/</a></li>
</ul>


<p>ReactNativeを使ってF8のiOSとAndroidのアプリを作った際のことを、チュートリアルとして紹介しています。
どのような構成にするのかを検討して、マルチプラットフォーム対応をどうするか、データ管理をどうするか、テストをどうするかなどが書かれていてとても参考になります。</p>

<p>React使っている人は一度見てみるといいんじゃないかと思います。</p>

<p>ReactNative + Flow + Redux + Jestな構成でサーバーサイドにはOSSのParse Serverを使っているようです。
エディターはNuclideだそうです。</p>

<p>アプリのソースコードもgithubで公開されています。</p>

<ul>
<li><a href="https://github.com/fbsamples/f8app">https://github.com/fbsamples/f8app</a></li>
</ul>


<h2>React Native on the Universal Windows Platform</h2>

<ul>
<li><a href="https://blogs.windows.com/buildingapps/2016/04/13/react-native-on-the-universal-windows-platform/">https://blogs.windows.com/buildingapps/2016/04/13/react-native-on-the-universal-windows-platform/</a></li>
</ul>


<p>MicroSoftがUniversal Windows Platform (UWP)対応をReactNativeに追加することが書かれています。
これにより、WindowsのPCがモバイルだけでなく、Xbox OneやHoloLensのためのアプリをReactNativeで作れるようになります。
記事では、F8のアプリをWindows 10 mobileとDesktop向けに作ったことが紹介されています。</p>

<p>JavaScriptのランタイムにはChakraが使われているみたいです。</p>

<p>また、VSCodeのReactNative拡張やReactNativeを使ったWindowsアプリに対するCodePush対応などを行っているようです。</p>

<ul>
<li><a href="http://microsoft.github.io/code-push/articles/ReactNativeWindows.html">http://microsoft.github.io/code-push/articles/ReactNativeWindows.html</a></li>
</ul>


<p>現在はforkしたrepositoryになっていますが、将来的にはReactNative本体と同期が取れるようにうまくやっていくようです。</p>

<p><a href="https://github.com/ReactWindows/react-native">https://github.com/ReactWindows/react-native</a></p>

<h2>core note 4/7</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-04/april-7.md">https://github.com/reactjs/core-notes/blob/master/2016-04/april-7.md</a></li>
</ul>


<p>Reactのcoreチームのmeeting noteが公開されています。
以前はあったものの途中で削除されたBrowser Testingについて言及されているのは注目です。</p>

<p>その他では、<em>ReactDOM.render() return value being <del>deprecated</del> legacy</em> (<a href="https://github.com/facebook/react/pull/6400">#6400</a>) も注目です。
内部的なアルゴリズムの見直しをするために、ReactDOM.renderが将来的に戻り値を返さなくなります。
戻り値を使いたい場合は、Refsを指定して取得することになりそうです。</p>

<p>また、<em>Sebastian is moving some files from React Native to React</em> (<a href="https://github.com/facebook/react/pull/6338">#6338</a>)としてReactNativeのrenderer周りをreactのrepositoryに持ってきて、<code>react-native-renderer</code>として別パッケージにすることも予定されています。
さらに<code>react-dom</code>から<code>react-dom-renderer</code>も切り離すことを検討されています。</p>

<p>これによってカスタムrendererを作る時のI/Fが整備されて、わかりやすくなるといいなと思います。
Windows対応もあったりでこの辺りを整理する優先度は高そうです。</p>

<h2>Improve React performance with Babel</h2>

<ul>
<li><a href="https://medium.com/doctolib-engineering/improve-react-performance-with-babel-16f1becfaa25">https://medium.com/doctolib-engineering/improve-react-performance-with-babel-16f1becfaa25</a></li>
</ul>


<p>productionビルドやBabelの最適化を使った場合のパフォーマンスについてのエントリーです。当たり前ですが、developmentビルドとproductionビルドのパフォーマンスの違いが目立っています。
Babelを使った最適化の場合でも数%の向上が見られますが、アプリケーションによるので利用する際は計測してみて導入することをおすすめします。</p>

<h2>unofficial React Router docs</h2>

<ul>
<li><a href="http://knowbody.github.io/react-router-docs/">http://knowbody.github.io/react-router-docs/</a></li>
</ul>


<p><a href="https://github.com/knowbody">knowbody</a>さんによる非公式なReact Routerのドキュメントです。WIPですが、公式を読んでよくわからなかった人は確認してみるといいかもしれません。</p>

<h2>React Router is dead. Long live rrtr.</h2>

<p><strong>下のエントリーは現在は削除されています。</strong></p>

<ul>
<li><del><a href="https://medium.com/@taion/react-router-is-dead-long-live-rrtr-d229ca30e318#.vd0qjkccc">https://medium.com/@taion/react-router-is-dead-long-live-rrtr-d229ca30e318#.vd0qjkccc</a></del></li>
</ul>


<p>React Routerでここ数ヶ月中心的にcontributeしていた<a href="https://github.com/taion">taion</a>さんがリリースのサイクルの遅さやプロセスに不満を抱いてforkして<a href="https://github.com/taion/rrtr">rrtr</a>を作ったことを表明したエントリーです。</p>

<p>それに対して、React Routerのオーナーである<a href="https://github.com/ryanflorence">ryanflorence</a>さんもgistでリアクションしています。</p>

<ul>
<li><del><a href="https://gist.github.com/ryanflorence/08a056374e24a7cda3c459e3d7d63e6e">https://gist.github.com/ryanflorence/08a056374e24a7cda3c459e3d7d63e6e</a></del> (<strong>これも削除済み</strong>)</li>
</ul>


<p>で下の通り、結局丸く収まりました。</p>

<ul>
<li><a href="https://medium.com/rackt-and-roll/rrtr-is-dead-long-live-react-router-ce982f6f1c10">https://medium.com/rackt-and-roll/rrtr-is-dead-long-live-react-router-ce982f6f1c10</a></li>
</ul>


<p>結果的に、PRをmergeするプロセスや定期的なリリースなど、プロジェクトの運営方針が行われました。</p>

<p>ちなみにtaionさんはhistoryと組み合わせてscroll位置の復元などをサポートするscroll-behaviorというライブラリーも公開しています。</p>

<ul>
<li><a href="https://github.com/taion/scroll-behavior">https://github.com/taion/scroll-behavior</a></li>
</ul>


<h2>crysislinux/chrome-react-perf</h2>

<ul>
<li><a href="https://github.com/crysislinux/chrome-react-perf">https://github.com/crysislinux/chrome-react-perf</a></li>
</ul>


<p>Perfによる計測をChrome Developer Toolsで行うことができるライブラリーです。
カジュアルに計測が出来そうなのでよさそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js v15.0 changes]]></title>
    <link href="http://blog.koba04.com/post/2016/03/09/react-js-v15-changes/"/>
    <updated>2016-03-09T13:07:52+09:00</updated>
    <id>http://blog.koba04.com/post/2016/03/09/react-js-v15-changes</id>
    <content type="html"><![CDATA[<p><strong>v15.0.0がリリースされました(2016/04/08)</strong></p>

<hr />

<p><strong>RC2が出たので追記</strong></p>

<p><strong>RC2</strong> ではIE、Edgeでマークアップの構造によって一部のテキストが表示されないバグ(<a href="https://github.com/facebook/react/issues/6246">#6246</a>)とSVGに関する変更がrevertされました。</p>

<hr />

<p>React.js v15.0がリリースされたので変更内容などを整理したいと思います。</p>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/03/07/react-v15-rc1.html">https://facebook.github.io/react/blog/2016/03/07/react-v15-rc1.html</a></li>
<li><a href="http://facebook.github.io/react/blog/2016/03/16/react-v15-rc2.html">http://facebook.github.io/react/blog/2016/03/16/react-v15-rc2.html</a></li>
<li><a href="http://facebook.github.io/react/blog/2016/04/07/react-v15.html">http://facebook.github.io/react/blog/2016/04/07/react-v15.html</a></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% npm install --save react@15.0.0 react-dom@15.0.0</span></code></pre></td></tr></table></div></figure>


<p>今回の一番大きな変更はバージョン番号かなと思います。</p>

<p>0.14から15.0に。</p>

<p>0.x系だとproduction readyではないと思われることから一気に15.0になりましたが0.がなくなっただけで大きな変化があるわけでもないです。
なぜ1.0ではないのかというと1.0というバージョン番号は特別意味のあるものとして扱われるので、そうではなくてすでにproduction readyでありsemverに従っているということを明確にするために0.を取って15.0になりました。</p>

<p><a href="https://facebook.github.io/react/blog/2016/02/19/new-versioning-scheme.html">https://facebook.github.io/react/blog/2016/02/19/new-versioning-scheme.html</a></p>

<p>ちなみにこれまでもminor version(0.13 &ndash;> 0.14)などでは破壊的な変更がありましたがpatch version(0.14.1 &ndash;> 0.14.2)などは基本的には破壊的な変更はなかったのでバージョンアップのサイクルなどが変わることはないと思います。
（patch versionの更新でUndocumentedなfeatureで破壊的な変更が入ることはありましたが&hellip;）</p>

<p>これまでも破壊的な変更をする際は基本的には前のバージョンでwarningを入れてから更新するので、今回もすでに0.14.7を使っていて特にwarningなどが出力されていないのであれば問題なく15.0にアップデートできると思います。</p>

<!-- more -->


<p>ちなみにIE8のサポートについてはまだIE8対応のコードは削除されていないので動作するはずですが、今後はIE8のためだけのバグFixなどは行わないというステータスです。</p>

<p><a href="https://facebook.github.io/react/blog/2016/01/12/discontinuing-ie8-support.html">https://facebook.github.io/react/blog/2016/01/12/discontinuing-ie8-support.html</a></p>

<h2>Major changes</h2>

<h3>document.createElement is in and data-reactid is out</h3>

<p>これまではReactで構築した全てのDOMに対して<code>data-reactid</code>という属性が付与されていましたがそれが付与されなくなりました。すっきりしていいですね。
ReactDOM.renderを行ったルートの要素には<code>data-reactroot</code>という属性が付与されます。</p>

<p>またこれまでは多くの場合で<code>document.createElement</code>を使うよりも高速であるという理由から初期マウント時にはHTML文字列を生成してinnerHTMLで流し込んでいましたが、ブラウザーの改善などにより必ずしもそうとも言えなくなってきたので<code>document.createElement</code>を使って作成するように変更されました。</p>

<p><code>data-reactid</code>がなぜ必要だったのかはReactのイベントの仕組みに関係しています。
ReactではイベントハンドリングはそれぞれのReactElementと対応付けられたDOM要素にイベントリスナーを登録してハンドリングするのではなく、<code>ReactDOM.render</code>で指定したルートのDOM要素だけにイベントリスナーを登録してそこで全てのイベントをハンドリングしています。
ルートで受け取ったイベントがどのReactElementと対応付けられたDOMで発生したのかを判定するために<code>data-reactid</code>が使用されていました。</p>

<p>イベントは頻繁に発生するため内部ではキャッシュなどを駆使して高速化が図られていたのですがそれによるバグも多く、今回HTML文字列ではなくDOM要素を作成するようになり、DOM要素を保持しておけばいいので<code>data-reactid</code>を使ったマッピング情報を保持しておく必要がなくなりました。</p>

<p>ちなみに<code>ReactDOM.renderToString</code>を使って生成したHTML文字列には変わらず<code>data-reactid</code>が付与されています。</p>

<h3>No more extra <code>&lt;span&gt;</code>s</h3>

<p><code>{name}</code>などのように変数を文字列として埋め込んだ際にこれまでは差分更新のために<code>span</code>タグで囲まれていたのがcomment nodeに変更されました。</p>

<ul>
<li>v0.14</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-reactid=</span><span class="s">&quot;.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">data-reactid=</span><span class="s">&quot;.0.0&quot;</span><span class="nt">&gt;</span>Hello <span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">data-reactid=</span><span class="s">&quot;.0.1&quot;</span><span class="nt">&gt;</span>React<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>v15</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">data-reactroot=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="c">&lt;!-- react-text: 2 --&gt;</span>Hello <span class="c">&lt;!-- /react-text --&gt;</span>
</span><span class='line'><span class="c">&lt;!-- react-text: 3 --&gt;</span>React<span class="c">&lt;!-- /react-text --&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>この変更はマークアップ構造の変更を生むので更新する際には注意が必要です。
特にCSS周りやテストでspanが挿入されることに依存したコードを書いていると壊れます。</p>

<p>元々が意図しないマークアップが挿入されていたのでそれがなくなってよかったんじゃないでしょうか。</p>

<h3>Rendering null now uses comment nodes</h3>

<p>renderメソッドでnullを返した場合に、これまでは<code>&lt;noscript&gt;</code>タグがrenderされていましたがcomment nodeに変更されました。
この変更もマークアップ構造の変更を生むので特に<code>:nth-child</code>などのセレクターを使っている場合には注意が必要です。</p>

<p>また下記のエントリーにもあるように無駄に<code>&lt;noscript&gt;</code>タグが更新されていたような場合に対するパフォーマンスの改善となります。</p>

<p><a href="http://benchling.engineering/deep-dive-react-perf-debugging/">http://benchling.engineering/deep-dive-react-perf-debugging/</a></p>

<h3>Improved SVG support</h3>

<p><strong>[更新]RC2でrevertされました</strong></p>

<p><del>全てのSVGタグがサポートされるようになりました。一般的ではないタグは<code>React.DOM</code>のヘルパーとしては提供されていませんが、<code>React.createElement</code>で全てのSVGタグを作成できます。</del>
<del>全てのSVGタグはキャメルケースやハイフンなどそのままの指定で作成できます。</del>
<del><code>gradientTransform</code>は<code>gradientTransform</code>のままで<code>clip-path</code>は<code>clip-path</code>のまま指定します。</del></p>

<p><del>ちなみにクラスを指定する場合は<code>className</code>ではなくて、<code>class</code>で指定します。custom elementsと同じです。</del>
<del>それに関するissueはこちら。</del></p>

<p><del> <a href="https://github.com/facebook/react/issues/6211">https://github.com/facebook/react/issues/6211</a> </del></p>

<p>このSVGに対する挙動の変更はcustom elementsの挙動と同様であったのですが、HTMLElementとの整合性(<code>class</code> &ndash;> <code>className</code>など)がなくなってしまうことが問題だということでrevertされました。
なのでサポートされていないsvgの要素や属性があれば引き続きPRして反映する必要があります。こんな感じで。(<a href="https://github.com/facebook/react/pull/6267">#6267</a>)</p>

<p>将来的にはSVGもHTMLも普段SVGやHTMLと同じようにclassはclassのままで指定できるようになるのではないかなと思います。具体的な予定は示されていませんが&hellip;。</p>

<h2>Breaking changes</h2>

<p>v15で最も大きなBreaking changeは上に書いたspanタグを使わなくなったことによるマークアップ構造の変化です。</p>

<p>その他では、v0.14でwaringsを出力していたDeprecatedなAPIが完全に削除されました。</p>

<ul>
<li><p>Reactのパッケージから<code>findDOMNode</code>, <code>render</code>, <code>renderToString</code>, <code>renderToStaticMarkup</code>, <code>unmountComponentAtNode</code>が削除されました。代わりにReactDOMのパッケージにある同名のAPIを使います。</p></li>
<li><p>Addonとして提供されていた<code>batchedUpdates</code>と<code>cloneWithProps</code>が削除されました。</p></li>
<li><p><code>setProps</code>, <code>replaceProps</code>, <code>getDOMNode</code>のAPIが削除されました。</p></li>
</ul>


<h2>New deprecations, introduced with a warning</h2>

<p><code>LinkedStateMixin</code>と<code>valueLink</code>はほとんど使われておらず、v16で廃止するためのwarningを追加されます。</p>

<p><a href="https://facebook.github.io/react/docs/two-way-binding-helpers.html">https://facebook.github.io/react/docs/two-way-binding-helpers.html</a></p>

<p>必要な場合は下記のパッケージを利用してください。</p>

<p><a href="https://www.npmjs.com/package/react-linked-input">https://www.npmjs.com/package/react-linked-input</a></p>

<h2>New helpful warnings</h2>

<ul>
<li>developmentビルド(<code>NODE_ENV</code>が<code>production</code>でない)にも関わらずminifiedされている場合はproductionビルドを使うようにwarningが出ます。

<ul>
<li>Reactの中のコードを見たことがある人であればproductionビルドにする必要性がわかるはず&hellip;。developmentビルドには大量のデバッグやwarning用のコードが含まれています。</li>
</ul>
</li>
<li>styleのwidthやmarginに数値を渡すと自動で単位(px)を付与してくれますが、その際に数値を文字列として渡しているとwarningが出ます。将来のバージョンでは文字列の場合は単位が自動で付与されなくなります。

<ul>
<li><code>&lt;div style={ {width: 10} }&gt;</code>はOK、<code>&lt;div style={ {width: "10"} }&gt;</code>はwarningが出ます。</li>
</ul>
</li>
<li>SyntheticEventに追加でpropertyをセットしようとしたり、すでに解放されているのにアクセスしようとするとwarningが出力されます。

<ul>
<li>追加でpropertyをセットした場合にwarningが出るのはES2015のProxiesがサポートされている環境のみです。ちなみに自分が実装しました。</li>
</ul>
</li>
<li>ReactElementの<code>ref</code>と<code>key</code>のPropにアクセスしようとするとwarningが出力されます。これらはReact自体が使うためのPropでkeyで使った値が必要な場合は別途Propとして設定する必要があります。</li>
<li>DOM ElementのPropに対して、<code>onClick</code>を<code>onclick</code>のように大文字・小文字の指定が間違っている場合にはwarningが出力されるようになりました。</li>
</ul>


<h2>Notable bug fixes</h2>

<ul>
<li>幾つかのメモリリークが修正されています。</li>
</ul>


<hr />

<p>SyntheticEventでのメモリリークについては自分が修正したので紹介しておくとSyntheticEventの<code>target</code>属性が正しく解放されるようになりました。</p>

<p>SyntheticEventはPoolingされており、イベントハンドラーの処理が終了すると初期化されPoolに戻るのですが一番よく使う<code>target</code>属性だけ解放されていませんでした。
したがって、下記のようなコードはv0.14では動作していましたがv15では動作しません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Component</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">));</span> <span class="c1">// &lt;div&gt;click&lt;/div&gt;</span>
</span><span class='line'>    <span class="p">}}</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="nx">click</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは<code>onClick</code>が実行された時点でSyntheticEvent(<code>e</code>)が初期化されており、setTimeoutのコールバック実行時にはすでにtargetの値が初期化(null)されているためです。
上記の場合、<code>target</code>をローカル変数として保持するか<code>e.persist()</code>を使って保持する必要があります。</p>

<p>SyntheticEventがPoolingされているのは大量のイベントオブジェクトを作成することで発生するGCを避けるなどパフォーマンス上の理由からなのですが、モダンなブラウザーではもう必要ないのではないかということでPoolingをやめることが検討されています。</p>

<p>SyntheticEvent周りは自分が追加したProxyを使ったコードなどかなり混沌としてきているのでPoolingやめてリファクタリングするのはとてもいいと思います。やりたい&hellip;。</p>

<p><a href="https://github.com/facebook/react/issues/6190">https://github.com/facebook/react/issues/6190</a></p>

<hr />

<ul>
<li>IE10, 11などでのイベントの扱いが改善されています。</li>
<li><code>cite</code>と<code>profile</code>の属性がサポートされました。</li>
<li><code>onAnimationStart</code>, <code>onAnimationEnd</code>, <code>onAnimationIteration</code>, <code>onTransitionEnd</code>, <code>onInvalid</code>のイベントがサポートされました。また<code>object</code>要素に<code>onLoad</code>イベントが追加されました。</li>
<li>shallowCompareなどのいくつかの場所で<code>Object.is</code>による比較が行われるようになりました(実際にはpolyfill)。これにより、<code>+0 !== -0</code>となったり<code>NaN === NaN</code>となります。

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is</a></li>
</ul>
</li>
<li><p>ReactDOMがデフォルトではpropertyとしてではなくattributeとして扱うようになります。これによるEdge caseなバグが修正されました。また属性値が<code>null</code>の場合に属性が完全に削除されるようになりました。これによりブラウザーがデフォルト値を設定しないようになります。</p></li>
<li><p>あとblogにはありませんでしたが、Stateless Componentsが<code>null</code>を返せるようになったのは地味に嬉しいですね！</p></li>
</ul>


<h2>Regression?</h2>

<ul>
<li>15.0.0-rc.1では<code>onTouchTap</code>が動作していないようなので使っている人は注意した方がよさそうです。

<ul>
<li><a href="https://github.com/facebook/react/issues/6221">https://github.com/facebook/react/issues/6221</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js meetup #3を開催しました]]></title>
    <link href="http://blog.koba04.com/post/2016/03/07/reactjs-meetup3/"/>
    <updated>2016-03-07T17:08:38+09:00</updated>
    <id>http://blog.koba04.com/post/2016/03/07/reactjs-meetup3</id>
    <content type="html"><![CDATA[<p>前回開催したのが9月だったみたいなので半年くらい経ちましたがReact.js meetup #3を開催しました。</p>

<ul>
<li><a href="http://reactjs-meetup.connpass.com/event/26229/">http://reactjs-meetup.connpass.com/event/26229/</a></li>
</ul>


<p>今回はサイボウズさんに会場を提供して頂き開催することができました。
サイボウズの皆様、参加者の皆様、発表者の皆様ありがとうございました！！</p>

<p>connpassの管理画面によると<strong>75/80人</strong>の方が参加してくださいました。感謝！</p>

<p><img src="http://blog.koba04.com/images/reactjs-meetup3.jpg" title="'React.js meetup #3'" ></p>

<!-- more -->


<h2>開催の経緯</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/koba04">@koba04</a> hey! I&#39;ll be in Tokyo in February. Are there any ReactJS or general JavaScript meetups happening during that time?</p>&mdash; Christoph Pojer (@cpojer) <a href="https://twitter.com/cpojer/status/691698537306796032">January 25, 2016</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>というmentionがきっかけで急遽の開催となりました。前回と全く同じような経緯です。</p>

<p><a href="http://blog.koba04.com/post/2015/09/09/reactjs-meetup2/">http://blog.koba04.com/post/2015/09/09/reactjs-meetup2/</a></p>

<h2>準備など</h2>

<p><a href="https://twitter.com/yosuke_furukawa">@yusuke_furukawa</a>会長と相談しつつ、サイボウズさんに会場が決まってからは当日の準備や受付、懇親会の手配までサイボウズの方々にお任せしてしまって本当に助かりました！
というわけで今回も自分はあまり何もしてないのですがイベントの構成を考えたりしていました。</p>

<p>募集に関しては募集開始日に埋まることは予想していたのですが、2分持たずに埋まることまでは想定していなかったので次回の募集方法については考えようかなと思っています。
（先着・抽選50%ずつなど）</p>

<h2>Talk</h2>

<p>Talkに関しては、<a href="https://twitter.com/cpojer">@cpojer</a>さんのTalkは事前に相談して得意分野であるというjscodeshitについてのTalkをお願いしてReactなどについてはQ&amp;Aでという形になりました。
Q&amp;Aについては<a href="https://twitter.com/yando">@yando</a>さんが通訳してくださったので本当に助かりました。ありがとうございました！！</p>

<p>今回のTalkはJSConf EU 2015でのTalkがベースになっているので興味のある方はそちらも参照してください。</p>

<p><a href="https://www.youtube.com/watch?v=d0pOgY8__JM">https://www.youtube.com/watch?v=d0pOgY8__JM</a></p>

<p>その他のTalkについても自分が聞きたいなぁと思った内容について個別にTalkをお願いしました。
どのTalkも15分では短いくらいで面白かったです。</p>

<p>LTもどれも面白かったですね。</p>

<p>全部のTalkの資料が公開されているわけではないですが、下記のブログやtogetterによるまとめを見てください！</p>

<ul>
<li><a href="http://blog.cybozu.io/entry/2016/03/04/080000">http://blog.cybozu.io/entry/2016/03/04/080000</a></li>
<li><a href="http://togetter.com/li/942145">http://togetter.com/li/942145</a></li>
</ul>


<h2>参加者</h2>

<p>挙手でアンケートを取ったのですが、</p>

<ul>
<li>Reactを使っている人 &hellip; ほとんど全員</li>
<li>仕事でReact使っているという人 &hellip; 半分くらい</li>
<li>Redux使っている人 &hellip; 半分くらい</li>
<li>Facebook Flux使っている人 &hellip; 1割くらい</li>
<li>GraphQL、Relay使っている人 &hellip; 1人？</li>
<li>ReactNative使っている人 &hellip; 1人？</li>
</ul>


<p>みたいな感じでした。
GraphQL、Relay、ReactNativeなんかは英語の記事ではそこそこ見るのですがやはり導入のハードルが高いので実際に踏み込んでいる人はそんなに多くなさそうです。</p>

<p>ReactNativeはGitHubを見てる限り今も活発にメンテナンスされていて、React.js Conf 2016でもTalkが多かったので今後どうなるのかは注目しています。</p>

<h2>次回&hellip;?</h2>

<p>次回はなんとなく6月の頭にあるReact Europe後くらいがいいかなと思っていますが、何か話したいネタがあったり聞きたいテーマなどあれば教えてもらえるとそれまでに開催するかもしれないのでよろしくお願いします！</p>

<p>Reactの勉強会が少ない気がするという声も聞いたのでやりたい人がいたら是非やるといいんじゃないかなと思います！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js v0.14 changes]]></title>
    <link href="http://blog.koba04.com/post/2015/09/22/react-js-v014-changes/"/>
    <updated>2015-09-22T00:00:00+09:00</updated>
    <id>http://blog.koba04.com/post/2015/09/22/react-js-v014-changes</id>
    <content type="html"><![CDATA[<p>React v0.14のRC版が出たので紹介したいと思います。
<a href="http://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html">http://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html</a></p>

<p>インストールはnpmからバージョン指定でインストールするかscriptを読み込むことで試すことが出来ます。
<code>react-dom</code>が何なのかは後ほど説明します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install react@0.14.0-rc1
</span><span class='line'>npm install react-dom@0.14.0-rc1</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://fb.me/react-0.14.0-rc1.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!--  https://fb.me/react-with-addons-0.14.0-rc1.js --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://fb.me/react-dom-0.14.0-rc1.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Major changes</h2>

<h3>ReactとReactDOMのパッケージが分割されました</h3>

<p><code>react-native</code>や<code>react-canvas</code>など、DOM以外の環境で使われるようになってくる中で、Reactのコアの部分とDOMに関わる部分がパッケージとして分割されるようになりました。</p>

<p>Reactのパッケージには、<code>React.createElement</code>、<code>React.createClass</code>、<code>React.Component</code>、<code>React.PropTypes</code>、<code>React.Children</code>が含まれています。</p>

<p>ReactDOMのパッケージには、<code>ReactDOM.render</code>、<code>ReactDOM.unmountComponentAtNode</code>、<code>ReactDOM.findDOMNod</code>が含まれています。
また、ReactDOMのパッケージには<code>react-dom/server</code>として<code>ReactDOMServer.renderToString</code>と<code>ReactDOMServer.renderToStaticMarkup</code>が含まれています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">[</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// サーバーサイド</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOMServer</span> <span class="nx">from</span> <span class="s1">&#39;react-dom/server&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">html</span>  <span class="o">=</span> <span class="nx">ReactDOMServer</span><span class="p">.</span><span class="nx">renderToString</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>scriptタグで読み込んで利用する場合は、ReactとReactDOMそれぞれを読み込んで利用する必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://fb.me/react-0.14.0-rc1.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://fb.me/react-dom-0.14.0-rc1.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">App</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">,</span> <span class="p">{},</span> <span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;world&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">App</span><span class="p">),</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>codemodも提供されているので既存のコードを一括で変換したい場合は使ってみるといいかもしれません。
<a href="https://github.com/facebook/react/blob/master/packages/react-codemod/README.md">https://github.com/facebook/react/blob/master/packages/react-codemod/README.md</a></p>

<h4>Addons</h4>

<p>また、Addonもそれぞれ個別のパッケージに分割されたので必要に応じてnpmでインストールするようになりました。</p>

<ul>
<li>react-addons-clone-with-props</li>
<li>react-addons-create-fragment</li>
<li>react-addons-css-transition-group</li>
<li>react-addons-linked-state-mixin</li>
<li>react-addons-perf</li>
<li>react-addons-pure-render-mixin</li>
<li>react-addons-shallow-compare</li>
<li>react-addons-test-utils</li>
<li>react-addons-transition-group</li>
<li>react-addons-update</li>
</ul>


<p>これによって、1つのAddonを使いたい時にその他全部のAddonがbundleされることがなくなりました。
scriptタグで読み込むための<code>react-with-addons</code>のJSにはこれまで通り全てのAddonが含まれています。</p>

<p>また、<code>batched_updates</code>としてあったReactのイベントやライフサイクル以外でもバッチによる一括アップデートを行えるAddonは<code>ReactDOM.unstable_batchedUpdates</code>に移動しました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">cost</span> <span class="nx">component</span> <span class="o">=</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">unstable_batchedUpdates</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">component</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">count</span><span class="o">:</span> <span class="o">++</span><span class="nx">count</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">component</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">count</span><span class="o">:</span> <span class="o">++</span><span class="nx">count</span><span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにunstable_batchedUpdatesという名前になっているけど今後どうする予定なのかを聞いたところ、全ての更新をバッチ更新にしたいということだったので最終的には不必要にしたいようです。</p>

<p><strong>ReactとReactDOMやAddon</strong> のパッケージは意図しない挙動を避けるために同じバージョンを使うことが推奨されています。</p>

<h3>DOMComponentに対するrefによる参照でDOM Nodeが取得出来るようになりました</h3>

<p>これまでDOM nodeを取得したい場合には<code>React.findDOMNode(this.refs.div)</code> のようにする必要がありましたが、<code>this.refs.div</code>で直接DOM nodeを取得することが出来るようになりました。
findDOMNodeの呼び出しを書かなくてもいいというだけですが簡単になりました。
それと同時にrefでのComponentの参照はなるべくDOM Component以外では使わないようにしておかないと混乱を招きそうではあります。</p>

<p>また、<code>ReactDOM.render(&lt;div&gt;foo&lt;/div&gt;)</code> とした場合の返り値もDOM Nodeになります。
ReactDOM.findDOMNodeは以降もComposite Componentに対するDOM nodeを取得する場合に利用することが出来ます。</p>

<h3>Stateless Components</h3>

<p>Propsだけに依存するような状態を持たないComponentを定義するための新しい方法が追加されました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Hello</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Arrow Functions</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Arror Functions and Destructuring Assignment</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="p">({</span><span class="nx">name</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>また、PropTypesやdefaultPropsも定義することが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Hello</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Hello</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Hello</span><span class="p">.</span><span class="nx">defaultProps</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;World&#39;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとContextも。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Hello</span><span class="p">(</span><span class="nx">props</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">context</span><span class="p">.</span><span class="nx">version</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Hello</span><span class="p">.</span><span class="nx">contextTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">version</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>v0.14では最低限の実装のみになっていますが、以降のバージョンではStateless Componentsで書いておくことでパフォーマンス最適化の恩恵が受けられるようになる予定です。
v0.14以降ではStateless ComponentsがComponent定義の第一の選択肢になっていきそうです。</p>

<h3>react-toolsは廃止されました</h3>

<p>これは以前にもブログで紹介されていましたが、<code>react-tools</code>は非推奨になります(もう更新されない)。代わりにBabelを利用しましょう。</p>

<p><a href="http://facebook.github.io/react/blog/2015/06/12/deprecating-jstransform-and-react-tools.html">http://facebook.github.io/react/blog/2015/06/12/deprecating-jstransform-and-react-tools.html</a></p>

<ul>
<li>jsxコマンドは<code>babel</code>コマンドになります。</li>
<li>browserifyのtransformであるreactifyは<code>babelify</code>になります。</li>
<li>webpackのjsx-loaderは<code>babel-loader</code>になります</li>
<li>Node.jsのサーバー上で動かすときに<code>require('node-jsx').install()</code>としていたものは<code>require('babel/register')</code>になります。</li>
<li>ブラウザでJSXを変換するために使うJSXTransformはbabel-core/browser.jsを読み込んでtypeを<code>text/babel</code>にして使用します。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://fb.me/react-0.14.0-rc1.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://fb.me/react-dom-0.14.0-rc1.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;node_modules/babel-core/browser.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/babel&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="p">({</span><span class="nx">name</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにBabelは6.0でTransformが全て外出しになり使う場合はpluginとして読み込みようになることが予定されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>&quot;plugins&quot;: [&quot;preset-es2015&quot;, &quot;preset-react&quot;]
</span></code></pre></td></tr></table></div></figure>


<h3>Babelによるコンパイル最適化が実施されるようになりました</h3>

<p>Babel5.8.23以降のバージョンを利用することで、<code>inlineElements</code>と<code>constantElements</code>を２つの最適化を行うことが出来るようになります。
これらは開発用のwarningやPropTypesによるチェックを無効化するので、productionモードの場合だけで有効にすることが推奨されています。</p>

<p>下記のコードを元に変換内容を確認してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// hello.js</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最適化なし</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">_React$Component</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_inherits</span><span class="p">(</span><span class="nx">App</span><span class="p">,</span> <span class="nx">_React$Component</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">_classCallCheck</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">App</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">_get</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">App</span><span class="p">.</span><span class="nx">prototype</span><span class="p">),</span> <span class="s2">&quot;constructor&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">).</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_createClass</span><span class="p">(</span><span class="nx">App</span><span class="p">,</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;render&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span>
</span><span class='line'>        <span class="s2">&quot;div&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;p&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'>        <span class="p">),</span>
</span><span class='line'>        <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;p&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">App</span><span class="p">;</span>
</span><span class='line'><span class="p">})(</span><span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>inlineElements</h4>

<p>inlineElementsの最適化を行うことでJSXの変換が<code>React.createElement</code>への変換ではなくてただのオブジェクトへの変換となります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">babel</span> <span class="o">--</span><span class="nx">optional</span> <span class="nx">optimisation</span><span class="p">.</span><span class="nx">react</span><span class="p">.</span><span class="nx">inlineElements</span> <span class="nx">test</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">_createClass</span><span class="p">(</span><span class="nx">App</span><span class="p">,</span> <span class="p">[{</span>
</span><span class='line'>  <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;render&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$$typeof</span><span class="o">:</span> <span class="nx">_typeofReactElement</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;div&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">key</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">ref</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">children</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>          <span class="nx">$$typeof</span><span class="o">:</span> <span class="nx">_typeofReactElement</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;p&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">key</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">ref</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">children</span><span class="o">:</span> <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="nx">_owner</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>        <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$$typeof</span><span class="o">:</span> <span class="nx">_typeofReactElement</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;p&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">key</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">ref</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">children</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="nx">_owner</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>        <span class="p">}]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">_owner</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}]);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">App</span><span class="p">;</span>
</span><span class='line'><span class="p">})(</span><span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>constantElements</h4>

<p><code>constantElements</code>では、変数の含まれていないReactElementに対する呼び出しを<code>render</code>の外に出すことで不必要な<code>React.createElement</code>の呼び出しを避ける事が出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">babel</span> <span class="o">--</span><span class="nx">optional</span> <span class="nx">optimisation</span><span class="p">.</span><span class="nx">react</span><span class="p">.</span><span class="nx">constantElements</span> <span class="nx">test</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">_ref</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;p&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">_React$Component</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">_inherits</span><span class="p">(</span><span class="nx">App</span><span class="p">,</span> <span class="nx">_React$Component</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">_classCallCheck</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">App</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">_get</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getPrototypeOf</span><span class="p">(</span><span class="nx">App</span><span class="p">.</span><span class="nx">prototype</span><span class="p">),</span> <span class="s2">&quot;constructor&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">).</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_createClass</span><span class="p">(</span><span class="nx">App</span><span class="p">,</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;render&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span>
</span><span class='line'>        <span class="s2">&quot;div&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">_ref</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;p&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">App</span><span class="p">;</span>
</span><span class='line'><span class="p">})(</span><span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Breaking changes</h2>

<p>ここでのBreaking changeはv0.13でwarningとして出力されていたものです。</p>

<ul>
<li>Propsは変更不可として扱われます。開発用のビルドでは<code>Object.freeze</code>されています。Propsの値を変更したい場合は、<code>React.cloneElement</code>によって再生成する必要があります。</li>
<li>childrenにオブジェクト形式で渡すことはサポートされなくなりました。配列に変更するか<code>react-addons-create-fragment</code>を使う必要があります。</li>
<li><code>classSet</code>は削除されたので代わりに<code>classnames</code>のnpm packageを利用してください。</li>
</ul>


<hr />

<p>以下はv0.13でwarningが出力されていなかったものですが、簡単に修正することが出来る変更点です。</p>

<ul>
<li><code>React.initializeTouchEvents</code>は不要になったので削除してください。タッチイベントはデフォルトでサポートされるようになりました。</li>
<li>前述したDOM Componentに対するrefの変更により、<code>TestUtils.findAllInRenderedTree</code>とそれに関連するhelperはComposite Componentのみを受け取るようになりました。(<code>scryRendered〜</code>、<code>findRendered〜</code>系のTestUtils)</li>
</ul>


<h2>Deprecations</h2>

<ul>
<li><code>getDOMNode</code>は非推奨になったので代わりに<code>ReactDOM.findDOMNode</code>を利用してください。前述したとおりDOM Componentの場合は<code>ReactDOM.findDOMNode</code>も不要です。</li>
<li><code>setProps</code>と<code>replaceProps</code>は非推奨になります。代わりに親のComponentから再度<code>ReactDOM.render</code>を呼んでください。</li>
<li>ES6 ClassesによるComponent定義で<code>React.Component</code>を継承することが必須になりました。<a href="http://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html#other-languages">ES3 module pattern</a>はまだ使用することが出来ます。</li>
<li><code>style</code>のPropsを別のrenderと共有し変更することはPropsが変更不可として扱われる影響で非推奨となりました。</li>
<li><code>react-addons-clone-with-props</code>は非推奨になりました。代わりに<code>React.cloneElement</code>を使用してください。<code>cloneElement</code>は<code>cloneWithProps</code>と違い、<code>className</code>と<code>style</code>のmergeは行いません。必要であれば開発者がmergeする必要があります。</li>
<li>信頼性向上のために<code>react-addons-css-transition-group</code>がtransition eventをlistenしなくなりました。そのため<code>transitionEnterTimeout={500}</code>のように明示的にdurationをPropsに指定する必要があります。</li>
</ul>


<h2>Enhancements</h2>

<ul>
<li><code>React.Children.toArray</code>が追加されました。ネストしたchildrenを受け取りkeyを設定したフラットな配列として返すことが出来ます。また<code>React.Children.map</code>もただの配列を返すようになりました。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">Children</span><span class="p">.</span><span class="nx">toArray</span><span class="p">(</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">foo</span><span class="o">&lt;</span><span class="err">/div&gt;, &lt;div&gt;bar&lt;/div&gt;,</span>
</span><span class='line'>    <span class="p">[</span><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">baz</span><span class="o">&lt;</span><span class="err">/div&gt;]</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [&lt;div key=&quot;.0&quot;&gt;foo&lt;/div&gt;, &lt;div key=&quot;.1&quot;&gt;bar&lt;/div&gt;, &lt;div key=&quot;.2:0&quot;&gt;baz&lt;/div&gt;]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>console.warn</code>の代わりに<code>console.error</code>でwarningを出力するようになりました(stack traceを出すため)。<code>console.error</code>として出力されるwarningは将来のバージョンで壊れるような使い方をしていた場合であり、<code>must-fix</code>なエラーとして扱われるべきです。</p></li>
<li><p>可能であればReactDOMがXHTML互換なHTMLを生成するようになりました。</p></li>
<li><p>ReactDOMが<code>capture、challenge、inputMode、is、keyParams、keyType、minLength、summary、wrap</code>といった標準の属性や<code>autoSave、results、security</code>といった非標準な属性をサポートするようになりました。</p></li>
<li><p>SVG属性のサポートが追加されました。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">xlinkActuate</span><span class="err">、</span><span class="nx">xlinkArcrole</span><span class="err">、</span><span class="nx">xlinkHref</span><span class="err">、</span><span class="nx">xlinkRole</span><span class="err">、</span><span class="nx">xlinkShow</span><span class="err">、</span><span class="nx">xlinkTitle</span><span class="err">、</span><span class="nx">xlinkType</span><span class="err">、</span><span class="nx">xmlBase</span><span class="err">、</span><span class="nx">xmlLang</span><span class="err">、</span><span class="nx">xmlSpace</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>image</code>のSVGタグがサポートされました。</p></li>
<li><p>custome elementsで任意の属性がサポートされるようになりました。</p></li>
<li><p><code>audio</code>と<code>video</code>タグに対するイベントのサポートが追加されました。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">onAbort</span><span class="err">、</span><span class="nx">onCanPlay</span><span class="err">、</span><span class="nx">onCanPlayThrough</span><span class="err">、</span><span class="nx">onDurationChange</span><span class="err">、</span><span class="nx">onEmptied</span><span class="err">、</span><span class="nx">onEncrypted</span><span class="err">、</span><span class="nx">onEnded</span><span class="err">、</span><span class="nx">onError</span>
</span><span class='line'><span class="nx">onLoadedData</span><span class="err">、</span><span class="nx">onLoadedMetadata</span><span class="err">、</span><span class="nx">onLoadStart</span><span class="err">、</span><span class="nx">onPause</span><span class="err">、</span><span class="nx">onPlay</span><span class="err">、</span><span class="nx">onPlaying</span>
</span><span class='line'><span class="nx">onProgress</span><span class="err">、</span><span class="nx">onRateChange</span><span class="err">、</span><span class="nx">onSeeked</span><span class="err">、</span><span class="nx">onSeeking</span><span class="err">、</span><span class="nx">onStalled</span><span class="err">、</span><span class="nx">onSuspend</span><span class="err">、</span><span class="nx">onTimeUpdate</span><span class="err">、</span><span class="nx">onVolumeChange</span><span class="err">、</span><span class="nx">onWaiting</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>shallowCompare</code>のAddonがES6 ClassesのComponentで<code>PureRenderMixn</code>を使うためのマイグレーションのパスとして用意されました。</p></li>
<li><p><code>CSSTransitionGroup</code>が<code>xxx-enter-active</code>のようにclassNameに追加する名前を任意に指定出来るようになりました。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">ReactCSSTransitionGroup</span>
</span><span class='line'>   <span class="nx">transitionName</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>     <span class="nx">enter</span><span class="o">:</span> <span class="s1">&#39;enter&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">enterActive</span><span class="o">:</span> <span class="s1">&#39;enterActive&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">leave</span><span class="o">:</span> <span class="s1">&#39;leave&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">leaveActive</span><span class="o">:</span> <span class="s1">&#39;leaveActive&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">appear</span><span class="o">:</span> <span class="s1">&#39;appear&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">appearActive</span><span class="o">:</span> <span class="s1">&#39;appearActive&#39;</span>
</span><span class='line'>   <span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="p">{</span><span class="nx">item</span><span class="p">}</span>
</span><span class='line'> <span class="o">&lt;</span><span class="err">/ReactCSSTransitionGroup&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="o">&lt;</span><span class="nx">ReactCSSTransitionGroup</span>
</span><span class='line'>   <span class="nx">transitionName</span><span class="o">=</span><span class="p">{</span>
</span><span class='line'>     <span class="nx">enter</span><span class="o">:</span> <span class="s1">&#39;enter&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">leave</span><span class="o">:</span> <span class="s1">&#39;leave&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="nx">appear</span><span class="o">:</span> <span class="s1">&#39;appear&#39;</span>
</span><span class='line'>   <span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="p">{</span><span class="nx">item2</span><span class="p">}</span>
</span><span class='line'> <span class="o">&lt;</span><span class="err">/ReactCSSTransitionGroup&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Helpful warnings</h2>

<ul>
<li><p>ReactDOMがHTML構造と不正な要素を受け取った時点でwarningを出力するようになり、更新時に突然エラーとして表面化するよりわかりやすくなりました。</p></li>
<li><p><code>document.body</code>に対して<code>ReactDOM.render</code>使用するとwarningを出力するようになりました。</p></li>
<li><p>複数の異なるReactのオブジェクトを同時に利用しようとした場合に、warningを出力するようになりました。これはnpmとbrowserifyなどを組み合わせている場合に意図せずに起こってしまうことがあります。</p></li>
</ul>


<h2>Bug fixes</h2>

<ul>
<li><p>Mobile Browsersにおいてのクリックイベントのハンドリング(cursor: pointer周り？)にあったバグが修正されました。(特にMobile Safari)</p></li>
<li><p>SVG Elementが多くの場合で正しい名前空間と一緒に描画されるようになりました。</p></li>
<li><p>ReactDOMで複数のchildrenを持ったoptionの場合(<code>&lt;select&gt;&lt;option value={val}&gt;{label}:{val}&lt;/option&gt;&lt;/select&gt;</code>)にエラーとなっていたバグが修正されました。</p></li>
<li><p>サーバーサイドレンダリング時にselectタグのvalueがoptionタグのselectedとして反映されるようになりました。</p></li>
<li><p>同じdocumentに対して複数のReactのオブジェクトで要素を追加した状態になった時、イベントハンドリングのタイミングで発生していたエラーがなるべく起きないようになりました。但し、radio buttonを同じnameでrenderしていた場合などエラーになる状況は残っています。</p></li>
<li><p>小文字でないHTMLタグ名をReactDOMで使った場合でも問題にならないようになりました。ただしDOM Componentの場合には小文字で指定することを変わらずに推奨します。</p></li>
<li><p>ReactDOMが<code>animationIterationCount</code>、<code>boxOrdinalGroup</code>、<code>flexOrder</code>、<code>tabSize</code>、<code>stopOpacity</code>のCSSプロパティに対して&#8217;px&#8217;を追加しないようになりました。</p></li>
<li><p><code>react-addons-test-utils</code>で<code>Simulate.mouseEnter</code>と<code>Simulate.mouseLeave</code>が利用可能になりました。</p></li>
<li><p><code>react-addons-transition-group</code>で複数のnodeが同時に削除された場合にも正しく処理出来るようになりました。</p></li>
</ul>


<h2>ReactElement tags by Symbol</h2>

<p><a href="https://github.com/facebook/react/pull/4832">https://github.com/facebook/react/pull/4832</a></p>

<p>Reactではv0.14から<code>React.createElement</code>でReactElementのインスタンスではなくてただのオブジェクトが返ってくるようになっていたり、上の方で紹介したBabelによるinlineElementsの最適化によってcreateElementの呼び出しがただのオブジェクトに変換されることからも分かる通り、オブジェクトをそのままVIRTUAL DOMとして扱いDOMを生成することが出来ます。
そのためユーザーによって作成されるオブジェクトをそのままrenderに渡していると意図しないコンテンツを表示されたりXSSのリスクがあります。
(ユーザーが任意のオブジェクトをそのままReactElementとして描画出来ること自体が問題ではありますが)</p>

<ul>
<li><a href="https://github.com/facebook/react/issues/3473">How Much XSS Vulnerability Protection is React Responsible For? #3473</a></li>
</ul>


<p>そのため、信頼されたReactElementかどうかを判別するための方法が議論されていました。セキュリティに興味のある人はこの辺りのissueを見てみると面白いと思います。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/3583">[RFC] Trusted sources for React elements. #3583</a></li>
</ul>


<p>Reactでは最初はinstanceofでReactElementかどうかのチェックが行われていたのですが、それだと常にReactElementのインスタンスである必要がありオブジェクト化による最適化や複数のReactを使っていた場合にチェックが失敗するなど制限が多くなってしまいます。そのため、<code>_isReactElement</code>というがtrueかどうかをみるように変わりましたがこれでは信頼されたオブジェクトであるかを判定することは出来ません。</p>

<p>ユーザーが<code>_isReactElement</code>をオブジェクトに指定することでReactElementとして評価され、さらにReactには<code>dangerouslySetInnerHTML</code>というPropでHTMLをそのまま渡すことが出来るので&hellip;。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span><span class="s2">&quot;div&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">_isReactElement</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">props</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">dangerouslySetInnerHTML</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">__html</span><span class="o">:</span> <span class="s2">&quot;&lt;img onload=&#39;alert(123)&#39; src=&#39;/favicon.ico&#39; /&gt;&quot;</span><span class="p">.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>v0.14ではSymbolを使って信頼されたReactElementかどうかを判定するようになります。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/4832">Use a Symbol to tag every ReactElement #4832</a></li>
</ul>


<h3>How it works?</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">TYPE_SYMBOL</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">Symbol</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">Symbol</span><span class="p">.</span><span class="k">for</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="nx">Symbol</span><span class="p">.</span><span class="k">for</span><span class="p">(</span><span class="s1">&#39;react.element&#39;</span><span class="p">))</span> <span class="o">||</span> <span class="mh">0xeac7</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://github.com/facebook/react/blob/d54fa9e563d968112f5461274dc4e9d2aa6ed35c/src/isomorphic/classic/element/ReactElement.js#L20-L22">https://github.com/facebook/react/blob/d54fa9e563d968112f5461274dc4e9d2aa6ed35c/src/isomorphic/classic/element/ReactElement.js#L20-L22</a></li>
</ul>


<p>上記のようにSymbolを保持していおいて、それを<code>React.createElement</code>で作成したObjectにも<code>$$typeof</code>というpropertyとして渡しておいて、ReactElementが有効であるかを返す<code>isValidElement</code>という関数の中の比較で利用しています。</p>

<p><code>Symbol.for</code>は指定されたSymbolがあればそれを返しなければ作成して返すので、グローバルなSymbolとして扱うことが出来ます。これによってただのオブジェクトも複数のReactを使っていた場合もサポートすることが出来ます。
(複数のReactがある場合は既に書いた通り別途warningが出ます)</p>

<p>Symbolが実装されていないような環境だと固定の値(0xeac7)になるので、この機能を有効にしたい場合はSymbolのpolyfillを入れておく必要があります。</p>

<p><a href="https://kangax.github.io/compat-table/es6/#Symbol">https://kangax.github.io/compat-table/es6/#Symbol</a></p>

<p>また、BabelのinlineElementsの最適化を使った場合にどうなるんだと思った人もいると思いますがすでに対応されて5.8.24としてリリースにされています。</p>

<p><a href="https://github.com/babel/babel/pull/2352">https://github.com/babel/babel/pull/2352</a></p>

<h2>v0.15?</h2>

<p>v0.15はGarbage collection releaseと位置づけられていて、つまりAPIの整理などに重点が置かれたリリースになる予定でv0.14のリリースから遠くないタイミングで出るそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js meetup #2を開催しました]]></title>
    <link href="http://blog.koba04.com/post/2015/09/09/reactjs-meetup2/"/>
    <updated>2015-09-09T22:53:58+09:00</updated>
    <id>http://blog.koba04.com/post/2015/09/09/reactjs-meetup2</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://reactjs-meetup.connpass.com/event/19504/">http://reactjs-meetup.connpass.com/event/19504/</a></li>
<li><a href="http://eventdots.jp/eventreport/568979">http://eventdots.jp/eventreport/568979</a></li>
</ul>


<p>4月に#1をやってから約4ヶ月くらい経ちましたがReact.js meetup #2を開催しました。</p>

<p>雨の中来てくださった方、発表者の方、運営のお手伝いをしてくださった方ありがとうございました！</p>

<!-- more -->


<h2>開催の経緯</h2>

<p>最初は今回発表してくださったViktorさんが来日されるのでそれにあわせてイベントをやるという話があり、せっかくなのでということでReact.js meetupの2回目としてやることになりました。</p>

<h2>dots</h2>

<p>開催予定日まで時間もなくてその時点で話す人も決まっていたので後は会場を決めればなんとかなりそうということで、いくつかの選択肢の中から今回はdotsさんで開催することになりました。
渋谷の駅から近くて、人数も200人近く入れるし会場もオシャレな感じだったのでここだ！という感じで決めました。</p>

<blockquote class="twitter-tweet" lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/reactjs_meetup?src=hash">#reactjs_meetup</a> #2 at dots!! (@ dots. in 渋谷区, 東京都) <a href="https://t.co/os56mGdfFu">https://t.co/os56mGdfFu</a> <a href="http://t.co/2BhpBeIK9H">pic.twitter.com/2BhpBeIK9H</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/641186091891073024">September 8, 2015</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>募集開始の際にはご迷惑をお掛けしましたが&hellip;dotsさん、ありがとうございました！</p>

<h2>準備など</h2>

<p>今回は <a href="https://twitter.com/yoshiko_pg">@yoshiko_pg</a> さんから話をもらって、その後の色々な準備もほとんどやってもらって本当に感謝でした。ありがとうございます！
当日の準備や受付は <a href="http://goodpatch.com/jp">Goodpatch</a> の方々がやってくださり、お菓子も提供して頂いて本当にありがたかったです。仲良さそうな感じが印象的でした。ありがとうございます！</p>

<h2>Talk</h2>

<p>各Talkのスライドはここにあるので見てください。</p>

<p><a href="http://reactjs-meetup.connpass.com/event/19504/">http://reactjs-meetup.connpass.com/event/19504/</a></p>

<p>自分のTalkはReactの次のバージョンである0.14での変更点について話しました。予想としてはRC版が出てるはずだったのですが&hellip;。
Stateless Componentsが加わったりはしていますが、基本的には無駄な機能は削ぎ落としたりメンテナンス性を維持していくための変更が多い印象で正しい方向に向かっている印象を持っています。</p>

<p>全体を通してReduxのような最近注目されているようなTopicから、Flowtypeのような型付けやDDDなどReact.jsやFluxを使って実際に大規模なアプリを作っていく中で求められるようなTopicについての話まであって面白かったです。</p>

<p>FlowtypeがもっとFacebook以外でも使いやすくコントリビュートしやすくなっていくといいなーと思いながら、それには壁がいくつもありそうだなとViktorさんと話して感じたり。</p>

<p>後、LTを一句で締めるのとてもよかったです。</p>

<h2>当日の様子</h2>

<p><a href="http://togetter.com/li/871189">http://togetter.com/li/871189</a></p>

<p>感想とか書いてもらえると嬉しいです！</p>

<h2>次回？</h2>

<p>まったく何も考えていないので、聞きたいテーマなどあれば教えてもらえると嬉しいです！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia Tokyo 2015で「今フロントエンドで何が起こっているのか」という話をしました]]></title>
    <link href="http://blog.koba04.com/post/2015/08/22/yapc-asia-2015-whats-happening-in-frontend-now/"/>
    <updated>2015-08-22T11:15:43+09:00</updated>
    <id>http://blog.koba04.com/post/2015/08/22/yapc-asia-2015-whats-happening-in-frontend-now</id>
    <content type="html"><![CDATA[<p>YAPC::Asia Tokyo 2015で「今フロントエンドで何が起こっているのか」という話をしました。</p>

<p><a href="http://yapcasia.org/2015/talk/show/94051590-fb11-11e4-a39d-8ab37d574c3a">http://yapcasia.org/2015/talk/show/94051590-fb11-11e4-a39d-8ab37d574c3a</a></p>

<!-- more -->


<p>満員になるほどたくさんの方に来て頂いてありがとうございました！</p>

<p>よくフロントエンドの話について聞かれると「Grunt or gulp」、「browserify or webpack」、「Angular or React」のような内容が多いので、新しいライブラリや仕様がそれぞれがどういった流れで登場し何を解決しようとしているのかを流れをもって紹介するような構成にしました。</p>

<p>jQuery以降というかなり広い範囲を対象にしたので、それを50minに収めるのために削ったトピックもかなりありますが&hellip;。</p>

<p>それでもASTなど普段ライブラリを使っているだけだとなかなか見えないけど重要な要素については残しました。</p>

<p>とりあげたトピックはこんな感じです。</p>

<ul>
<li>ES5</li>
<li>CoffeeScript</li>
<li>jQuery</li>
<li>Backbone</li>
<li>Node.js</li>
<li>Grunt</li>
<li>SinglePageApplication</li>
<li>TypeScript</li>
<li>AST</li>
<li>Isomorphic</li>
<li>Angular</li>
<li>gulp</li>
<li>browserify</li>
<li>ES2015</li>
<li>Babel・TC39</li>
<li>Service Workers</li>
<li>Extensible Web</li>
<li>React, Flux</li>
<li>FRP</li>
<li>Redux</li>
<li>Unix philosophy</li>
</ul>


<p>駆け足になったのでわかりにくい部分もあったと思いますが、少しでもその辺りが伝われば嬉しいです。</p>

<p><a href="https://speakerdeck.com/koba04/whats-happening-in-frontend-now">https://speakerdeck.com/koba04/whats-happening-in-frontend-now</a></p>

<script async class="speakerdeck-embed" data-id="4d78b0afe4fa4e078544e80db2eb8bd1" data-ratio="1.33333333333333" src="http://blog.koba04.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia Tokyo 2015で「What's happening in frontend now?」という話をします]]></title>
    <link href="http://blog.koba04.com/post/2015/08/20/talk-at-yapc-asia2015/"/>
    <updated>2015-08-20T20:00:49+09:00</updated>
    <id>http://blog.koba04.com/post/2015/08/20/talk-at-yapc-asia2015</id>
    <content type="html"><![CDATA[<p><a href="http://yapcasia.org/2015/talk/show/94051590-fb11-11e4-a39d-8ab37d574c3a">http://yapcasia.org/2015/talk/show/94051590-fb11-11e4-a39d-8ab37d574c3a</a></p>

<p>無事にTalkを採択していただけたので、<strong>2015-08-21 13:10からトラックB (701-702）</strong> にて「What&rsquo;s happening in frontend now?」という話をします。</p>

<!-- more -->


<p>主にJavaScriptの話を中心に、Ajaxが登場した2005年くらいからどのようにフロントエンドを取り巻く技術が変わってきたのかを話したいと思います。
実際に書いてみると膨大な感じになってしまい50分で収まるように泣く泣く削ったトピックもかなりありますが、
jQueryからReactまでそのライブラリをどのように使うのかではなくどのような流れで登場し何を解決しようとしているのかを中心に話したいと思います。</p>

<p>フロントエンドを普段からバリバリ書いている人ではなく、たまにフロントエンドを触ろうと思っても次から次へと色々なライブラリや技術が登場してきてよくわからないという人に対して、今何が起きているのかを伝えることが出来ればと思っています。</p>

<p><img src="http://blog.koba04.com/images/yapc2015-slide.png" title="'YAPC Asia 2015 slide'" ></p>

<p>是非来てください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js meetup #1 を開催しました]]></title>
    <link href="http://blog.koba04.com/post/2015/04/25/reactjs-meetup1/"/>
    <updated>2015-04-25T17:11:35+09:00</updated>
    <id>http://blog.koba04.com/post/2015/04/25/reactjs-meetup1</id>
    <content type="html"><![CDATA[<p><a href="http://reactjs-meetup.connpass.com/event/11232/">http://reactjs-meetup.connpass.com/event/11232/</a></p>

<p>一人Advent Calendar書いた時にやりたいと言っていたのでReact.js meetup #1 を<a href="http://twitter.com/yosuke_furukawa">@yosuke_furukawa</a>さんと開催しました。</p>

<p> DeNAさんが会場から懇親会のお酒や寿司、当日の運営まで全てやってくださったので自分はほとんど何もしてないですが..。
 本当にありがとうございました！！</p>

<p>やりたいって言ってこの規模の勉強会を開催させてもらえるの本当にスゴいなぁと思います&hellip;。</p>

<p> <blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/hashtag/reactjs_meetup?src=hash">#reactjs_meetup</a> <a href="https://twitter.com/hashtag/react_sushi?src=hash">#react_sushi</a> です <a href="http://t.co/GdpyF7Paqk">pic.twitter.com/GdpyF7Paqk</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/591580062702383107">April 24, 2015</a></blockquote></p>

<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>




<!-- more -->


<p>ある程度予想はしていたのですが、Talkが10分と短かったりで押して慌ただしい感じになってしまったのは申し訳なかったなぁと思ってます。
ただ、色んなテーマのTalkを一度に聞くことが出来たのはよかったかなと思っています。</p>

<h2>Talks</h2>

<p>各Talkの資料についてはconpassのページに追加しておいたのでそちらを見て頂くとして簡単な一言感想です。</p>

<p><a href="http://reactjs-meetup.connpass.com/event/11232/presentation/">http://reactjs-meetup.connpass.com/event/11232/presentation/</a></p>

<h3><a href="https://twitter.com/naoya_ito">@naoya_ito</a> &ndash; React概論</h3>

<p>Reactの特徴をわかりやすく説明していてReact.js触ってない人にとってもわかりやすい説明だったんじゃないかなと思います。</p>

<h3><a href="https://twitter.com/hokaccha">@hokaccha</a> &ndash; react-rails</h3>

<p>Railsと一緒に使いたい人にとってはかなり有益な情報だったんじゃないかなと思います。Turbolinksどうするのとか。</p>

<h3><a href="https://twitter.com/azu_re">@azu_re</a> &ndash; 10分で実装するFlux</h3>

<p>Fluxを最小限の構成にしてデータの流れを一方向にするということがどういうことなのか説明していてわかりやすかったです。console.traceを使っての説明もなるほどなぁと思いました。</p>

<h3><a href="http://twitter.com/yosuke_furukawa">@yosuke_furukawa</a> &ndash; mercury/mithril.js</h3>

<p>React.jsのVIRTUAL DOMのdiffアルゴリズムの説明からmercuryやmithril.jsといった他のライブラリがどうやってReact.jsより高速化しているのかという説明で面白かったです。</p>

<h3><a href="https://twitter.com/mizchi">@mizchi</a> &ndash; React/FluxでSPAを開発してぶちあたった問題</h3>

<p>KobitoをReact.js + Fluxで作った時の問題になった点と解決方法について説明していて、ないものは作る姿勢がスゴイなぁ思いました。</p>

<h3><a href="https://twitter.com/sugyan">@sugyan</a> &ndash; React.jsと、 Railsとかアイドルとか (LT)</h3>

<p>React.jsとRailsでReactRouter使ったり色々組み合わてみた話でツラいと言いながらちゃんと作ってしまうところがスゴイなぁと思いました。</p>

<h3><a href="https://twitter.com/making">@making</a> &ndash; Java + React.jsでSever Side Rendering (LT)</h3>

<p>SPAで作ったブログが検索に引っかからないからReact.js + Javaでserver-side renderingするようにしたという話で、最後のオチも含めて面白かったです。</p>

<h3><a href="https://twitter.com/tyshgc">@tyshgc</a> &ndash; Rapid React Prototyping : React.jsでUIデザインプロトタイプを作る (LT)</h3>

<p>React.jsでプロトタイプを作る話で、Photoshopのレイヤー情報からReact.jsのComponentを生成するようにしていてスゴかったです。</p>

<h3><a href="https://twitter.com/teppeis">@teppeis</a> &ndash; Flowtype (LT)</h3>

<p>懇親会の時にFlowtypeについてのLTをしてくれて、デモもあったりFacebookが開発中のElectron(旧:AtomShell)ベースのNuclideの話まであって面白かったです。</p>

<h2>LiveCodingやった</h2>

<p>ぼっちでも懇親会に参加して欲しかったので、ぼーっと見ていたり会話のネタになるかなと思ってLiveCodeingをやってみました。</p>

<p>最近だとJSの環境を作るにも何を使えばいいのかわからないという声も聞くので、0から簡単なアプリを作るところまでの流れを伝えられればと思い、HackerNewsのAPIを使ってTopStoryの一覧を表示するものを作ってみました。</p>

<p>あと、3分間クッキングみたいに事前に色々用意しておくのもライブ感がないなぁと思ったので<code>mkdir</code>から全部その場で作ることにしました。</p>

<p><a href="https://github.com/koba04/react-hacker-news-stories/tree/meetup">https://github.com/koba04/react-hacker-news-stories/tree/meetup</a></p>

<p>環境構築は、browserifyとwatchifyとbabelifyで変換を行ってlivereloadするためのbrowser-syncを使いました。</p>

<p>LiveCodingの流れとしては</p>

<ul>
<li>ディレクトリ作ったり<code>npm init</code>したり<code>npm install</code>したりして環境を作る</li>
<li>Hello Worldしてみる(Hellって書いたけど&hellip;)</li>
<li>各Componentを作成する</li>
<li>HackerNewsのAPI叩いて一覧が出るようにする</li>
<li><code>React.addons.Perf</code>を使ってDOMが無駄に更新されていることとkeyが指定されていないwarningが出ていることを確認</li>
<li>keyを指定することで無駄のDOM操作がなくなることを確認</li>
<li>diffの時間を減らすために<code>Immutable.js</code>を使いつつ<code>shouldComponentUpdate</code>を実装</li>
</ul>


<p>という感じで行いました。</p>

<p>ライブコーディングが初めてで緊張していたのとお酒が入っていたのもあって(言い訳)、いつもと同じ感覚でコーディング出来なくてtypoしまくってしまい、「これ終わらないかも&hellip;」とかなり駆け足になってしまったのは反省です&hellip;。
(事前に練習はしたんですが&hellip;)</p>

<p>でも、とりあえず最後まで出来てよかった&hellip;。</p>

<h2>まとめ</h2>

<p>イベントの管理者側でやるのは初めてだったので色々至らない点があったかもしれませんが、準備してくださったDeNAの方々、発表者の方々、参加者の皆様、本当にありがとうございました！！</p>

<p>感想とかブログに書いてもらえると嬉しいです！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up minimum single page application]]></title>
    <link href="http://blog.koba04.com/post/2015/03/19/setting-up-minimum-single-page-application/"/>
    <updated>2015-03-19T18:54:49+09:00</updated>
    <id>http://blog.koba04.com/post/2015/03/19/setting-up-minimum-single-page-application</id>
    <content type="html"><![CDATA[<p>React.jsなどを試そうとするときに、browserify? gulp? grunt? webpack? どれ使えばいいのとか、テストは何を使えばいいのかとかよくわからないというのをたまに聞くので、最低限の設定だけどES6で書けたりautobuildやlivereloadが出来る構成のサンプルを作ってみました。</p>

<p>あと、テストはkarma + mocha + power-assertでchromeでテスト出来るようにしています。</p>

<!-- more -->


<p>本当はpackage.jsonだけにしたかったのですがkarmaの設定だけは別ファイルになってます&hellip;。
テストが必要ない場合は、package.jsonの指定だけで大丈夫です。</p>

<ul>
<li><a href="https://github.com/koba04/minimum-spa-boilerplate">https://github.com/koba04/minimum-spa-boilerplate</a></li>
</ul>


<p>git cloneして<code>npm install</code>して<code>npm start</code>すればいいだけの設定になっています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:koba04/minimum-spa-boilerplate.git
</span><span class='line'>npm install
</span><span class='line'>npm start</span></code></pre></td></tr></table></div></figure>


<p><img src="http://i.gyazo.com/f906464bfb325437c5c905f80a5b976d.gif" alt="gif" /></p>

<h2>概要</h2>

<h3>tree</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  tree -L 1
</span><span class='line'>.
</span><span class='line'>├── README.md
</span><span class='line'>├── index.js         // エントリーポイント
</span><span class='line'>├── karma.conf.js    // karmaの設定
</span><span class='line'>├── lib              // ソース
</span><span class='line'>├── node_modules
</span><span class='line'>├── package.json     // 設定はこの中
</span><span class='line'>├── public           // document root
</span><span class='line'>└── test             // テスト</span></code></pre></td></tr></table></div></figure>


<h3>package.json</h3>

<p>基本的には<code>npm init</code>で作ったものに色々インストールしてnpm scriptの設定をしているだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;build&quot;</span><span class="p">:</span> <span class="s2">&quot;NODE_ENV=production browserify index.js -t babelify | uglifyjs &gt; public/bundle.js&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;watch&quot;</span><span class="p">:</span> <span class="s2">&quot;watchify -d index.js -t babelify -o public/bundle.js -v&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;server&quot;</span><span class="p">:</span> <span class="s2">&quot;browser-sync start --server public --files public/**/*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;karma start&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;start&quot;</span><span class="p">:</span> <span class="s2">&quot;npm run watch &amp; npm run server &amp; npm test&quot;</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;react&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.13.1&quot;</span>
</span><span class='line'>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;babelify&quot;</span><span class="p">:</span> <span class="s2">&quot;^5.0.4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;browser-sync&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.3.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;browserify&quot;</span><span class="p">:</span> <span class="s2">&quot;^9.0.3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;espowerify&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.10.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;karma&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.12.31&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;karma-browserify&quot;</span><span class="p">:</span> <span class="s2">&quot;^4.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;karma-chrome-launcher&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.1.7&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;karma-cli&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;karma-mocha&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.1.10&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;mocha&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.2.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;power-assert&quot;</span><span class="p">:</span> <span class="s2">&quot;^0.10.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;uglify-js&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.4.17&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;watchify&quot;</span><span class="p">:</span> <span class="s2">&quot;^2.4.0&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/koba04/minimum-spa-boilerplate/blob/master/package.json">https://github.com/koba04/minimum-spa-boilerplate/blob/master/package.json</a></p>

<ul>
<li><code>npm run build</code></li>
</ul>


<p>これはReactに依存したビルドになっているのですが、production用にビルドされたファイルを生成することを想定しています。</p>

<ul>
<li><code>npm run watch</code></li>
</ul>


<p>watchifyによってファイルが変更されたら自動的にbrowserifyのビルドが走るようになっています。
watchifyはキャッシュするので二回目以降のビルドが高速化されるのもポイントです。</p>

<ul>
<li><code>npm run server</code></li>
</ul>


<p>BrowserSyncによって<code>public</code>をrootにしたserverを立ちあげつつ、<code>public</code>以下のファイルを監視してlivereloadするようになっています。</p>

<ul>
<li><code>npm test</code></li>
</ul>


<p>テストはkarmaを使うので<code>karma start</code>しているだけです。<code>karma</code>の設定は<code>karma.conf.js</code>にあります。</p>

<ul>
<li><code>npm start</code></li>
</ul>


<p>上記のweatchとbrowserとtestをまとめて実行するコマンドで、これだけ実行すれば開発を始められるようになっています。</p>

<h3>karma</h3>

<p>karmaは<code>karma init</code>で対話的に作成出来る<code>karma.conf.js</code>にbrowserifyの設定を追加したくらいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// frameworks to use</span>
</span><span class='line'><span class="c1">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span>
</span><span class='line'><span class="nx">frameworks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;mocha&#39;</span><span class="p">,</span> <span class="s1">&#39;browserify&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// list of files / patterns to load in the browser</span>
</span><span class='line'><span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="s1">&#39;test/**/*.js&#39;</span>
</span><span class='line'><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// list of files to exclude</span>
</span><span class='line'><span class="nx">exclude</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// preprocess matching files before serving them to the browser</span>
</span><span class='line'><span class="c1">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span>
</span><span class='line'><span class="nx">preprocessors</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;test/**/*.js&#39;</span><span class="o">:</span> <span class="s1">&#39;browserify&#39;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>
</span><span class='line'><span class="nx">browserify</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">transform</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;babelify&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;espowerify&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>karmaについては以前にも書いたのでそちらも。</p>

<ul>
<li><a href="http://blog.koba04.com/post/2014/06/23/karma-for-javascript-test-runner/">http://blog.koba04.com/post/2014/06/23/karma-for-javascript-test-runner/</a></li>
</ul>


<p>今回はカジュアルさを優先したので設定していませんが、travis-ciを使いたい場合は、<code>karma-phantomjs-launcher</code>を入れて<code>npm test</code>でPhantomJSで実行出来るようにすればOKだと思います。</p>

<h3>Code</h3>

<p>コードはこんな感じで書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/koba04/minimum-spa-boilerplate/blob/master/lib/components/app.js">https://github.com/koba04/minimum-spa-boilerplate/blob/master/lib/components/app.js</a></p>

<h3>Test</h3>

<p>テストはこんな感じ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">assert</span> <span class="nx">from</span> <span class="s1">&#39;power-assert&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react/addons&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;../../lib/components/app&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span><span class="nx">TestUtils</span><span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;App&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">component</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">component</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">renderIntoDocument</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;returns Hello World in div&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nx">TestUtils</span><span class="p">.</span><span class="nx">findRenderedDOMComponentWithTag</span><span class="p">(</span><span class="nx">component</span><span class="p">,</span> <span class="s1">&#39;div&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">assert</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">React</span><span class="p">.</span><span class="nx">findDOMNode</span><span class="p">(</span><span class="nx">div</span><span class="p">).</span><span class="nx">textContent</span>
</span><span class='line'>      <span class="o">===</span>
</span><span class='line'>      <span class="s1">&#39;Hello World&#39;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おまけ</h2>

<h3>karma-browserify + power-assert + babel</h3>

<p>npm scriptでbrowserifyとwatchifyの引数に<code>babelify</code>を指定していますが、本当は↓のようにbrowserifyのtransformフィールドにだけ指定してkarmaには<code>espowerify</code>だけを指定したいところなのですが、<code>karma-browserify</code>に指定するtransformはbrowserifyにoptionとしてそのまま渡されるのではなくて事前にtransformするので、<code>espowerify</code>が<code>babelify</code>される前のコードを対象としてしまいエラーになります&hellip;。</p>

<p>なのでここでは、それぞれに個別に設定する形になっています&hellip;。
レアケースですがなんとかしたいなぁと思いつつ&hellip;。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;browserify&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;transform&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="s2">&quot;babelify&quot;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>そこそこカジュアルな感じになっているかなぁと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js v0.13 changes]]></title>
    <link href="http://blog.koba04.com/post/2015/03/05/react-js-v013-changes/"/>
    <updated>2015-03-05T09:23:28+09:00</updated>
    <id>http://blog.koba04.com/post/2015/03/05/react-js-v013-changes</id>
    <content type="html"><![CDATA[<p>React.js v0.13のRC2がリリースされたのでまとめてみます。</p>

<ul>
<li><a href="http://facebook.github.io/react/blog/2015/02/24/react-v0.13-rc1.html">http://facebook.github.io/react/blog/2015/02/24/react-v0.13-rc1.html</a></li>
<li><a href="http://facebook.github.io/react/blog/2015/03/03/react-v0.13-rc2.html">http://facebook.github.io/react/blog/2015/03/03/react-v0.13-rc2.html</a></li>
<li><a href="http://facebook.github.io/react/blog/2015/02/24/streamlining-react-elements.html">http://facebook.github.io/react/blog/2015/02/24/streamlining-react-elements.html</a></li>
</ul>


<p>今回のバージョンで何か大きく変更があるというよりもv0.14でやりたいことに向けての布石が多いように感じます。</p>

<p>試すときはこの辺りから。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install react@0.13.0-rc2 
</span><span class='line'>npm install react-tools@0.13.0-rc2 </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://fb.me/react-0.13.0-rc2.js
</span><span class='line'>http://fb.me/react-0.13.0-rc2.min.js
</span><span class='line'>http://fb.me/react-with-addons-0.13.0-rc2.js
</span><span class='line'>http://fb.me/react-with-addons-0.13.0-rc2.min.js
</span><span class='line'>http://fb.me/JSXTransformer-0.13.0-rc2.js</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>Propを変更するとwarninngが出ます (Breaking Change)</h2>

<p>development環境でPropをelement作成後に変更することはdeprecatedになってwarningが出るようになりました。
つまりimmutableなものとして扱う必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">Foo</span> <span class="nx">bar</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">shouldUseFoo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">element</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">element</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>これまでの問題点</h3>

<ul>
<li>Propを直接変更してしまうと元の値を破棄してしまうのでdiffがなくなってしまいます。この場合、<code>shouldComponentUpdate</code>を実装している場合に比較時に差分を検出出来なくてDOM構造に差分があるはずなのに実際には反映されない可能性がありました。</li>
<li>またPropが変更されることがあるためcreateElementの時点でPropTypesのValidationも出来ず、それによってエラー時のstacktraceが深くなったりFlowによる静的解析にとっても都合がよくなかったりという面もありました。</li>
</ul>


<h4>それに対しての提案</h4>

<ul>
<li>動的にしたい場合は↓のような形で書くことでも可能です。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">shouldUseFoo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Foo</span> <span class="nx">foo</span><span class="o">=</span><span class="p">{</span><span class="mi">10</span><span class="p">}</span> <span class="nx">bar</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Foo</span> <span class="nx">bar</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">bar</span><span class="o">:</span> <span class="kc">false</span> <span class="p">};</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">shouldUseFoo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">props</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">props</span><span class="p">.</span><span class="nx">bar</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="o">&lt;</span><span class="nx">Foo</span> <span class="p">{...</span><span class="nx">props</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>現時点ではネストしたオブジェクトについては変更してもwarningは出ません。基本的にはimmutable.jsなどを使って完全にimmutableに扱った方がいいですが、mutableなオブジェクトは多くの場面で便利だし今回はネストしたオブジェクトはwarningの対象外となりました。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">return</span> <span class="o">&lt;</span><span class="nx">Foo</span> <span class="nx">nestedObject</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">myModel</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>PropTypesのwarningをReactElementの作成時に行うなうようになりました。Propを変更するために↓のようにcloneしてReactElementにPropに値を追加するのは正しい方法です。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">element1</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">Foo</span> <span class="o">/&gt;</span><span class="p">;</span> <span class="c1">// extra prop is optional</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">element2</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">cloneWithProps</span><span class="p">(</span><span class="nx">element1</span><span class="p">,</span> <span class="p">{</span> <span class="nx">extra</span><span class="o">:</span> <span class="s1">&#39;prop&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>statics内のメソッドに対してautobindingされなくなりました (Breaking Change)</h2>

<p><code>statics</code>に定義したメソッドをonClickなどにバインドした時にcomponentをバインドしなくなりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">statics</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">foo</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">bar</span><span class="p">();</span>  <span class="c1">// v0.13では呼べない</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">hello</span> <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">Hello</span><span class="p">.</span><span class="nx">foo</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">click</span><span class="o">&lt;</span><span class="err">/button&gt;&lt;/div&gt;;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>refを設定する処理の順番が変わりました (Breaking Change)</h2>

<p><code>ref</code>に指定されたcomponentの<code>componentDidMount</code>が呼ばれた後になります。
これは親componentのcallbackを<code>componentDidMount</code>の中で読んでいる場合だけ気にする必要があります。そもそれもこれはアンチパターンなので避けるべきですが&hellip;。</p>

<ul>
<li><code>componentDidMount</code>は子componentから順番に呼ばれるので下記の<code>refDiv</code>はChildの<code>componentDidMount</code>の時点では設定されていません。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Hello</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">refs</span><span class="p">.</span><span class="nx">refDiv</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Child</span> <span class="nx">foo</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">foo</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">ref</span><span class="o">=</span><span class="s2">&quot;refDiv&quot;</span><span class="o">&gt;</span><span class="nx">hello</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Child</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span> <span class="c1">// v0.13 &quot;undefined&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">child</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>this.setState()</code>が第1引数に関数を受け取れるようになりました</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">((</span><span class="nx">state</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span><span class="nx">count</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにすることで<code>this._pendingState</code>を使うことなくトランザクションが必要とされるstateの更新を行うことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">)</span> <span class="c1">// 0</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">count</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">count</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'><span class="c1">// state.count will render as 1</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">)</span> <span class="c1">// 0</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">});</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="o">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// state.count will render as 2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>setStateの呼び出しが常に非同期になります (Breaking Change)</h2>

<p>ライフサイクルメソッドの中での<code>setState</code>の呼び出しが常に非同期でバッチとして処理されます。以前は最初のマウント時の呼び出しは同期的に行われていました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">)</span> <span class="c1">// 0</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">count</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">count</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">})</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">)</span> <span class="c1">// v0.13 is 0 (v0.12 is 2)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>setStateとforceUpdateをunmountされたcomponentに対して呼んだ時に、エラーではなくwarningが出るようになりました (Breaking Change)</h2>

<p>非同期処理の結果を<code>setState</code>して反映させるときに、<code>isMounted</code>でブロックしなくてもよくなったのはいいですね。</p>

<h2>privateなプロパティが整理されました (Breaking Change)</h2>

<p><code>this._pendingState</code>や<code>this._rootNodeID</code>などのprivateなプロパティが削除されました。</p>

<h2>ES6 classesによるReactComponentの作成がサポートされました</h2>

<p>これについては↓に書きましたが、ES6 classesによって作成されたcomponentには<code>createClass</code>にはある<code>getDOMNode</code>、<code>setProps</code>、<code>replaceState</code>が含まれていなかったりmixinが指定出来ないなど注意点がいくつかあります。</p>

<ul>
<li><a href="http://blog.koba04.com/post/2015/01/28/published-react-v0.13.0-beta1/">http://blog.koba04.com/post/2015/01/28/published-react-v0.13.0-beta1/</a></li>
</ul>


<h2><code>React.findDOMNode(component)</code>のAPIが追加されました</h2>

<p>これは既存の<code>component.getDOMNode()</code>を置き換えるAPIです。
<code>getDOMNode()</code>はES6 classesによって作成されたcomponentでは提供されていません。</p>

<h2><code>ref</code>がcallbackスタイルで指定できるようになりました。</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">Photo</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{(</span><span class="nx">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_photo</span> <span class="o">=</span> <span class="nx">c</span><span class="p">}</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>この変更はこの後で書く<code>owner</code>の扱いの変更に関係しています。</p>

<h2>childrenにiteratorやimmutable-jsのsequenceを指定出来るようになりました</h2>

<p>immutable-jsを使っている人にとってはいいですね。</p>

<h2><code>ComponentClass.type</code>はdeprecatedになりました</h2>

<p>代わりに<code>ComponentClass</code>をそのまま使ってください。</p>

<h2>ownerベースのcontextを使っていてparentベースのcontextと一致しない場合にwarningが出るようになります</h2>

<p>そもそもowner? parent?という感じかと思うので簡単に説明します。</p>

<h3>owner and parent</h3>

<p>Reactは&#8221;parent&#8221;と&#8221;owner&#8221;を持っています。&#8221;owner&#8221;はReactElementを作ったcomponentです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Foo</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;&lt;</span><span class="nx">span</span> <span class="o">/&gt;&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合、<code>span</code>のownerは<code>Foo</code>でparentは<code>div</code>になります。</p>

<h3>context</h3>

<p>これはdocument化されてないfeatureですが、&#8221;owner&#8221;から子や孫に渡すことが出来る&#8221;context&#8221;というものがあります。</p>

<p>簡単にコードを書くとこんな感じです。見てもらえればどんなfeatureなのかわかるかと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">childContextTypes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">age</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">getChildContext</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;parent&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">age</span><span class="o">:</span> <span class="mi">50</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Child</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">Child</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">contextTypes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">age</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Child&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">);</span> <span class="c1">// {name: &quot;parent&quot;, age: 50}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">GrandChild</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">GrandChild</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">contextTypes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">string</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">componentDidMount</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;GrandChild&quot;</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="p">);</span> <span class="c1">// {name: &quot;parent&quot;}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">hello</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">React</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">Parent</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>react-router</code>ではparentベースのcontextに依存していたので対応が大変そうでした。</p>

<h3>問題点</h3>

<ul>
<li>ownerは密かにReactElementに追加されているので気づかないうちに挙動が変わることが発生します。↓の場合はそれぞれのinputのownerが異なりますし、<code>React.addons.cloneWithProps</code>を使った場合もownerが変わります。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">bar</span> <span class="o">?</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;bar&quot;</span> <span class="o">/&gt;</span> <span class="o">:</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ownerは実行時のstackによって決定します。↓の場合、<code>span</code>のonwerは実際は<code>B</code>で<code>A</code>ではありません。これはcallbackが実行されたタイミングに依存するからです。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">A</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">B</span> <span class="nx">renderer</span><span class="o">=</span><span class="p">{</span><span class="nx">text</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">text</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/span&gt;} /</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">class</span> <span class="nx">B</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">renderer</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>また、JSXが書いているscope内にReactが必要なのは、Reactが現在のownerを保持していてJSXの変換がそれに依存しているからという意外なところに影響があったりもします。</li>
</ul>


<h3>それに対する提案</h3>

<ul>
<li>ownerベースのcontextの代わりにparentベースのcontextの導入を考えているのでそれを使うことです。ほとんどのケースはparentベースのcontextでも問題ないです。</li>
<li>ownerベースのcontextが必要になる場合はほとんどないはずだしコードを見直すべきです。</li>
</ul>


<h3>未解決</h3>

<ul>
<li><code>ref</code>はまだownerベースのままで、これについてはまだ完全に解決出来ていません。

<ul>
<li>v0.13ではcallbackでもrefが定義出来るようなりましたがこれまでの宣言的な定義方法も残されています。宣言的な定義方法に代わる何かいい方法がない限りこのAPIは廃止されません。</li>
</ul>
</li>
</ul>


<h2><code>{key: element}</code>(Keyed Object)の形式でchildに渡すとwarningが出るようになりました</h2>

<p>v0.12では<code>{key: element}</code>の形式でkeyが指定したらelementを渡すことが出来ましたが、これはあまり使われてないし問題となる場合があるので使うべきではないのでwarningが出るようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">span</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">span</span> <span class="o">/&gt;</span><span class="p">}</span> <span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>問題点</h3>

<ul>
<li>列挙される順番はkeyに数値を指定した場合を除いては仕様として定義されてないので実装次第になってしまいます。</li>
<li>一般的にobjectをmapとして扱うことは型システムやVMの最適化やコンパイラーにとって好ましくないし、さらにセキュリティ上のリスクもあって↓のような場合にもし<code>item.title === '__proto__'</code> を指定されたら&hellip;.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">children</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">items</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">children</span><span class="p">[</span><span class="nx">item</span><span class="p">.</span><span class="nx">title</span><span class="p">]</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">span</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>それに対する解決</h3>

<ul>
<li>ほとんどの場合、<code>key</code>を設定したReactElementの配列にすれば問題ないはずです。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">children</span> <span class="o">=</span> <span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">span</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>this.props.children</code>を使った場合など、<code>key</code>を指定することが出来ない場合もあるかもしれません。その場合はv0.13で追加された<code>React.addons.createFragment</code>を使うことでKeyed ObjectからReactElementを作成することが出来ます。

<ul>
<li>注意として、これはまだrenderの戻り値として直接渡せるものではないので<div>などでラップしてあげる必要があります。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">createFragment</span><span class="p">({</span> <span class="nx">a</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span> <span class="p">})}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>React.cloneElement</code>が追加されました</h2>

<p>これはこれまで<code>React.addons.cloneWithProps</code>と似たAPIです。
異なる点としては、<code>style</code>や<code>className</code>のmergeが行われなかったり<code>ref</code>が保持される点があります。
<code>cloneWithProps</code>を使ってchildrenを複製した時に<code>ref</code>が保持されなくて問題となるという報告が多くあったのでこのAPIでは<code>ref</code>を保持するようになりました。
<code>cloneElement</code>時に<code>ref</code>を指定すると上書きされます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">newChildren</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Children</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">cloneElement</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="kc">true</span> <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>このAPIはv0.13でPropがimmutableなものとして扱われるようになったことで、Propを変更するためにelementをcloneする機会が増えたため必要となりました。
<code>React.addons.cloneWithProps</code>はそのうちdeprecateになりますが今回のタイミングではなりません。</p>

<h2><code>React.addons.classSet</code>がdeprecatedになりました</h2>

<p>必要な場合は<a href="https://www.npmjs.com/package/classnames">classnames</a>などを使用してください。</p>

<h2>jsxコマンドで<code>--target</code>optionとしてECMAScript versionを指定出来るようになりました。 (Breaking Change)</h2>

<p><code>es5</code>がデフォルトです。
<code>es3</code>はこれまでの挙動ですが追加で予約語を安全に扱うようになりました(eg <code>this.static</code>は<code>this['static']</code>にIE8での互換性のために変換されます)。</p>

<h2>jsxコマンドでES6 syntaxで変換した際にclassメソッドがdefaultではenumerableではなくなりました</h2>

<p><code>Object.defineProperty</code>を使用しているため、IE8などをサポートしたい場合は<code>--target es3</code>optionを渡す必要があります。</p>

<ul>
<li>Original</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Hello</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">hello</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Hello</span><span class="p">.</span><span class="kr">static</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ES5</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">____Class0</span><span class="o">=</span><span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">____Class0____Key</span> <span class="k">in</span> <span class="nx">____Class0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">____Class0</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">____Class0____Key</span><span class="p">)){</span><span class="nx">Hello</span><span class="p">[</span><span class="nx">____Class0____Key</span><span class="p">]</span><span class="o">=</span><span class="nx">____Class0</span><span class="p">[</span><span class="nx">____Class0____Key</span><span class="p">];}}</span><span class="kd">var</span> <span class="nx">____SuperProtoOf____Class0</span><span class="o">=</span><span class="nx">____Class0</span><span class="o">===</span><span class="kc">null</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="nx">____Class0</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="nx">Hello</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">____SuperProtoOf____Class0</span><span class="p">);</span><span class="nx">Hello</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">Hello</span><span class="p">;</span><span class="nx">Hello</span><span class="p">.</span><span class="nx">__superConstructor__</span><span class="o">=</span><span class="nx">____Class0</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Hello</span><span class="p">(){</span><span class="s2">&quot;use strict&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">____Class0</span><span class="o">!==</span><span class="kc">null</span><span class="p">){</span><span class="nx">____Class0</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">);}}</span>
</span><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">Hello</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="s2">&quot;foo&quot;</span><span class="p">,{</span><span class="nx">writable</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">configurable</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}});</span>
</span><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">Hello</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span><span class="s2">&quot;render&quot;</span><span class="p">,{</span><span class="nx">writable</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">configurable</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Hello</span><span class="p">.</span><span class="kr">static</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">bar</span><span class="o">:</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ES3</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">____Class0</span><span class="o">=</span><span class="nx">React</span><span class="p">.</span><span class="nx">Component</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">____Class0____Key</span> <span class="k">in</span> <span class="nx">____Class0</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">____Class0</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">____Class0____Key</span><span class="p">)){</span><span class="nx">Hello</span><span class="p">[</span><span class="nx">____Class0____Key</span><span class="p">]</span><span class="o">=</span><span class="nx">____Class0</span><span class="p">[</span><span class="nx">____Class0____Key</span><span class="p">];}}</span><span class="kd">var</span> <span class="nx">____SuperProtoOf____Class0</span><span class="o">=</span><span class="nx">____Class0</span><span class="o">===</span><span class="kc">null</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="nx">____Class0</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span><span class="nx">Hello</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">____SuperProtoOf____Class0</span><span class="p">);</span><span class="nx">Hello</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span><span class="o">=</span><span class="nx">Hello</span><span class="p">;</span><span class="nx">Hello</span><span class="p">.</span><span class="nx">__superConstructor__</span><span class="o">=</span><span class="nx">____Class0</span><span class="p">;</span><span class="kd">function</span> <span class="nx">Hello</span><span class="p">(){</span><span class="s2">&quot;use strict&quot;</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">____Class0</span><span class="o">!==</span><span class="kc">null</span><span class="p">){</span><span class="nx">____Class0</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">);}}</span>
</span><span class='line'>  <span class="nx">Hello</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span><span class="o">=</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">Hello</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Hello</span><span class="p">[</span><span class="s2">&quot;static&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">bar</span><span class="o">:</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;bar&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>JSXによる変換でharmony optionを有効にすることでspread operatorを使えるようになりました</h2>

<p>JSXの中ではこれまでもspread attributesとしてサポートしていましたが、JSのコード内でも使えるようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="p">...</span><span class="nx">other</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h2>JSXのparseに変更があります (Breaking Change)</h2>

<p>elementの内側に<code>&gt;</code> or <code>}</code> を使った時に以前は文字列として扱われましたがparseエラーになるようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">}</span> <span class="nx">or</span> <span class="o">&gt;&lt;</span><span class="sr">/div&gt;; /</span><span class="o">/</span> <span class="nx">parse</span> <span class="nx">error</span><span class="o">!</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>v0.14に向けて</h2>

<p>今回の変更を踏まえてReact v0.14では静的な要素においていくつかの最適化が可能になります。
これらの最適化は以前はtemplate-baseなフレームワークでのみ可能でしたが、ReactでもJSXと<code>React.createElement/Factory</code>のどちらでも可能になります。</p>

<p>詳細は下記のissueにあります。
まだ議論もされてないので変わる可能性は大きいと思いますが。</p>

<h3>Reuse Constant Value Types</h3>

<ul>
<li><a href="https://github.com/facebook/react/issues/3226">https://github.com/facebook/react/issues/3226</a></li>
</ul>


<p>これは静的なelementに変更できないものとして扱うことでdiffのコストを減らすというものです。</p>

<p>例えばこんな感じにするとか</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">↓</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tagging ReactElements</h3>

<ul>
<li><a href="https://github.com/facebook/react/issues/3227">https://github.com/facebook/react/issues/3227</a></li>
</ul>


<p>これはReactElementにtag付けをしてそれを使ってdiffアルゴリズムを最適化するというもののようです。</p>

<h3>Inline ReactElements</h3>

<ul>
<li><a href="https://github.com/facebook/react/issues/3228">https://github.com/facebook/react/issues/3228</a></li>
</ul>


<p>これはproductionビルドのときに、React.createElementではなくてinline objectに変換することでReact.createElementのコストを削減するというものです。</p>

<p>こんな感じ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">bar</span><span class="p">}</span><span class="o">&lt;</span><span class="nx">Baz</span> <span class="nx">key</span><span class="o">=</span><span class="s2">&quot;baz&quot;</span> <span class="o">/&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="err">↓</span>
</span><span class='line'><span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;div&#39;</span><span class="p">,</span> <span class="nx">props</span><span class="o">:</span> <span class="p">{</span> <span class="nx">className</span><span class="o">:</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">children</span><span class="o">:</span>
</span><span class='line'>  <span class="p">[</span> <span class="nx">bar</span><span class="p">,</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">Baz</span><span class="p">,</span> <span class="nx">props</span><span class="o">:</span> <span class="p">{</span> <span class="p">},</span> <span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="nx">ref</span><span class="o">:</span> <span class="kc">null</span> <span class="p">}</span> <span class="p">]</span>
</span><span class='line'><span class="p">},</span> <span class="nx">key</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span> <span class="nx">ref</span><span class="o">:</span> <span class="kc">null</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうするとReact.createElementの時に行っているPropTypesやkeyに対するvalidationが出来ないので、developmentビルドの時には適用しないことを想定しているようです。</p>

<hr />

<p>というわけで、React v0.13をダラダラと書いてみました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React v0.13.0 Beta1でclassでComponentが作れるようになった]]></title>
    <link href="http://blog.koba04.com/post/2015/01/28/published-react-v0.13.0-beta1/"/>
    <updated>2015-01-28T17:20:35+09:00</updated>
    <id>http://blog.koba04.com/post/2015/01/28/published-react-v0.13.0-beta1</id>
    <content type="html"><![CDATA[<p>React.js Confの前日にv0.13.0 Beta1がnpmにpublishされました。</p>

<p><a href="http://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html">http://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html</a></p>

<p>featureは色々あるみたいですが、↑のブログにはその1つとしてClassによるReact Componentの作成が紹介されていたのでそれについて書きたいと思います。</p>

<p>ちなみに<code>React.createClass</code>を使う場合はこれまでと同じままで大丈夫なはずです。</p>

<!-- more -->


<h2>ES6 Classes</h2>

<p><code>React.createClass</code>ではなくて、ES6のclassを使って↓みたいな感じで書けるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">React</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">Hello</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">val</span><span class="o">:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">foo</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">onClick</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">val</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">val</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">state</span> <span class="nx">is</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">val</span><span class="p">}.</span> <span class="nx">props</span> <span class="nx">is</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">foo</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onClick</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span><span class="o">&gt;</span><span class="nx">click</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Hello</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>ポイントとしては</p>

<ul>
<li><code>React.Component</code>をextendsします。</li>
<li><code>constructor</code>に<code>props</code>が引数として渡ってくるのでそれを使って必要に応じて<code>state</code>の初期化をする。

<ul>
<li><code>getInitialState</code>は使うことができません。(warnが出ます)</li>
</ul>
</li>
<li>Autobindingはされなくなったので明示的に<code>this.onClick.bind(this)</code>のようにする必要があります。</li>
<li><code>propTypes</code>や<code>defaultProps</code>はconstructorのpropertyとして指定する必要があります。</li>
<li>現時点で<code>mixin</code>はclassで書いた場合は使うことができません。</li>
</ul>


<p>といった辺りです。</p>

<h3>変換</h3>

<p>ES6のコードの変換は、これまで通りreact-toolsでjsxの<code>--harmony</code>optionを有効にしたり6to5使ったりする感じです。</p>

<h3>今後</h3>

<p>今の書き方だと微妙に感じるところも結構あるのですが、最終的には↓のような形で書けるようにしたいみたいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">React</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">Hello</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span> <span class="p">};</span>
</span><span class='line'>  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">val</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">foo</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">};</span>
</span><span class='line'>  <span class="nx">onClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">val</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">val</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">state</span> <span class="nx">is</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">val</span><span class="p">}.</span> <span class="nx">props</span> <span class="nx">is</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">foo</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onClick</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">click</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>mixinについてはreact-futureを見る限りこんな感じになるのかもしれないですね。</p>

<p><a href="https://github.com/reactjs/react-future/blob/master/01%20-%20Core/02%20-%20Mixins.js">https://github.com/reactjs/react-future/blob/master/01%20-%20Core/02%20-%20Mixins.js</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">mixin</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;react-utils&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;react&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">A</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Hello</span> <span class="kr">extends</span> <span class="nx">mixin</span><span class="p">(</span><span class="nx">Component</span><span class="p">,</span> <span class="nx">A</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CoffeeScript &amp; TypeScript</h3>

<p>ちなみにES6だけでなく、CoffeescriptやTypeScriptのClass syntaxでもかけます。</p>

<hr />

<p>React.js自体でやることを減らしてES6、7のfeatureに任せることが出来るところは任せようといった方向性を感じて個人的にはいいんじゃないかと思っています。</p>

<p>React.js Conf行きたかった&hellip;</p>
]]></content>
  </entry>
  
</feed>
