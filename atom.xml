<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2017-10-01T23:16:33+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React v16でのサーバーサイドレンダリング]]></title>
    <link href="http://blog.koba04.com/post/2017/10/01/serverside-rendering-in-react-v16/"/>
    <updated>2017-10-01T23:02:46+09:00</updated>
    <id>http://blog.koba04.com/post/2017/10/01/serverside-rendering-in-react-v16</id>
    <content type="html"><![CDATA[<p>React v16について書いたブログの中の、サーバーサイドレンダリングについての部分に間違いがあったので修正しつつ、v16のサーバーサイドレンダリングについて補足します。</p>

<p><a href="http://blog.koba04.com/post/2017/09/27/react-v16-changes/">http://blog.koba04.com/post/2017/09/27/react-v16-changes/</a></p>

<p><strong>Hydrationしたい場合は、renderToStringまたはrenderToNodeStreamで行う必要があります。</strong></p>

<p>renderToStringまたはrenderToNodeStreamには、<code>data-reactroot</code>以外にも変数部分を識別するためのコメントノードなどが挿入されていて、それが必要であるためです。</p>

<p>それでは、v15とv16でのサーバーサイドレンダリングの違いを見てみます。</p>

<!-- more -->


<p>以下、長いのでサーバーサイドレンダリングはSSRと略します。</p>

<h2>v15まで</h2>

<p>ReactでSSRしたコンテンツをクライアントでも再利用したい場合、これまではSSRしたHTMLを元に生成されたchecksumとクライアントサイドで構築したReactElementから生成したchecksumが一致する必要がありました。</p>

<p>これはつまり、ReactDOMServer.renderToStringのエントリーポイントと、ReactDOM.renderのエントリーポイントが一致する必要があることを示します。</p>

<p>つまりHTML全体をReactで構築しようとするとこんな感じになります。</p>

<ul>
<li>App.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Html.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Html</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">App</span><span class="o">&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;app&quot;</span> <span class="nx">dangerouslySetInnerHTML</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="nx">__html</span><span class="o">:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">markup</span><span class="p">}</span> <span class="p">}</span><span class="o">&gt;&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;initial-data&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/plain&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">json</span><span class="o">=</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialData</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;/static/bundle.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/html&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Html</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>server.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOMServer</span> <span class="nx">from</span> <span class="s1">&#39;react-dom/server&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">express</span> <span class="nx">from</span> <span class="s1">&#39;express&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">Html</span> <span class="nx">from</span> <span class="s1">&#39;./Html&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">initialData</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;World&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">ReactDOMServer</span><span class="p">.</span><span class="nx">renderToStaticMarkup</span><span class="p">(</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">Html</span>
</span><span class='line'>                <span class="nx">markup</span><span class="o">=</span><span class="p">{</span><span class="nx">ReactDOMServer</span><span class="p">.</span><span class="nx">renderToString</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="p">{...</span><span class="nx">initialData</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">)}</span>
</span><span class='line'>                <span class="nx">initialData</span><span class="o">=</span><span class="p">{</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">initialData</span><span class="p">)}</span>
</span><span class='line'>            <span class="o">/&gt;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>browser.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">initialData</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;initial-data&#39;</span><span class="p">).</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;data-json&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="p">{...</span><span class="nx">initialData</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように<code>Html.js</code>ではdangerouslySetInnerHTMLを使い、アプリケーションのComponentをrenderToStringによりchecksumなどが付与されたHTML文字列として埋め込む必要があります。</p>

<p>また<code>server.js</code>では、HTML全体の部分はrenderToStaticMarkupで、アプリケーションの部分はrenderToStringでと、別々に生成する必要があります。</p>

<p>これにより、renderToStringとReactDOM.renderで構築される内容が一致するため、SSRによって生成されたDOMが再利用されます。</p>

<h2>v16</h2>

<p>v16では、checksumによりチェックは行われず、可能な限りすでに構築されているDOMを再利用しようとします。
また、ReactDOM.hydrateという明示的なAPIを使うことで、サーバー側とクライアント側でエントリーポイントを合わせる必要はありません。
（ReactDOM.renderを使う場合は、<code>data-reactroot</code>の属性がDOMにあるかをチェックしているのでエントリーポイントを合わせる必要があります）</p>

<p>そのためv15のように、エントリーポイントを一致させるために、アプリケーションのComponentを別途HTML文字列として生成する必要はありません。</p>

<p>したがって、上記の例は、v16で追加されたrenderToNodeStreamを使うと</p>

<ul>
<li>App.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Html.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Html</span> <span class="o">=</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">App</span><span class="o">&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;app&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;initial-data&quot;</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/plain&quot;</span> <span class="nx">data</span><span class="o">-</span><span class="nx">json</span><span class="o">=</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialData</span><span class="p">}</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;/static/bundle.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/html&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Html</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>server.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOMServer</span> <span class="nx">from</span> <span class="s1">&#39;react-dom/server&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">express</span> <span class="nx">from</span> <span class="s1">&#39;express&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">Html</span> <span class="nx">from</span> <span class="s1">&#39;./Html&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">initialData</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;World&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ReactDOMServer</span><span class="p">.</span><span class="nx">renderToNodeStream</span><span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Html</span> <span class="nx">initialData</span><span class="o">=</span><span class="p">{</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">initialData</span><span class="p">)}</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">App</span> <span class="p">{...</span><span class="nx">initialData</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/Html&gt;</span>
</span><span class='line'>    <span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">res</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>browser.js</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">App</span> <span class="nx">from</span> <span class="s1">&#39;./App&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">initialData</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;initial-data&#39;</span><span class="p">).</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;data-json&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">hydrate</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="p">{...</span><span class="nx">initialData</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記ではHtmlのComponent内で、アプリケーションのComponentを、ReactDOM.hydrateの対象となるDOMの子要素として渡しているだけです。
HTML文字列として渡したりする必要はありません。</p>

<p>また全体もrenderToNodeStreamでまとめて構築できるため、コードもシンプルになります。</p>

<p>というわけで、v16ではSSRのコードもよりシンプルに書けるように効率的になっています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React v16 changes]]></title>
    <link href="http://blog.koba04.com/post/2017/09/27/react-v16-changes/"/>
    <updated>2017-09-27T16:34:07+09:00</updated>
    <id>http://blog.koba04.com/post/2017/09/27/react-v16-changes</id>
    <content type="html"><![CDATA[<p>Reactのv16がリリースされたので、変更点などを整理したいと思います。</p>

<ul>
<li><a href="https://facebook.github.io/react/blog/2017/09/26/react-v16.0.html">https://facebook.github.io/react/blog/2017/09/26/react-v16.0.html</a></li>
<li><a href="https://code.facebook.com/posts/1716776591680069/react-16-a-look-inside-an-api-compatible-rewrite-of-our-frontend-ui-library/">https://code.facebook.com/posts/1716776591680069/react-16-a-look-inside-an-api-compatible-rewrite-of-our-frontend-ui-library/</a></li>
</ul>


<p>React v16やReact Fiberについては、下記で書いたりもしているのでそちらも参考にしてみてください。</p>

<ul>
<li><a href="http://blog.koba04.com/post/2017/04/25/a-state-of-react-fiber/">React Fiber現状確認</a></li>
<li><a href="https://speakerdeck.com/koba04/capability-of-react-fiber">Capability of React Fiber</a></li>
<li><a href="https://speakerdeck.com/koba04/react-v16-and-beyond-react-fiber">React v16 and beyond React Fiber</a></li>
<li><a href="https://html5experts.jp/shumpei-shiraishi/23265/">ReactはなぜFiberで書き直されたのか？Reactの課題と将来像を探る</a></li>
</ul>


<!-- more -->


<h2>新機能</h2>

<h3>render関数から文字列や配列を直接返せるように</h3>

<p>地味に嬉しい機能ですね。これまでは無駄にspanやdivで囲むしかなかったのが、直接文字列や配列を返すことができるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 文字列を直接返す</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">DisplayName</span> <span class="o">=</span> <span class="p">({</span><span class="nx">user</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="p">(</span><span class="err">@</span><span class="nx">$</span><span class="p">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">})</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 配列</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Row</span> <span class="o">=</span> <span class="p">({</span><span class="nx">children</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/tr&gt;;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Columns</span> <span class="o">=</span> <span class="p">({</span><span class="nx">items</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">td</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">i</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/td&gt;)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">Row</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">Columns</span> <span class="nx">items</span><span class="o">=</span><span class="p">{[</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">]}</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/Row&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>配列を返す場合は、<code>key</code>を必ずつける必要があります。
それをJSXのSyntaxレベルでサポートするという議論もあったりします。</p>

<ul>
<li><a href="https://github.com/facebook/jsx/issues/84">https://github.com/facebook/jsx/issues/84</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">foo</span><span class="o">&lt;</span><span class="err">/li&gt;,</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="mi">2</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">bar</span><span class="o">&lt;</span><span class="err">/li&gt;,</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="mi">3</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">baz</span><span class="o">&lt;</span><span class="err">/li&gt;,</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="err">↓↓↓</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// こんな感じで書けるようにしたいという議論</span>
</span><span class='line'><span class="o">&lt;&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">foo</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">bar</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="nx">baz</span><span class="o">&lt;</span><span class="err">/li&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Error Boundaries</h3>

<p>子のComponentのrender関数やライフサイクルメソッドで起きたエラーを、<code>componentDidCatch</code>というライフサイクルメソッドでキャッチできるようになります。
これによって、エラーが起きたことをユーザーに伝えたり、エラーリポートのサービスに送信できるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">Child</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// 〜 is not a functionみたいなエラーでも同様</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Something went wrong!!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Child</span><span class="o">!&lt;</span><span class="err">/p&gt;;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">error</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">componentDidCatch</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">error</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span> <span class="nx">info</span><span class="p">.</span><span class="nx">componentStack</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Something went wrong!! </span>
</span><span class='line'>    <span class="c1">// in Child (created by App)</span>
</span><span class='line'>    <span class="c1">// in section (created by App)</span>
</span><span class='line'>    <span class="c1">// in App</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">error</span> <span class="o">?</span> <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="err">エラーが発生しました</span><span class="o">&lt;</span><span class="sr">/p&gt; : &lt;Child /</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/section&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のように、componentDidCatchの引数には、Errorオブジェクト以外に<code>info</code>というオブジェクトを受け取ります。infoは今のところ<code>componentStack</code>のプロパティしか持っていません。<code>componentStack</code>には、Compnentのスタックトレースが文字列で入っています。したがって、これをエラーと一緒に送信すると、どこのComponentでどのエラーが発生したのかがわかります。</p>

<p><strong>Error Boundariesの対象になるのは、render関数とライフサイクルメソッドの中のエラーだけです。</strong>なので、イベントハンドラーの中で起きたエラーや、ライフサイクルメソッドの中での非同期処理（HTTP Requestなど)で起きたエラーは対象になりません。</p>

<p>また、もう一点、上記のError Boundariesの対象となるエラーに対する扱いが変更されています。</p>

<p>v15までは、エラーが発生したらそこで処理が中断されていました。したがって、途中のComponentのrenderで処理が止まるなど、不整合なViewをユーザーに見せてしまう可能性がありました。</p>

<p>v16では、エラーが発生すると、ReactDOM.renderで指定したRoot Containerから全てアンマウント（DOMから削除）されるようになります。
それを避けたい場合には、上記の例のようにcomponentDidCatchを定義してsetStateするなどしてエラー用の表示を行う必要があります。
なので、親のComponentでcomponentDidCatchを定義したり、componentDidCatchを定義したComponentでアプリケーション全体のComponentをラップしておくと安心かと思います。</p>

<h3>Portals</h3>

<p><code>ReactDOM.createPortal</code>というAPIが追加されました。</p>

<ul>
<li><a href="https://facebook.github.io/react/docs/portals.html">https://facebook.github.io/react/docs/portals.html</a></li>
</ul>


<p>これは、Componentツリーの外側に対するrenderをComponentツリーの一部として扱えるようにする機能です。
文字だけで書くとわかりにくいので例として、どこかアプリケーションの外側にモーダル用のDOMがあって、アプリケーションのStateによってモーダルを表示したい場合を考えてみます。</p>

<p>Portalを使わずに書くと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">componentDidUpdate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.modal-container&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">modal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">Modal</span>
</span><span class='line'>                    <span class="nx">type</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">modal</span><span class="p">}</span>
</span><span class='line'>                    <span class="nx">onClose</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span>
</span><span class='line'>                            <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span><span class="nx">modal</span><span class="o">:</span> <span class="kc">null</span><span class="p">}),</span>
</span><span class='line'>                            <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">unmountComponentAtNode</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">)</span>
</span><span class='line'>                    <span class="p">}}</span>
</span><span class='line'>                <span class="o">&gt;</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ....</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とcomponentDidUpdateやcomponentDidMountのライフサイクルメソッドの中で扱う形になりますが、Portalを使うと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">Contents</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">modal</span> <span class="o">&amp;&amp;</span> <span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">createPortal</span><span class="p">(</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">Modal</span>
</span><span class='line'>                    <span class="nx">type</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">modal</span><span class="p">}</span>
</span><span class='line'>                    <span class="nx">onClose</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">({</span><span class="nx">modal</span><span class="o">:</span> <span class="kc">null</span><span class="p">}))</span>
</span><span class='line'>                    <span class="p">}}</span>
</span><span class='line'>                <span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>                <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.modal-container&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/section&gt;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>というように、render関数の中に書くことが出来ます。
この場合Modalは、Contentsの隣に配置されたComponentと同様に処理されます。</p>

<p>なので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">)}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">createPortal</span><span class="p">(</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Portal</span><span class="o">&lt;</span><span class="err">/p&gt;,</span>
</span><span class='line'>            <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;.somewhere&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">)}</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とあった場合、<code>&lt;p&gt;Portal&lt;/p&gt;</code>をクリックした場合にも、<code>cosole.log('click')</code>が呼ばれます。</p>

<h3>ServerSide Rendering</h3>

<p>サーバーサイドレンダリングは完全にリライトされました（既存の実装をベースに）。
これまでは、クライアントでのDOM構築と同じ流れでHTMLを構築していたのですが、下記の1ファイルに切り離されました。</p>

<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/shared/server/ReactPartialRenderer.js">https://github.com/facebook/react/blob/master/src/renderers/shared/server/ReactPartialRenderer.js</a></li>
</ul>


<p>これにより、無駄な処理が減ったことによる高速化やStreamサポートが簡単に行えるようになりました。
また、独立したファイルになったことで、今後のパフォーマンスチューニングもやりやすくなったと思います。</p>

<p>その他サーバーサイドレンダリングに対する変更は、Node Stream対応のAPIの追加とHydarationの方法の変更です。</p>

<p>Node Streamの対応については、<code>renderToNodeStream</code>と<code>renderToStaticNodeStream</code>のAPIが追加されたので、それを使うだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">ReactDOMServer</span> <span class="nx">from</span> <span class="s1">&#39;react-dom/server&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">Stream</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOMServer</span><span class="p">.</span><span class="nx">renderToNodeStream</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">);</span>
</span><span class='line'><span class="c1">// &lt;div data-reactroot=&quot;&quot;&gt;&lt;p&gt;Hello Stream!&lt;/p&gt;&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">server</span><span class="p">.</span><span class="nx">renderToStaticNodeStream</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">);</span>
</span><span class='line'><span class="c1">// &lt;div&gt;&lt;p&gt;Hello Stream!&lt;/p&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hydrationの方法の変更については、クライアント側の変更とバリデーションロジックの変更があります。</p>

<p>ここでいうHydrationとは、サーバーサイドレンダリングで返したHTMLが生成したDOM要素を、クライアント側でのレンダリング時に再利用することを指します。</p>

<p>クライアント側でのAPIの変更については、ReactDOM.renderの代わりに<code>ReactDOM.hydrate</code>という専用のAPIを使うようになります。
v16の段階では、ReactDOM.renderによるHydrationもサポートされますが、将来的に廃止される予定です。</p>

<p><del>ちなみに、renderToNodeStreamとrenderToStaticNodeStreamによる出力の違いは、Rootの要素に<code>data-reactroot</code>があるかないかの違いだけです。このdata-reactrootはReactDOM.renderでHydrationするかどうかの判定に使われているだけです。
なので、将来的にはどちらか1つのAPIだけになると思います。ReactDOM.hydrateを使う場合は、renderToStaticNodeStreamで生成したHTMLに対してもHydration出来ます。</del></p>

<hr />

<p><strong>[2017/10/01:訂正]</strong></p>

<p>renderToNodeStreamとrenderToStaticNodeStreamによる出力の違いは、Rootの要素に<code>data-reactroot</code>以外にも、変数部分を識別するためのコメントノードの差し込みがあります。
したがって、Hydrationする場合にはrenderToNodeStreamを、それ以外の場合はrenderToStaticNodeStreamという使い分けになります。</p>

<hr />

<p>Hydrationの方法については、v15まではrenderToStringで生成したHTMLの<code>data-react-check-sum</code>という属性につけられたチェックサムを使い、クライアント側で生成したReactElementの構造が一致するかどうか判定し、一致すればDOMを再利用して一致しなければDOMを再構築する方法を採用していました。</p>

<p>v16では、サーバーサイドレンダリングで構築したDOMを、React.hydrateの際に可能な限り再利用しようとします。
ReactElementの構造が一致するかどうかの確認が、ReactElementの単位で行われるようになります。
（一致しない場合は、引き続きwarningが出力されます）
ただし、バリデーションするというよりも可能な限り再利用する方針であるため、サーバーサイドレンダリングした内容とのdiff次第では、意図しない結果となる場合があります。</p>

<ul>
<li><a href="https://github.com/facebook/react/issues/10591">https://github.com/facebook/react/issues/10591</a></li>
</ul>


<p>サーバーサイドレンダリングで意図的に異なるコンテンツを返している場合は、一度DOMをリセットする方がいいかもしれません。</p>

<p>これにより、<code>data-react-check-sum</code>だけでなく、<code>react-text</code>のコメントや<code>data-react-id</code>もHTMLに付加されなりました。</p>

<p>サーバーサイドレンダリングについては、捕捉記事書きました。</p>

<ul>
<li><a href="http://http://blog.koba04.com/post/2017/10/01/serverside-rendering-in-react-v16/">http://http://blog.koba04.com/post/2017/10/01/serverside-rendering-in-react-v16/</a></li>
</ul>


<h3>DOM Attributes</h3>

<p>これまでは、ホワイトリストで管理された属性以外は、warningを出しつつDOMには反映されなかったのですが、v16からは反映されるようになります。
これにより、ng-xxとかv-xxみたいな属性や、一部ブラウザーが実装しているけどまだ標準化されていないような属性値も使えるようになります。
ただし、on〜といった属性値については、セキュリティ的なリスクから反映されません。</p>

<p>また、属性が期待している型とは異なる値を渡した場合に、値が反映されなくなります。
例えばclassNameにfalseを渡した場合は、v15までは&#8221;false&#8221;という文字列がクラス名と設定されていましたが、v16からはwarningが出て反映されなくなります。</p>

<p>詳細は、下のブログに。</p>

<ul>
<li><a href="https://facebook.github.io/react/blog/2017/09/08/dom-attributes-in-react-16.html">https://facebook.github.io/react/blog/2017/09/08/dom-attributes-in-react-16.html</a></li>
</ul>


<h3>Bundle Size</h3>

<p>Browserifyを使ったビルドからRollupを使ったビルドに変更されて、フラットバンドルになりました。
Rollupを使って1つのモジュールとしてビルドすることで、Browserifyが付加する依存関係解決のためのコードが不要になります。
その結果、ファイルサイズの削減やブラウザー上での初回読み込みの時間が短縮されます。</p>

<p>reactとreact-domのv16をnpmからインストールすると、下記のような構造になっており、内部モジュールの構造は維持されていません。</p>

<ul>
<li>react</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">node_modules</span><span class="o">/</span><span class="nx">react</span><span class="o">/</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">LICENSE</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">README</span><span class="p">.</span><span class="nx">md</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">cjs</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="p">.</span><span class="nx">development</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">└──</span> <span class="nx">react</span><span class="p">.</span><span class="nx">production</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">node_modules</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">umd</span>
</span><span class='line'>    <span class="err">├──</span> <span class="nx">react</span><span class="p">.</span><span class="nx">development</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'>    <span class="err">└──</span> <span class="nx">react</span><span class="p">.</span><span class="nx">production</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>react-dom</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">node_modules</span><span class="o">/</span><span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">/</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">LICENSE</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">README</span><span class="p">.</span><span class="nx">md</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">cjs</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">-</span><span class="nx">server</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">development</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">-</span><span class="nx">server</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">production</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">-</span><span class="nx">server</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">development</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">-</span><span class="nx">server</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">production</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">-</span><span class="nx">test</span><span class="o">-</span><span class="nx">utils</span><span class="p">.</span><span class="nx">development</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">-</span><span class="nx">unstable</span><span class="o">-</span><span class="kr">native</span><span class="o">-</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">development</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">-</span><span class="nx">unstable</span><span class="o">-</span><span class="kr">native</span><span class="o">-</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">production</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="p">.</span><span class="nx">development</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">└──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="p">.</span><span class="nx">production</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">index</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">node_modules</span>
</span><span class='line'><span class="err">├──</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">server</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">server</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">test</span><span class="o">-</span><span class="nx">utils</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">umd</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">-</span><span class="nx">server</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">development</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">-</span><span class="nx">server</span><span class="p">.</span><span class="nx">browser</span><span class="p">.</span><span class="nx">production</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">-</span><span class="nx">unstable</span><span class="o">-</span><span class="kr">native</span><span class="o">-</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">development</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="o">-</span><span class="nx">unstable</span><span class="o">-</span><span class="kr">native</span><span class="o">-</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">production</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">├──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="p">.</span><span class="nx">development</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">│  </span> <span class="err">└──</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="p">.</span><span class="nx">production</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">unstable</span><span class="o">-</span><span class="kr">native</span><span class="o">-</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">js</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の<code>cjs</code>がcommonJSのビルドが入っているディレクトリです。<code>〜.development.js</code>と<code>〜.production.min.js</code>があるのは本番用のビルドと開発用のビルドを分けるためです。
この分岐はindex.jsの中で<code>process.env.NODE_ENV</code>によって行われています。</p>

<ul>
<li><code>node_modules/react/index.js</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="s1">&#39;production&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./cjs/react.production.min.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./cjs/react.development.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これにより、Direct importと言われている<code>react/lib/xxx</code>のような形での内部モジュール参照が出来なくなります。これは、主にカスタムレンダラーの実装や内部の挙動を変更させるために行われており、そういったライブラリーを使っている場合には注意が必要です。</p>

<p>ちなみに、下記をwebpackとBabel(es2015とreactのprest)でビルドして、比較してみるとこんな感じでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>v15.6.2</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">bundle</span><span class="p">.</span><span class="nx">js</span>  <span class="mi">742</span> <span class="nx">kB</span>
</span><span class='line'><span class="nx">bundle</span><span class="p">.</span><span class="nx">js</span>  <span class="mi">151</span> <span class="nx">kB</span> <span class="c1">// with `-p` option</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>16.0.0</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">bundle</span><span class="p">.</span><span class="nx">js</span>  <span class="mi">794</span> <span class="nx">kB</span>
</span><span class='line'><span class="nx">bundle</span><span class="p">.</span><span class="nx">js</span>  <span class="mi">117</span> <span class="nx">kB</span> <span class="c1">// with `-p` option</span>
</span></code></pre></td></tr></table></div></figure>


<p>production buildは小さくなってますね。</p>

<p>また、UMDビルドのディレクトリ名とファイル名が変更になっているので、CDNから利用する場合などは注意してください。</p>

<h3>License</h3>

<p>ライセンスがBSD + PATENTSからMITになりました。</p>

<ul>
<li><a href="https://code.facebook.com/posts/300798627056246/relicensing-react-jest-flow-and-immutable-js/">https://code.facebook.com/posts/300798627056246/relicensing-react-jest-flow-and-immutable-js/</a></li>
</ul>


<h3>Addons</h3>

<p>v15.5の時点で、廃止するアナウンスが出ていましたが、<code>react-addons-xxx</code>のパッケージは廃止になります。
基本的には、別パッケージになったりしているので使っているものがあれば下記で移行パスを確認してみてください。</p>

<ul>
<li><a href="https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html#discontinuing-support-for-react-addons">https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html#discontinuing-support-for-react-addons</a></li>
</ul>


<p>react-addons-perfに関しては、<code>?react_perf</code>をURLにつけてBrowserのPerformanceのTimelineで計測する方法になります。</p>

<ul>
<li><a href="https://facebook.github.io/react/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab">https://facebook.github.io/react/docs/optimizing-performance.html#profiling-components-with-the-chrome-performance-tab</a></li>
</ul>


<p>react-with-addons.jsのようなUMDビルドももう提供されません。</p>

<h2>Breaking Changes</h2>

<p>React Fiberに実装が変わったことによる、処理順の変更などが多いです。</p>

<ul>
<li>ReactDOM.renderとReactDOM.unstable_renderIntoContainerをライフサイクルメソッドの中で読んだ場合にはnullが返るようになります。</li>
<li>setStateでnullを渡した場合、更新処理が行われなくなります。</li>
<li>renderの中でのsetStateは常に更新処理が行われるようになります（以前はされない場合があったらしい）。そもそもrenderの中でsetStateを呼び出すべきではないですが。</li>
<li>setStateの第2引数のコールバックはcomponentDidMountとcomponentDidUpdateの後すぐに呼び出されるようになります。以前は全てのComponentがrenderされた後に呼び出されていました。 <strong>???以前のバージョンの挙動が確認できなかった</strong></li>
<li><code>&lt;A /&gt;</code>から<code>&lt;B /&gt;</code>に置き換えたとき、B.componentWillMountが常にA.componentWillUnmountの前に呼ばれるようになります。</li>
<li>以前は、refを更新する際のデタッチ(nullでの呼び出し)はComponentのrender関数の前に呼ばれていましたが、render関数の後に変更になります。</li>
<li>React以外によって、編集されたDOMに対して再度ReactDOM.renderを行った時にwarningが出るようになりました。この場合は一度ReactDOM.unmountComponentAtNodeでアンマウントしてから再度renderを行います。</li>
<li>componentDidUpdateのライフサイクルメソッドが第3引数としてprevContextを受け取らなくなりました。</li>
<li>ShallowRendererにunstable_batchedUpdatesはもう実装されません。</li>
</ul>


<p>下記はすでにwarningの対象で今回のバージョンで完全に削除されたものです。</p>

<ul>
<li><code>React.createClass</code>が削除されました。代わりに<code>create-react-class</code>を使います。</li>
<li><code>React.PropTypes</code>が削除されました。代わりに<code>pro-types</code>を使います。</li>
<li><code>React.DOM.xxx</code>が削除されました。代わりに<code>react-dom-factories</code>を使います。</li>
</ul>


<h2>JavaScript Environment Requirements</h2>

<p>動作環境として、<code>Map</code>と<code>Set</code>と<code>requestAnimationFrame</code>が必要になりました。
なので必要に応じてpolyfillを設定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="s1">&#39;core-js/es6/map&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="s1">&#39;core-js/es6/set&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">raf</span> <span class="nx">from</span> <span class="s1">&#39;raf&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span> <span class="o">=</span> <span class="nx">raf</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// or</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">requestAnimationFrame</span> <span class="o">=</span> <span class="nx">cb</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">cb</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>React Fiber</h2>

<p>React Fiberについてはすでに書いたので省略しますが、v16の時点ではv15と互換性のある同期モードで動作します。
したがって、v16にあげたからといって、大きくパフォーマンスが向上したりするようなことはありません（多少のパフォーマンスが上がるかもですが）。</p>

<p>現時点では、いくつかの方法を使うことで、非同期renderingを試すことができるので紹介します。ただし、非同期rendering周りはまだ安定しておらず、コードもガンガン変わっているので注意が必要です。</p>

<h3>ReactDOM.unstable_deferredUpdates</h3>

<p><code>ReactDOM.unstable_deferredUpdates</code>で囲んだ中でのsetStateなどの更新処理は、Low Priorityとして扱われて、requestIdleCallbackを使って非同期に処理されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">unstable_deferredUpdates</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">newState</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>React.unstable_AsyncComponent</h3>

<p><code>React.unstable_AsyncComponent</code>の中で起きた更新処理はLow Priorityとして扱われるようになります。
直接Componentとして使う方法と、PureComponentのようにextends対象として使う方法があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">AsyncComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">unstable_AsyncComponent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">AsyncComponent</span><span class="o">&gt;&lt;</span><span class="nx">App</span> <span class="o">/&gt;&lt;</span><span class="err">/AsyncComponent&gt;,</span>
</span><span class='line'>    <span class="nx">container</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">AsyncComponent</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>ReactDOM.flushSync</h3>

<p><code>ReactDOM.flushSync</code>で囲んだ中での更新処理は、同期(Sync)のPriorityとして扱われます。
v16ではデフォルトが同期のPriorityなので、効果ありませんが、上記のunstableなAPIの中で同期的な更新を行いたい場合に、使用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">flushSync</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">newState</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>あとは、今後の非同期renderingに備えて、既存のStateの値を元に更新処理を行う場合は、第1引数に関数を渡す方法でのsetState呼び出しをするようにしておいた方がいいと思います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">newState</span><span class="p">)</span>
</span><span class='line'><span class="c1">// ↓↓↓</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span><span class="nx">prevState</span> <span class="o">=&gt;</span> <span class="nx">newState</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>React Fiberでは、柔軟なスケジューリングを可能にすることで、UIのレスポンス性を向上させることが目的です。</p>

<h2>Custom Renderer</h2>

<p>Custom Rendererを実装するためのパッケージはv16には間に合いませんでしたが、下記のPRで作業中なので、気になる人はwatchしておくといいと思います。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/10758">https://github.com/facebook/react/pull/10758</a></li>
</ul>


<h2>Test Renderer</h2>

<p>主にsnapshot testingなどで使われていたTest Rendererに便利なAPIが追加されて使いやすくなりました。
Shallow Rendereは指定したComponentだけがrenderされますが、Test Rendererはツリー全体をrenderします。</p>

<p>下記のようにfind〜やfindAll〜のAPIが追加されており、インスタンスにもアクセスできるため、setStateを呼び出したりもできます。
また、Test RendererはReact Fiberに対するRendererとして実装されているため、React Fiberが提供する機能を利用できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">TestRenderer</span> <span class="nx">from</span> <span class="s1">&#39;react-test-renderer&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Child</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Counter</span> <span class="o">=</span> <span class="nx">props</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">props</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">count</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">section</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">bar</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Child</span><span class="o">&gt;&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="o">&lt;</span><span class="err">/p&gt;&lt;/Child&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">bar</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">count</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">})}</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">++</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Counter</span> <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/section&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">TestRenderer</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">).</span><span class="nx">root</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// find a component by Type</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">node</span> <span class="o">=&gt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="nx">Child</span><span class="p">).</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;p&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// find a component by Props</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">findByProps</span><span class="p">({</span><span class="nx">children</span><span class="o">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">}).</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;p&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// find all components by Type</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">findAllByType</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// initial state</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">instance</span> <span class="o">=</span> <span class="nx">root</span><span class="p">.</span><span class="nx">instance</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">findByType</span><span class="p">(</span><span class="nx">Counter</span><span class="p">).</span><span class="nx">props</span><span class="p">.</span><span class="nx">count</span> <span class="o">===</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">instance</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">===</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// click the button</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nx">root</span><span class="p">.</span><span class="nx">findByType</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">).</span><span class="nx">props</span><span class="p">.</span><span class="nx">onClick</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">findByType</span><span class="p">(</span><span class="nx">Counter</span><span class="p">).</span><span class="nx">props</span><span class="p">.</span><span class="nx">count</span> <span class="o">===</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">instance</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">===</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// setState directly</span>
</span><span class='line'><span class="nx">instance</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">count</span><span class="o">:</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">});</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">root</span><span class="p">.</span><span class="nx">findByType</span><span class="p">(</span><span class="nx">Counter</span><span class="p">).</span><span class="nx">props</span><span class="p">.</span><span class="nx">count</span> <span class="o">===</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">assert</span><span class="p">(</span><span class="nx">instance</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">===</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>後、DOMComponentのrefに対するMockの挙動を定義することもできます。</p>

<p>Test Rendererのドキュメントを書いてみたので、そちらも参照してみてください。</p>

<ul>
<li><a href="https://facebook.github.io/react/docs/test-renderer.html">https://facebook.github.io/react/docs/test-renderer.html</a></li>
</ul>


<p>英語ですがブログも書いたのでそっちも。</p>

<ul>
<li><a href="https://medium.com/@koba04/testing-react-components-with-react-test-renderer-b4df590d0320">https://medium.com/@koba04/testing-react-components-with-react-test-renderer-b4df590d0320</a></li>
</ul>


<h2>Enzyme</h2>

<p><code>enzyme</code>も同じタイミングでv3がリリースされました。
v3からはAdapterのアーキテクチャになっており、対象とするReactのバージョンに応じたAdapterをインストールして設定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Enzyme</span> <span class="nx">from</span> <span class="s1">&#39;enzyme&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Adapter</span> <span class="nx">from</span> <span class="s1">&#39;enzyme-adapter-react-16&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Enzyme</span><span class="p">.</span><span class="nx">configure</span><span class="p">({</span> <span class="nx">adapter</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Adapter</span><span class="p">()</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記をNodeやMochaの<code>--require</code>オプションに設定したり、Jestの<code>setupFiles</code>に定義すれば毎回書く必要はありません。</p>

<p>これにより、今後はpreactのアプリケーションもサポートできるようになるかもしれません。</p>

<ul>
<li><a href="https://github.com/aweary/preact-enzyme-adapater">https://github.com/aweary/preact-enzyme-adapater</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Fiber現状確認]]></title>
    <link href="http://blog.koba04.com/post/2017/04/25/a-state-of-react-fiber/"/>
    <updated>2017-04-25T02:00:55+09:00</updated>
    <id>http://blog.koba04.com/post/2017/04/25/a-state-of-react-fiber</id>
    <content type="html"><![CDATA[<p><a href="https://developers.facebook.com/videos/?category=f8_2017">F8</a>でもReact Fiberについての発表もあったので、気になっている人も多いReact Fiberの現状について簡単に書きたいと思います。</p>

<p>Reactの完全な書き換えということで、使い方も変わってしまうと思っている人もいると思いますが、内部実装の書き換えであり、利用者から見える部分ではほとんど変更はありません。</p>

<p>もちろん、react-fiberというパッケージをインストールするというわけでもありません。</p>

<p>むしろ、<code>v16</code>の時点では現在の実装と互換性を保たれているので、<code>v16</code>がリリースされた時に、<code>v15.5</code>を使っていればほとんどそのまま<code>v16</code>に更新できると思います。
そして、言われなければ内部実装が変わっていることに気づかないのではないかと思います。</p>

<h2>とりあえずどうなるのか知りたい人向けのまとめ</h2>

<ul>
<li>v16では、基本的にはv15の時と同じように動作します。逆に言うとパフォーマンスもそんなに変わらない（はず）です</li>
<li>renderメソッドから<code>[&lt;Foo /&gt;, &lt;Bar /&gt;]</code> みたいに配列で返したり、文字列をReactElementでラップすることなく返せるようになります</li>
<li>v17では、デフォルトで非同期のrendering（後述）になります。v16でも何らかのAPIでopt-inで試せるようにはなりそうです。現状は<code>ReactDOM.unstable_deferredUpdates</code>で一部試すことができます</li>
<li>v17では、劇的に高速になるというよりは、ユーザーの入力をブロックしないようにしたり、柔軟に更新処理をスケジューリング出来るようになる予定です</li>
</ul>


<h2>注意点</h2>

<p><strong>以下の情報は、Reactをただ使いたい人にとっては知る必要のない内部実装の話です。多くの人にとってはここまでの情報でReact FiberについてはOKだと思います。v17になるまでは。</strong></p>

<!-- more -->


<h2>Reactの構成</h2>

<p>新しいFiberについて説明するために、まずは現状の実装について確認しましょう。
Reactのソースコードは下記のような構成になっています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>src
</span><span class='line'>├── fb
</span><span class='line'>├── isomorphic
</span><span class='line'>│   ├── children
</span><span class='line'>│   ├── classic
</span><span class='line'>│   │   ├── class
</span><span class='line'>│   │   ├── element
</span><span class='line'>│   │   └── types
</span><span class='line'>│   ├── hooks
</span><span class='line'>│   └── modern
</span><span class='line'>│       ├── class
</span><span class='line'>│       └── element
</span><span class='line'>├── renderers
</span><span class='line'>│   ├── art
</span><span class='line'>│   ├── dom
</span><span class='line'>│   │   ├── fiber
</span><span class='line'>│   │   ├── shared
</span><span class='line'>│   │   └── stack
</span><span class='line'>│   ├── native
</span><span class='line'>│   ├── noop
</span><span class='line'>│   ├── shared
</span><span class='line'>│   │   ├── fiber
</span><span class='line'>│   │   ├── hooks
</span><span class='line'>│   │   ├── shared
</span><span class='line'>│   │   ├── stack
</span><span class='line'>│   │   └── utils
</span><span class='line'>│   └── testing
</span><span class='line'>│       └── stack
</span><span class='line'>├── shared
</span><span class='line'>│   ├── types
</span><span class='line'>│   └── utils
</span><span class='line'>└── test
</span><span class='line'>(テストなどの一部ディレクトリは省略)</span></code></pre></td></tr></table></div></figure>


<p>上記の通り、Fiberは<code>renderers</code> の中にありrendererの1つであることがわかります。<code>fiber</code> と同列にある<code>stack</code> は現在の実装のrendererです。</p>

<p><code>renderes/shared/</code> に<code>fiber</code> と<code>stack</code> のディレクトリがあって、<code>renderers/dom/</code> にも<code>stack</code> と<code>fiber</code> があります。rendererの中にはStackとFiberの2種類の実装があり、それぞれに対応するDOMやNativeなどの環境毎のrendererがさらにあるような構成になっています。</p>

<p>FiberやStackは、reconciliationと呼ばれる部分の役割を担っています。
reconciliationとは、ReactElementからComponentのインスタンスを生成したり差分を計算してHost(DOM)に反映したり、ライフサイクルメソッドの呼び出しといったことを行う部分です。
Hostに反映させる部分はHostが何かによっても異なり、反映方法もreconciliationによって異なるため、<code>renderers/dom/</code> 以下にもStackとFiberが存在します。</p>

<p>Hostとは各環境のことです。ブラウザー環境であればDOMであり、ReactNativeであればネイティブのビューとなります。</p>

<h2>Stack</h2>

<p>それでは、まずは現在使われているStackのrendererについて簡単に触れます。
Stackは、ReactElementがツリー構造になるのと同様に、親から子、子から孫に処理を行っていきます。</p>

<p><img src="http://blog.koba04.com/images/posts/a-state-of-react-fiber/ReactDOM.png" title="'ReactDOM Stack'" ></p>

<p>上記では、<code>mountComponent</code> がどんどん入れ子になって呼ばれているのがわかります。
加えてこれは同期的に行われます。</p>

<p>つまり、トップレベルのComponentから再renderした場合、</p>

<ul>
<li>子孫の全てのComponentに対するrender処理を行いReactElementのツリーを構築する</li>
<li>更新の場合は、前のReactElementツリーと比較を行う</li>
<li>差分をHostに適用する</li>
<li>ライフサイクルメソッドの呼び出しなどを行う</li>
</ul>


<p>という処理が同期的に処理されます。
そのため、例えば複雑なツリー構造を持っていて上記の処理に時間がかかる場合、UIを完全にブロックしてしまいます。</p>

<p>また、例えばアニメーションやユーザーのタイピングなど、即時に反映する必要のある処理を行っている時にサーバーから結果が返ってきた時を考えてみます。
Stackは全てが同期的に処理されるため、サーバーからの結果の反映処理が、アニメーションやタイピングの反映に割り込んでブロックしてしまうことも起きます。</p>

<p>これらは、単純なパフォーマンスのベンチマークでは現れない指標ですが、ユーザー体験という意味では重要です。</p>

<p>これらの問題を解決するためのものとしてReact Fiberはあります。</p>

<p>ちなみにStackに関連するソースは、v16のリリース時には削除されそうな感じではあります。</p>

<h2>Fiber</h2>

<p>Fiberは、wikipediaによると「軽量な実行スレッド」とされています。</p>

<p><a href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%90%E3%83%BC_">https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%90%E3%83%BC_</a>(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF)</p>

<p>React Fiberでは、Fiberの単位でreconciliationが行われます。
Fiberは、基本的には1つのReactElementと対応すると考えることができます。</p>

<p>厳密にはReactElementの単位とFiberが必ずしも一致するわけでありません。
さらにFiberは、<code>fiber.alternate</code> として自身をcloneしたFiberを持っており再利用されています。
ただ、考える上ではFiberをReactElementの単位でイメージするとわかりやすいと思います。</p>

<p>FiberはFlowの型で下記のように指定されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 一部省略</span>
</span><span class='line'><span class="nx">type</span> <span class="nx">Fiber</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">tag</span><span class="o">:</span> <span class="nx">TypeOfWork</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">key</span><span class="o">:</span> <span class="kc">null</span> <span class="o">|</span> <span class="nx">string</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">stateNode</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span>
</span><span class='line'>  <span class="k">return</span><span class="o">:</span> <span class="nx">Fiber</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">child</span><span class="o">:</span> <span class="nx">Fiber</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">sibling</span><span class="o">:</span> <span class="nx">Fiber</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">index</span><span class="o">:</span> <span class="nx">number</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">ref</span><span class="o">:</span> <span class="kc">null</span> <span class="o">|</span> <span class="p">(((</span><span class="nx">handle</span><span class="o">:</span> <span class="nx">mixed</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">{</span><span class="nx">_stringRef</span><span class="o">:</span> <span class="o">?</span><span class="nx">string</span><span class="p">}),</span>
</span><span class='line'>  <span class="nx">pendingProps</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span> <span class="c1">// This type will be more specific once we overload the tag.</span>
</span><span class='line'>  <span class="nx">memoizedProps</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span> <span class="c1">// The props used to create the output.</span>
</span><span class='line'>  <span class="nx">updateQueue</span><span class="o">:</span> <span class="nx">UpdateQueue</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">memoizedState</span><span class="o">:</span> <span class="nx">any</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">effectTag</span><span class="o">:</span> <span class="nx">TypeOfSideEffect</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">nextEffect</span><span class="o">:</span> <span class="nx">Fiber</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">firstEffect</span><span class="o">:</span> <span class="nx">Fiber</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">lastEffect</span><span class="o">:</span> <span class="nx">Fiber</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">pendingWorkPriority</span><span class="o">:</span> <span class="nx">PriorityLevel</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">progressedPriority</span><span class="o">:</span> <span class="nx">PriorityLevel</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">progressedChild</span><span class="o">:</span> <span class="nx">Fiber</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">progressedFirstDeletion</span><span class="o">:</span> <span class="nx">Fiber</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">progressedLastDeletion</span><span class="o">:</span> <span class="nx">Fiber</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">alternate</span><span class="o">:</span> <span class="nx">Fiber</span> <span class="o">|</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactFiber.js">https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactFiber.js</a></li>
</ul>


<p>各プロパティについては解説しませんが、<code>return</code> や<code>child</code> や<code>sibling</code> など、他のFiberへの参照を持っていることがわかります。
FiberはLinked Listの構造になっています。Stackの場合はTree構造を掘り下げていくように処理をしていましたが、Fiberでは、<code>return</code> や<code>child</code> や<code>sibling</code> などをたどることで順番にReactElementを処理していきます。
そのことは、下記のスタックツリーを見てもわかります。</p>

<p><img src="http://blog.koba04.com/images/posts/a-state-of-react-fiber/ReactDOMFiber.png" title="'ReactDOM Fiber'" ></p>

<p>上記の通り、Stackのようにスタックがたくさん積まれていないことがわかります。</p>

<p>Stackでは処理が1つのツリーを単位として行われていましたが、FiberではFiberの単位で処理されます。Stackでは処理を同期的に行うしかできませんでしたが、FiberではこのFiberに対する処理をスケジューリングすることができます。</p>

<p>つまり、A → B → C とLinkedListを構成しているFiberがあった時に、A → B まで処理して中断し、またB → Cから処理を再開できます。
これはStackのような構造では難しいことです。
Generatorsだとどうでしょうか？それに対しては、<a href="https://github.com/sebmarkbage">Sebastian Markbåge</a>が下記でGeneratorsを採用しなかった理由を書いているので興味のある人は見て見るといいと思います。</p>

<ul>
<li><a href="https://github.com/facebook/react/issues/7942">https://github.com/facebook/react/issues/7942</a></li>
</ul>


<h3>Fiberのスケジューリング</h3>

<p>では、具体的にどのようにスケジューリングが行われるのかを見ていきます。</p>

<p>Fiberは、<code>beginWork</code> と<code>completeWork</code> と<code>commitWork</code> という3つのフェーズがあります。
beginWorkはcomponentのインスタンス化やrenderメソッドの呼び出し、shouldComponentUpdateなどによる比較を行います。</p>

<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactFiberBeginWork.js">https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactFiberBeginWork.js</a></li>
</ul>


<p>completeWorkは副作用を示すeffectTagを設定したり、Hostインスタンスを作成したりなどを行います。（末端のHostなどでのみ実行される）</p>

<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactFiberCompleteWork.js">https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactFiberCompleteWork.js</a></li>
</ul>


<p>副作用は下記のように定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">NoEffect</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">//           0b0000000</span>
</span><span class='line'>  <span class="nx">Placement</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">//          0b0000001</span>
</span><span class='line'>  <span class="nx">Update</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="c1">//             0b0000010</span>
</span><span class='line'>  <span class="nx">PlacementAndUpdate</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="c1">// 0b0000011</span>
</span><span class='line'>  <span class="nx">Deletion</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="c1">//           0b0000100</span>
</span><span class='line'>  <span class="nx">ContentReset</span><span class="o">:</span> <span class="mi">8</span><span class="p">,</span> <span class="c1">//       0b0001000</span>
</span><span class='line'>  <span class="nx">Callback</span><span class="o">:</span> <span class="mi">16</span><span class="p">,</span> <span class="c1">//          0b0010000</span>
</span><span class='line'>  <span class="nx">Err</span><span class="o">:</span> <span class="mi">32</span><span class="p">,</span> <span class="c1">//               0b0100000</span>
</span><span class='line'>  <span class="nx">Ref</span><span class="o">:</span> <span class="mi">64</span><span class="p">,</span> <span class="c1">//               0b1000000</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactTypeOfSideEffect.js">https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactTypeOfSideEffect.js</a></li>
</ul>


<p>commitWorkでは、componentDid(Mount|Update)などのライフサイクルメソッドの呼び出しや、completeWorkで設定されたeffectTagに基づいてHostに結果を反映します。</p>

<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactFiberCommitWork.js">https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactFiberCommitWork.js</a></li>
</ul>


<p>この中で、beginWorkとcompleteWorkはFiber単位で実行されます。
commitWorkは、全てのFiberに対する処理が終わった後にまとめて実行されます。</p>

<p>例えば、下記のような構成のComponentがある場合、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Text</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="s1">&#39;...&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">List</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">...</span><span class="o">&lt;</span><span class="err">/div&gt;,</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">...</span><span class="o">&lt;</span><span class="err">/div&gt;,</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">...</span><span class="o">&lt;</span><span class="err">/div&gt;,</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">main</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="p">...</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">...</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">Text</span> <span class="o">/&gt;</span>
</span><span class='line'>                <span class="o">&lt;</span><span class="nx">List</span> <span class="o">/&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/main&gt;</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下記のような流れで処理されます。</p>

<ol>
<li><strong>beginWork</strong> … (HostRoot)</li>
<li><strong>beginWork …</strong>  <code>&lt;App&gt;</code> (ClassComponent)</li>
<li><strong>beginWork</strong> …  <code>&lt;main&gt;</code> (HostComponent)</li>
<li><strong>beginWork, completeWork …</strong>  <code>&lt;h2&gt;</code> (HostComponent)</li>
<li><strong>beginWork, completeWork …</strong> <code>&lt;p&gt;</code> (HostComponent)</li>
<li><strong>beginWork …</strong> <code>&lt;div&gt;</code> (HostComponent)</li>
<li><strong>beginWork …</strong> <code>&lt;Text&gt;</code> (FunctionalComponent)</li>
<li><strong>beginWork completeWork …</strong> &lsquo;&hellip;&rsquo; (HostText)</li>
<li><strong>beginWork …</strong> <code>&lt;List&gt;</code> (Functional Component)</li>
<li><strong>beginWork, completeWork …</strong> : <code>&lt;div&gt;</code> (HostComponent)</li>
<li><strong>beginWork, completeWork …</strong> : <code>&lt;div&gt;</code> (HostComponent)</li>
<li><strong>beginWork, completeWork …</strong> : <code>&lt;div&gt;</code> (HostComponent)</li>
<li><strong>commitAllWork …</strong> (HostRoot)</li>
</ol>


<p>React Fiberは、非同期renderingの場合には、後述する優先度が高くないものについてはrequestIdleCallback（サポートしてなければpolyfill実装）を使い、これらをスケジューリングして非同期に処理していきます。
requestIdleCallbackでは、アイドル時間を<code>timeRemaining</code>の関数から受け取ることができるため、この値を元に処理できる時間がなくなると再び<code>requestIdleCallback</code> に処理を登録して次のアイドル時間に処理するようになっています。
これにより、優先度が高くない処理がUIや他の処理をブロックしないようになっています。</p>

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/Window/requestIdleCallback">https://developer.mozilla.org/ja/docs/Web/API/Window/requestIdleCallback</a></li>
</ul>


<p>下記はFiberを同期モードで実行した時のスタックです。
全てが同期的に行われていることがわかります。この間はUIを完全にブロックしてしまいます。</p>

<p><img src="http://blog.koba04.com/images/posts/a-state-of-react-fiber/ReactDOMFiber-sync.png" title="'ReactDOM Fiber Sync'" ></p>

<p>下記は同じ処理を非同期で実行したスタックです。
スタックが途切れ途切れになっていることがわかります。そのためUIをブロックしません。
右端にある細いスタックはcommitWorkによるものです。
Renderingの処理はcommitWorkの以降でだけ発生していることがわかります。</p>

<p><img src="http://blog.koba04.com/images/posts/a-state-of-react-fiber/ReactDOMFiber-async.png" title="'ReactDOM Fiber Async'" ></p>

<p>このとき、HostのViewに反映するといった副作用をこのbeginWork〜completeWorkの中で行わないというのは1つのポイントです。
例えば、Viewへの反映をこの非同期処理の中で行ってしまうと、Viewが部分部分更新される形になり、UIがガタガタしてしまいます。
React Fiberでは、commitWorkで全てのViewへの更新をまとめて行うため、このようなことは起こりません。
逆にcommitWorkの部分は時間がかかりやすくframeを落としてしまうこともあるためパフォーマンスチューニングが注意深く行われています。
componentDid(Mount|Update)もこの中で行われるため、この中で重い処理を行わないように注意が必要です。</p>

<p>余談ですが、上記のようにライフサイクルメソッドがボトルネックになる場面が想定されるため、ライフサイクルメソッドをPromiseを返す非同期なAPIとする案もあります。
あと、実はマウント時はcompleteWorkでもSideEffectが処理されています。これはマウント時にはまだHostContainerはDOMに追加されていないため追加しても表示されず問題ないためです。
これもcommitWorkでframeを落とさないための工夫の1つです。</p>

<p>また、上記のようなrequestIdleCallbackを使ったスケジュール以外にも、優先度に応じたスケジューリングも可能です。
優先度は下記のように定義されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="nx">type</span> <span class="nx">PriorityLevel</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">|</span> <span class="mi">1</span> <span class="o">|</span> <span class="mi">2</span> <span class="o">|</span> <span class="mi">3</span> <span class="o">|</span> <span class="mi">4</span> <span class="o">|</span> <span class="mi">5</span> <span class="o">|</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">NoWork</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// No work is pending.</span>
</span><span class='line'>  <span class="nx">SynchronousPriority</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">// For controlled text inputs. Synchronous side-effects.</span>
</span><span class='line'>  <span class="nx">TaskPriority</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="c1">// Completes at the end of the current tick.</span>
</span><span class='line'>  <span class="nx">AnimationPriority</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="c1">// Needs to complete before the next frame.</span>
</span><span class='line'>  <span class="nx">HighPriority</span><span class="o">:</span> <span class="mi">4</span><span class="p">,</span> <span class="c1">// Interaction that needs to complete pretty soon to feel responsive.</span>
</span><span class='line'>  <span class="nx">LowPriority</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span> <span class="c1">// Data fetching, or result from updating stores.</span>
</span><span class='line'>  <span class="nx">OffscreenPriority</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span> <span class="c1">// Won&#39;t be visible but do the work in case it becomes visible.</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactPriorityLevel.js">https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactPriorityLevel.js</a></li>
</ul>


<p>更新処理に優先度を持たせることで、ユーザーインタラクションやアニメーションなどの更新処理を、APIレスポンスの反映など、優先度の低いタスクが邪魔しないようにすることができます。</p>

<p>下記はそれを表したサンプルです。「Async mode」の場合、5000個のlist itemは100ms毎に<code>LowPriority</code>で更新されます。「Sync mode」の場合は<code>SynchronousPriority</code>として同期的にレンダリングされます。</p>

<ul>
<li><a href="https://koba04.github.io/react-fiber-resources/examples/">https://koba04.github.io/react-fiber-resources/examples/</a></li>
</ul>


<p>上にある入力フィールドに何か入力してください。「Async mode」の場合は入力中はlist itemが更新されず、入力も多少引っかかりますがスムーズに反映されます。「Sync mode」の場合は入力中もlist itemが更新されてユーザーの入力を邪魔してしまっています。</p>

<p>優先度の低い処理はrequestIdleCallbackを使ってアイドル時間がある時に、優先度の高い処理はrequestAnimationFrameを使うか同期的にASAPで反映されます。</p>

<p>優先度の低いタスクを実行中に、優先度の高いタスクが割り込んで来た場合、優先度の低いタスクは中断されて、優先度の高いタスクが先に行われます。
優先度の高いタスクが終了後、再び優先度の低いタスクが実行されます。
この際、割り込まれる前に優先度の低いタスクが実行していたFiberのうち、優先度の高いタスクが処理しなかったものは再利用されます。</p>

<p>このように、タスクの割り込みによっては複数回Fiberが処理されることがあるため、非同期のレンダリングの場合には、componentWillMountなどのライフサイクルメソッドが複数回呼び出されることがあります。componentDidMountなどはcommitWorkで呼ばれるため複数回呼ばれることはありません。</p>

<p>また、OffscreenPriorityというPriorityがあります。これを利用することで初回のレンダリングでは必要ない部分をプリレンダリングしたり、ダブルバッファリングが可能となります。ReactDOMでは、<code>hidden</code>属性のあるものはOffscreenPriorityとして扱われます。</p>

<p>他にもAnimationPriorityなどのPriorityがありますが、現時点ではまだPriorityを制御するようなAPIはないため、どのように利用するのかは見えていません。（facebook.comでの非同期レンダリングの実験をやりながらAPIを決めていくらしい）</p>

<p>その他の細かい挙動については、<code>ReactIncremental-test.js</code>のテストを見るとどんなことができるのかわかるかと思います。</p>

<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/__tests__/ReactIncremental-test.js">https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/__tests__/ReactIncremental-test.js</a></li>
</ul>


<p>ここで使われている<code>ReactNoop</code> というrendererはテスト用のrendererです。UIは全く持っておらずテスト用に<code>timeRemaining</code> などが柔軟に制御可能であり、React Fiberの開発は初期の頃はこのrendererに対して行われていました。custom rendererを作る際の参考にもいいかもしれません。</p>

<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/noop/ReactNoop.js">https://github.com/facebook/react/blob/master/src/renderers/noop/ReactNoop.js</a></li>
</ul>


<h2>Error Boundary</h2>

<p>あと、Fiber自体には直接関係ないですが、Error Boundaryの機能も公式にサポートされるようになりそうです。
Error Boundaryとは、これまでは子孫Componentのrender時にエラーが発生した場合は、何も表示されなくなってしまいましたが、Error Boundaryの機能を使うことで握り潰したりエラーハンドリングができるようになるものです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">error</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// エラーハンドリングを定義する</span>
</span><span class='line'>    <span class="nx">unstable_handleError</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="nx">error</span><span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="err">エラーが発生しました</span><span class="o">&lt;</span><span class="err">/div&gt;;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">children</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>CoroutineComponent</h2>

<p>Fiberには<code>CoroutineComponent</code> や<code>CoroutineHandlerPhase</code> や<code>YieldComponent</code>といったComponentもあります。これはどうやら、親のComponentのレンダリングを途中で止めて、子のComponentからの結果を受けて親のComponentのレンダリングを再開するみたいなこともできるっぽいです（あんまりわかってない）。例えばレイアウトを行うComponentで子を実際にレンダリングしてみて、サイズなどの結果を持って親のComponentを再度レンダリングするみたいなことが、ユースケースとしてどこかで説明されていました。</p>

<p>これの動作については、上記であげた<code>ReactCoroutin-test.js</code> の中にあるので見てみるといいかと思います。状態としてはとりあえず動いてるっぽいという感じだとは思います。</p>

<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/__tests__/ReactCoroutine-test.js">https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/__tests__/ReactCoroutine-test.js</a></li>
</ul>


<h2>Custom Renderer</h2>

<p>Stackでは、Custom Rendererを作成するためにはハックが必要でしたが、React FiberではFlowによって型付けされているため、わかりやすくなりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="nx">type</span> <span class="nx">HostConfig</span><span class="o">&lt;</span><span class="nx">T</span><span class="p">,</span> <span class="nx">P</span><span class="p">,</span> <span class="nx">I</span><span class="p">,</span> <span class="nx">TI</span><span class="p">,</span> <span class="nx">PI</span><span class="p">,</span> <span class="nx">C</span><span class="p">,</span> <span class="nx">CX</span><span class="p">,</span> <span class="nx">PL</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">getRootHostContext</span><span class="p">(</span><span class="nx">rootContainerInstance</span><span class="o">:</span> <span class="nx">C</span><span class="p">)</span><span class="o">:</span> <span class="nx">CX</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">getChildHostContext</span><span class="p">(</span><span class="nx">parentHostContext</span><span class="o">:</span> <span class="nx">CX</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="nx">T</span><span class="p">)</span><span class="o">:</span> <span class="nx">CX</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">getPublicInstance</span><span class="p">(</span><span class="nx">instance</span><span class="o">:</span> <span class="nx">I</span> <span class="o">|</span> <span class="nx">TI</span><span class="p">)</span><span class="o">:</span> <span class="nx">PI</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">createInstance</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">props</span><span class="o">:</span> <span class="nx">P</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">rootContainerInstance</span><span class="o">:</span> <span class="nx">C</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">hostContext</span><span class="o">:</span> <span class="nx">CX</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">internalInstanceHandle</span><span class="o">:</span> <span class="nx">OpaqueHandle</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span><span class="o">:</span> <span class="nx">I</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">appendInitialChild</span><span class="p">(</span><span class="nx">parentInstance</span><span class="o">:</span> <span class="nx">I</span><span class="p">,</span> <span class="nx">child</span><span class="o">:</span> <span class="nx">I</span> <span class="o">|</span> <span class="nx">TI</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">finalizeInitialChildren</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">parentInstance</span><span class="o">:</span> <span class="nx">I</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">props</span><span class="o">:</span> <span class="nx">P</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">rootContainerInstance</span><span class="o">:</span> <span class="nx">C</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">prepareUpdate</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">instance</span><span class="o">:</span> <span class="nx">I</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">oldProps</span><span class="o">:</span> <span class="nx">P</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">newProps</span><span class="o">:</span> <span class="nx">P</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">rootContainerInstance</span><span class="o">:</span> <span class="nx">C</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">hostContext</span><span class="o">:</span> <span class="nx">CX</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span><span class="o">:</span> <span class="kc">null</span> <span class="o">|</span> <span class="nx">PL</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">commitUpdate</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">instance</span><span class="o">:</span> <span class="nx">I</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">updatePayload</span><span class="o">:</span> <span class="nx">PL</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">oldProps</span><span class="o">:</span> <span class="nx">P</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">newProps</span><span class="o">:</span> <span class="nx">P</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">internalInstanceHandle</span><span class="o">:</span> <span class="nx">OpaqueHandle</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">commitMount</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">instance</span><span class="o">:</span> <span class="nx">I</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">newProps</span><span class="o">:</span> <span class="nx">P</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">internalInstanceHandle</span><span class="o">:</span> <span class="nx">OpaqueHandle</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">shouldSetTextContent</span><span class="p">(</span><span class="nx">props</span><span class="o">:</span> <span class="nx">P</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">resetTextContent</span><span class="p">(</span><span class="nx">instance</span><span class="o">:</span> <span class="nx">I</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">shouldDeprioritizeSubtree</span><span class="p">(</span><span class="nx">type</span><span class="o">:</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">props</span><span class="o">:</span> <span class="nx">P</span><span class="p">)</span><span class="o">:</span> <span class="kr">boolean</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">createTextInstance</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">text</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">rootContainerInstance</span><span class="o">:</span> <span class="nx">C</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">hostContext</span><span class="o">:</span> <span class="nx">CX</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">internalInstanceHandle</span><span class="o">:</span> <span class="nx">OpaqueHandle</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span><span class="o">:</span> <span class="nx">TI</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">commitTextUpdate</span><span class="p">(</span><span class="nx">textInstance</span><span class="o">:</span> <span class="nx">TI</span><span class="p">,</span> <span class="nx">oldText</span><span class="o">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">newText</span><span class="o">:</span> <span class="nx">string</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">appendChild</span><span class="p">(</span><span class="nx">parentInstance</span><span class="o">:</span> <span class="nx">I</span> <span class="o">|</span> <span class="nx">C</span><span class="p">,</span> <span class="nx">child</span><span class="o">:</span> <span class="nx">I</span> <span class="o">|</span> <span class="nx">TI</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">insertBefore</span><span class="p">(</span><span class="nx">parentInstance</span><span class="o">:</span> <span class="nx">I</span> <span class="o">|</span> <span class="nx">C</span><span class="p">,</span> <span class="nx">child</span><span class="o">:</span> <span class="nx">I</span> <span class="o">|</span> <span class="nx">TI</span><span class="p">,</span> <span class="nx">beforeChild</span><span class="o">:</span> <span class="nx">I</span> <span class="o">|</span> <span class="nx">TI</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">removeChild</span><span class="p">(</span><span class="nx">parentInstance</span><span class="o">:</span> <span class="nx">I</span> <span class="o">|</span> <span class="nx">C</span><span class="p">,</span> <span class="nx">child</span><span class="o">:</span> <span class="nx">I</span> <span class="o">|</span> <span class="nx">TI</span><span class="p">)</span><span class="o">:</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">scheduleAnimationCallback</span><span class="p">(</span><span class="nx">callback</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">)</span><span class="o">:</span> <span class="nx">number</span> <span class="o">|</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">scheduleDeferredCallback</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">callback</span><span class="o">:</span> <span class="p">(</span><span class="nx">deadline</span><span class="o">:</span> <span class="nx">Deadline</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>  <span class="p">)</span><span class="o">:</span> <span class="nx">number</span> <span class="o">|</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">prepareForCommit</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">resetAfterCommit</span><span class="p">()</span><span class="o">:</span> <span class="k">void</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">useSyncScheduling</span><span class="o">?:</span> <span class="kr">boolean</span><span class="p">,</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactFiberReconciler.js">https://github.com/facebook/react/blob/master/src/renderers/shared/fiber/ReactFiberReconciler.js</a></li>
</ul>


<p>実際に実装する際には、先ほど紹介した<code>ReactNoop</code> や、Test用のrendererでありReactElementからJSONを返す<code>ReactTestRenderer</code> や<code>ReactART</code> などが参考になると思います。</p>

<ul>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/testing/ReactTestRendererFiber.js">https://github.com/facebook/react/blob/master/src/renderers/testing/ReactTestRendererFiber.js</a></li>
<li><a href="https://github.com/facebook/react/blob/master/src/renderers/art/ReactARTFiber.js">https://github.com/facebook/react/blob/master/src/renderers/art/ReactARTFiber.js</a></li>
</ul>


<p>ただ、Reactはv16からFlat bundleになり、内部ライブラリーを<code>react/lib/xxx</code>のように利用出来なくなったので、Custom Renderer作る人向けに何かが提供されるのかは不明なところです。</p>

<h2>Server Side Rendering</h2>

<p>サーバーサイドレンダリングについては、Facebookで使っていないということもあり後回しになっていて、まだ実装されていません。
ただ、今までの<code>renderToString</code> は完全に同期でしたが、ReactFiberになることでイベントループをブロックしないようにHTML文字列を生成することは簡単になりそうです（v16には入るかどうかは不明）。<code>renderToStream</code> みたいなのは、副作用はcommitWorkでまとめてやるというところからは外れてしまうのでどうなんでしょうね。</p>

<h2>v16でも非同期レンダリングを試したい</h2>

<ul>
<li>現時点では、<code>ReactDOMFeatureFlags</code> に<code>fiberAsyncScheduling</code> というフラグがあるので、それを無理やり<code>true</code> に書き換えることでデフォルトで非同期のレンダリングに出来ます。ただまだそんなにテストされていないと思うのでバグなどはありそうです</li>
<li>または、<code>ReactDOM.unstable_deferredUpdates</code> を使うとその中の更新処理は<code>lowPriority</code> として処理されるため、非同期となります</li>
</ul>


<h2>その他リソース</h2>

<p>Fiberで何が嬉しいのかを知りたい人は、F8のTom OcchinoのTalkがとてもわかりやすいと思います。</p>

<ul>
<li>The Evolution of React and GraphQL at Facebook and Beyond

<ul>
<li><a href="https://developers.facebook.com/videos/f8-2017/the-evolution-of-react-and-graphql-at-facebook-and-beyond/">https://developers.facebook.com/videos/f8-2017/the-evolution-of-react-and-graphql-at-facebook-and-beyond/</a></li>
</ul>
</li>
</ul>


<p>Lin ClarkがReact ConfでCode Cartoonを使ってReact Fiberについて説明していたのもわかりと思います。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ZCuYPiUIONs?ecver=1" frameborder="0" allowfullscreen></iframe>


<p>あとはSebastian MarkbågeのReact ConfのキーノートでもReact Fiberについて触れられています。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/bvFpe5j9-zQ?ecver=1" frameborder="0" allowfullscreen></iframe>


<p>あとは、個人的にReact Fiberについてまとめたリポジトリもあります。</p>

<ul>
<li><a href="https://github.com/koba04/react-fiber-resources">https://github.com/koba04/react-fiber-resources</a></li>
</ul>


<h2>で結局何が嬉しいの？</h2>

<p>React Fiberに変わることで、よくフレームワークのパフォーマンス比較にあるようなベンチマークのスコアがよくなるといったことはおそらくないと思います。
React Fiberになることで、これまで同期的にツリーを処理していくしかなかったものが非同期に、より柔軟に処理出来るようになるのがメリットです。
これにより、アニメーションやユーザーのインタラクションに対して可能な限り早く反応出来るように出来ます。また、このような基盤としてReact Fiberがあるので、今後そういった機能追加が行われていくのではないかと思います。</p>

<p>というで、v16ではそんなに変わりませんが、今後の機能追加を楽しみにしましょう。
また、React Fiberの実装も勉強になるので興味のある人は是非読んでみてください。</p>

<p>ちなみにReact Fiberの最初のPRはこれのようですね。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/6690">https://github.com/facebook/react/pull/6690</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React v15.5(6) and v16]]></title>
    <link href="http://blog.koba04.com/post/2017/04/14/react-dot-js-v155-and-v16/"/>
    <updated>2017-04-14T14:00:05+09:00</updated>
    <id>http://blog.koba04.com/post/2017/04/14/react-dot-js-v155-and-v16</id>
    <content type="html"><![CDATA[<p>Reactのv15.5がリリースされたので、v15.5での変更点とv16についてのまとめです。</p>

<ul>
<li><a href="https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html">https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html</a></li>
</ul>


<p>v15.5はバグフィックスとv16での変更点に対する準備なので、可能ならあげておいた方がスムーズにv16がリリースされた時に対応できると思います。</p>

<p>基本的には、v16で色々と廃止するための警告が主になります。
最近のバージョンと同様に、コアから必要なもの以外をどんどん削ぎ落としていく流れです。</p>

<p>この警告に対応するために、Enzymeなどでは利用するために必要なライブラリーが変更されているので更新する際には注意が必要です。</p>

<p>また、当初の予定ではv15.5がv15系の最後のリリースになる予定でしたが、上記のような混乱もあったためフォローアップとしてv15.6もリリースされることになりました。
なので、v15.6がリリースされてから対応するのもアリだと思います。</p>

<p>廃止されるものは色々ありますが、基本的に全てのものに対してマイグレーションのパスは提供されているので対応可能だと思います。
ただ、アクティブにメンテされていないくて15.5対応版をリリースしていないライブラリーを使っていると色々警告が出ると思います。
場合によっては、その警告によってテストが壊れることがあるかもしれません。</p>

<!-- more -->


<h2>Deprecated React.createClass</h2>

<p>廃止されること自体は前から言われていたので、使わないようにしていた人も多いと思いますが、<code>create-react-class</code>として別パッケージとなり、v16では<code>react</code>から削除されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">createReactClass</span> <span class="nx">from</span> <span class="s1">&#39;create-react-class&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>そのためv15.5では、<code>React.createClass</code>を使おうとすると警告が出ます。</p>

<p>自分の書いたコードで<code>React.createClass</code>を使っている場合は、<code>React.Component</code>を使ったComponent定義かStateless Functional Componentsに書き換える必要があります。</p>

<p>mixinを使っているなど、どうしても<code>React.createClass</code>を使いたい場合は<code>create-react-class</code>を使うこともできますが、可能な限りReact本体が提供する方法を利用する方がいいと思います。</p>

<p><code>React.createClass</code>から<code>React.Component</code>の定義に書き換えるcodemodも提供されているので、使ってみるのもいいかもしれません。</p>

<ul>
<li><a href="https://github.com/reactjs/react-codemod">https://github.com/reactjs/react-codemod</a></li>
</ul>


<p>このcodemodでは、<code>React.createClass</code>が提供するautobindを実現するために、property initializerのシンタックスを利用します。そのため、変換後は<code>babel-plugin-transform-class-properties</code>を使用する必要があります。(Stage 2)</p>

<ul>
<li><a href="http://babeljs.io/docs/plugins/transform-class-properties/">http://babeljs.io/docs/plugins/transform-class-properties/</a></li>
</ul>


<p>v16になった時点で<code>React.createClass</code>を使っているライブラリーを利用している場合には、PR送って対応してもらうか、<code>React.createClass</code>に<code>create-react-class</code>を代入するなどの対応が必要になるかもしれません。
(v15.5では、警告を出すために<code>React.createClass</code>には<code>Object.defineProperty</code>でgetterが設定されており、<code>configurable</code>でないので置き換えることはできません)</p>

<h2>Deprecated React.PropTypes</h2>

<p>これも、<code>React.createClass</code>と同様にずっと言われていましたが、<code>prop-types</code>として別パッケージとなり、v16では<code>react</code>から削除されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">PropTypes</span> <span class="nx">from</span> <span class="s1">&#39;prop-types&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>そのためv15.5では、<code>React.PropTypes</code>を使おうとすると警告が出るようになりました。</p>

<p>これもcodemodが提供されているので、それを使って一括で変換することができます。</p>

<ul>
<li><a href="https://github.com/reactjs/react-codemod#react-proptypes-to-prop-types">https://github.com/reactjs/react-codemod#react-proptypes-to-prop-types</a></li>
</ul>


<p>PropTypesに関しては、FlowやTypeScriptへの移行が勧められているもののハードルもあるので、別パッケージ化された<code>prop-types</code>をしばらく使い続けるのは選択肢としてあるのかなと思います。
今回別パッケージとなったのは組み込みのPropTypesのvalidationロジックであり、PropTypesのチェック機構自体がなくなることは、まだ予定されていないので。</p>

<p>ちなみに、将来的にAPIの変更が予定されているContextを使う場合にも、変わらず<code>prop-types</code>を使って指定します。
（実際には<code>contextTypes</code>の定義でマスクしているだけなので、<code>prop-types</code>を使う必要はないのですが）</p>

<h2>Deprecated Addons</h2>

<p>React本体がアドオンとして提供していた諸々が、廃止されたり別パッケージ化したり、移動したりしています。
v16では、<code>react-with-addons</code>のUMDビルドも提供されなくなります。</p>

<ul>
<li><code>react-addons-create-fragment</code>は、v16のFiber化により配列を返すことができるようになるため、多くの場面で不要となるので削除されます。</li>
<li><code>react-addons-css-transition-group</code>と<code>react-addons-transition-group</code>は、<code>react-transition-group</code>の別パッケージになりました。<code>CSSTransitionGroup</code>と<code>TransitionGroup</code>して利用できます。ただし、全く実装が一緒というわけではないので移行する際には注意が必要です。すでに修正済みですが下記のようなバグとかもあったりするので&hellip;。

<ul>
<li><a href="https://github.com/reactjs/react-transition-group">https://github.com/reactjs/react-transition-group</a></li>
<li><a href="https://github.com/reactjs/react-transition-group/pull/13">https://github.com/reactjs/react-transition-group/pull/13</a></li>
</ul>
</li>
<li><code>react-addons-linked-state-mixin</code>と<code>react-linked-input</code>は、明示的に<code>value</code>と<code>onChange</code>を指定すればいいので削除されます。</li>
<li><code>react-addons-pure-render-mixin</code>と<code>react-addons-shallow-compare</code>は、<code>React.PureComponent</code>を代わりに利用できます。</li>
<li><code>react-addons-update</code>は<code>immutability-helper</code>が代わりに利用できます。

<ul>
<li><a href="https://github.com/kolodny/immutability-helper">https://github.com/kolodny/immutability-helper</a></li>
</ul>
</li>
</ul>


<p><code>react-addons-test-utils</code>は、<code>react-dom</code>のrendererに依存している部分が多いため、<code>react-dom/test-utils</code>に移動されました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">TestUtils</span> <span class="nx">from</span> <span class="s1">&#39;react-dom/test-utils&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ShallowRenderに関しては<code>react-dom</code>に依存していないため、<code>react-test-renderer/shallow</code>に移動されました。
ちなみに<code>react-test-renderer</code>はJestがsnapshot testingで使っていたりする、ReactElementをJSONとして返すrendererです。
ShallowRenderは、これのトップレベルのComponentまでしかrenderしない版として考えることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">createRenderer</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-test-renderer/shallow&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><del><code>react-addons-perf</code>だけは、特に何もなくこのままですが、<code>react-addons-perf</code>は同期的なrenderが前提となっているため、将来的にFiberで非同期的なrenderをする場合には正しく計測できません。</del></p>

<p><strong>[修正]</strong> <code>react-addons-perf</code>は同期的なrenderが前提となっていてFiberへの対応が難しいため、v16(Fiber)への対応は行われません。
Perfに変わる何かについては検討されるので、将来的に何か提供される可能性もありますが、とりあえずは<code>?react_perf</code>によるBrowser Timelineを使った計測が推奨されています。</p>

<ul>
<li><a href="https://facebook.github.io/react/docs/optimizing-performance.html#profiling-components-with-chrome-timeline">https://facebook.github.io/react/docs/optimizing-performance.html#profiling-components-with-chrome-timeline</a></li>
</ul>


<h2>15.6（予定）</h2>

<p><a href="https://github.com/facebook/react/issues/9398">https://github.com/facebook/react/issues/9398</a></p>

<ul>
<li><code>React.DOM.{p, div,...}</code>として提供されていたファクトリ関数が廃止となります。</li>
<li>APIの廃止などの警告は、これまでは<code>console.error</code>として出力されていましたが、<code>console.warn</code>で出力されるようになります。</li>
</ul>


<h2>16に向けて</h2>

<p>v16はすでに<code>@next</code>でインストールできます。
そのため、まだ実装されていないサーバーサイドレンダリングとShallowRenderを使っていない部分では試すことが可能です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">npm</span> <span class="nx">i</span> <span class="nx">react</span><span class="err">@</span><span class="nx">next</span> <span class="nx">react</span><span class="o">-</span><span class="nx">dom</span><span class="err">@</span><span class="nx">next</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Fiber</h3>

<p>v16の一番大きな目玉は、Fiberに内部実装が置き換えられることです。
ただし、v16の時点ではFiberは現在のStackのrendererと互換性のあるモードで動作します。
そのため、Fiberの特徴である<code>requestIdleCallback</code>によってスケジューリングされた非同期なrenderではなく、同期的なrenderとなるため、利用者として大きな違いは感じないかもしれません。
（call stack見ると全く変わっていることがわかると思いますが）</p>

<p>文字列や配列をComponentでラップすることなく直接返すことができるのは嬉しい部分かもしれません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Text</span> <span class="o">=</span> <span class="p">({</span><span class="nx">text</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">text</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">List</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、v16の時点でも<code>ReactDOM.unstable_deferredUpdates</code>を使うことで、非同期なrenderが出来るようにはなりそうです。
あとは、<code>ReactDOMFiber.js</code>にある<code>useSyncScheduling</code>というフラグを無理やり<code>false</code>にすればデフォルトで非同期なrenderになります。（軽く試した感じだと問題なく動いていた）</p>

<p>非同期のrenderをどのようにユーザー側のAPIとして見せるのかは、まだ明らかになっていなくてこれから議論していくようです。</p>

<p>Fiberについては、下記に集めたリソースを読むとわかると思います。（今後紹介的な何かを書くかも）</p>

<ul>
<li><a href="https://github.com/koba04/react-fiber-resources">https://github.com/koba04/react-fiber-resources</a></li>
</ul>


<p>最初に見るものとしてのおすすめは、Lin ClarkによるA Cartoon Intro to Fiber(React.js Conf 2017)です。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ZCuYPiUIONs?ecver=1" frameborder="0" allowfullscreen></iframe>


<p>互換モードによるFiber自体はfacebook.comでも問題なく動作しているようです。
ただし、サーバーサイドレンダリングに対する対応は、まだ全く入っておらず今後どうなっていくのかは不明です。FiberになるとStreaming renderingもやりやすくなるのではとは思いますが。</p>

<h3>No more direct import!</h3>

<p>v16からは、それぞれのエントリーポイントがRollupを使ってバンドルされたものになります。
なので下のような構造になります。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">react@next and react-dom@next are flat bundles! 👀 <a href="https://twitter.com/hashtag/reactjs?src=hash">#reactjs</a> <a href="https://t.co/5ezjjf08sd">pic.twitter.com/5ezjjf08sd</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/850180571653222400">April 7, 2017</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>これにより、初期ロード時間の短縮やサーバーサイドでのパフォーマンスの向上が見込まれています。
また、利用者側には関係ないですがビルド周りが見直されており、GruntやgulpやBrowserifyのタスクがリポジトリから削除されています。すっきり。</p>

<p>この変更による、一番大きな影響は<code>react/lib/xxxx</code>として直接Reactの内部ライブラリを利用しているライブラリが動作しなくなることです。
<code>enzyme</code>などのメジャーなライブラリはReact側でもケアされていますが、それ以外のライブラリーは壊れてどうにもならなくなることがあるかもしれません。
したがって、そのようなハックをしているライブラリーを利用している場合は注意した方がよさそうです。</p>

<h3>リリース？</h3>

<p>ちなみにv16は、夏くらい(?)をターゲットに考えているようです。</p>

<p>また何か動きがあれば追記するかも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.12]]></title>
    <link href="http://blog.koba04.com/post/2016/09/30/reactjs-links-vol12/"/>
    <updated>2016-09-30T14:00:10+09:00</updated>
    <id>http://blog.koba04.com/post/2016/09/30/reactjs-links-vol12</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.3.2</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.3.2">https://github.com/facebook/react/releases/tag/v15.3.2</a></li>
</ul>


<p>React v15.3.2がリリースされています。
細かなバグフィックスなどが中心です。</p>

<h2>Our First 50,000 Stars</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/09/28/our-first-50000-stars.html">https://facebook.github.io/react/blog/2016/09/28/our-first-50000-stars.html</a></li>
</ul>


<p>ReactのGitHubでのstarが50,000を超えたことを記念するエントリーです。
Reactの前にはFaxJSというのがあって〜など、Reactが誕生するまでの流れの話などとても面白いです。</p>

<h2>Codebase Overview</h2>

<ul>
<li><a href="https://facebook.github.io/react/contributing/codebase-overview.html">https://facebook.github.io/react/contributing/codebase-overview.html</a></li>
</ul>


<p>React本体のコードについての解説です。
Reactを使う人にとってはほとんど知る必要のないことですが、contributeしたい場合にはとても役に立つドキュメントです。
特に<code>Haste</code>とというCommonJSではないFacebook独自のモジュールシステムを使っていたりするので&hellip;。
最初からこれがあれば&hellip;。</p>

<h2>If TypeScript is so great, how come all notable ReactJS projects use Babel?</h2>

<ul>
<li><a href="https://discuss.reactjs.org/t/if-typescript-is-so-great-how-come-all-notable-reactjs-projects-use-babel/4887">https://discuss.reactjs.org/t/if-typescript-is-so-great-how-come-all-notable-reactjs-projects-use-babel/4887</a></li>
</ul>


<p>TypeScriptが最高なら、どうしてReact周りのプロジェクトはみんなBabelを使っているの？という疑問に対するスレッドです。
FlowTypeとTypeScriptの違いなどの話も登場して面白いです。</p>

<h2>Redux Patterns and Anti-Patterns</h2>

<ul>
<li><a href="https://tech.affirm.com/redux-patterns-and-anti-patterns-7d80ef3d53bc">https://tech.affirm.com/redux-patterns-and-anti-patterns-7d80ef3d53bc</a></li>
</ul>


<p>Reduxでのアンチパターンについての記事です。
Immutable.jsと組み合わせた場合や、redux-thunkでのAPIアクセスの書き方について解説されています。</p>

<h2>You Might Not Need Redux</h2>

<ul>
<li><a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367">https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367</a></li>
</ul>


<p>Dan Abramov自身によるエントリーで、何も考えずにとりあえずRedux使うのをやめようという記事です。</p>

<h2>Declarative Routing for React</h2>

<ul>
<li><a href="https://react-router-website-uxmsaeusnn.now.sh/">https://react-router-website-uxmsaeusnn.now.sh/</a></li>
</ul>


<p>react-router v4についてのページです。
react-routerでは、Reactのためのルーティングライブラリーではなく、Reactを使ったルーティングライブラリーになっています。
そのため、<code>Match</code>や<code>Redirect</code>といったComponentが登場しており、議論を呼びそうな感じの変わり方をしています。
（反応を見ていると、概ねポジティブに捉えられているのがビックリですが）</p>

<h2>AMA with Redux</h2>

<ul>
<li><a href="https://hashnode.com/ama/with-redux-cisteui6p005gzx53fstg8t6l">https://hashnode.com/ama/with-redux-cisteui6p005gzx53fstg8t6l</a></li>
</ul>


<p>Reduxの作者であるDan Abramovと初期からの開発者であるAndrew ClarkによるAMAです。
Reduxについての実際に作った人たちの考えが説明されているので、興味のある人は読むといいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js meetup #4]]></title>
    <link href="http://blog.koba04.com/post/2016/09/30/reactjs-meetup-vol4/"/>
    <updated>2016-09-30T13:56:56+09:00</updated>
    <id>http://blog.koba04.com/post/2016/09/30/reactjs-meetup-vol4</id>
    <content type="html"><![CDATA[<p>前回が2月だったので約半年振りですが、React.js meetup #4を開催しました。</p>

<ul>
<li><a href="http://reactjs-meetup.connpass.com/event/39793/">http://reactjs-meetup.connpass.com/event/39793/</a></li>
</ul>


<p>今回は <strong>67/80人</strong> の方が参加してくださりました！感謝！</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">たくさんの方に参加してもらって感謝！！ <a href="https://twitter.com/hashtag/reactjs_meetup?src=hash">#reactjs_meetup</a> <a href="https://t.co/1tTO5gKDxP">pic.twitter.com/1tTO5gKDxP</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/780747386251415552">September 27, 2016</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>今回も、前回同様にサイボウズさんに会場を提供して頂き開催することができました。
 サイボウズの皆様、参加者の皆様、発表者の皆様ありがとうございました！！</p>

<!-- more -->


<h2>本編</h2>

<p>今回はメインのTalk(20min)が4本、LT(10min)が4本とかなり多く、さらにそれぞれのTalkもかなり濃かったので、その場では消化しきれなかった方も多かったのではないでしょうか。
資料も公開されているので、是非見返してみてください。</p>

<ul>
<li><a href="http://reactjs-meetup.connpass.com/event/39793/presentation/">http://reactjs-meetup.connpass.com/event/39793/presentation/</a></li>
</ul>


<p>Tweetはここにまとめてあります。</p>

<ul>
<li><a href="http://togetter.com/li/1029915">http://togetter.com/li/1029915</a></li>
</ul>


<p>さらに今回は、直前に<a href="https://twitter.com/cpojer">@cpojer</a>さんから、ちょうど日本にいるタイミングなので参加したいという連絡があり、急遽JestについてのLTをしてもらいました。</p>

<p>Jestは、最近になってものすごい勢いで開発されていて、全く別のライブラリーと言えるくらい進化しているので、それを紹介できる機会になってよかったなぁと思っています。</p>

<ul>
<li><a href="http://facebook.github.io/jest/">http://facebook.github.io/jest/</a></li>
</ul>


<p>後、これまでは先着での受付にしていたのですが、すぐに埋まってしまうので今回は抽選にしました。
Twitterのpollを見る感じでも、抽選の方がよさそうですね。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">ちなみに次回 <a href="https://twitter.com/hashtag/reactjs_meetup?src=hash">#reactjs_meetup</a> やるとしたら、募集方法は抽選と先着のどちらがいいですか？</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/780705408335753222">September 27, 2016</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>React.js meetupについて</h2>

<p>そういえば、React.js meetupをどんな感じでやっているかを書いてなかったので、少しだけ書いてみます。</p>

<p>React.js meetupは、メインのTalkは全てこちらからお願いして決めています。
<a href="https://twitter.com/koba04">@koba04</a> が個人的に聞きたいものや多くの人が関心のありそうなテーマから選んでいます。
それを普段からアウトプットしている方にお願いしています。</p>

<p>その結果、React.js meetupはクオリティの高いTalkが聞ける場だと思ってもらえていたら嬉しいなと思っています。</p>

<p>LTは、新しい発見の場として募集で受付けています。5minだと短いので10minで。
(これはNode学園を参考にしました)</p>

<p>毎回面白いTalkが多いのでいつも楽しみにしています。</p>

<p>それを<a href="https://twitter.com/yosuke_furukawa">@yosuke_furukawa</a>や<a href="https://twitter.com/teppeis">@teppeis</a>や<a href="https://twitter.com/yoshiko_pg">@yoshiko_pg</a>や、<a href="https://twitter.com/ama_ch">@ama_ch</a>に相談したり、会場を探したり、色々と準備を手伝ってもらいながら運営しています。</p>

<p>（<a href="http://reactjs-meetup.connpass.com/event/19504/">#2</a>に関しては、別のイベントとしてすでにあったものをReact.js meetupという名前を使う形にしたのでちょっと違いますが）</p>

<p>そんな感じで小さくやっているので、あまり規模を拡大したり、頻繁に開催するといったことは考えていません。
すでにReactに関するイベントはたくさん行なわれていると思うので。</p>

<p>基本的には、自分たちが楽しむためにやっている感じです。
聞きたいTalkを聞いて、参加者の人とディスカッションして。
（参加したけど知っている人がいないという人は是非声かけてください！）</p>

<p>実際のところ、当日は事前に懇親会の食べ物・飲み物を頼んでいたりするので参加率を気にしたり、ピザの配達状況を確認したりしているので、正直ちゃんとTalk聞けていないのですが&hellip;。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/reactjs_meetup?src=hash">#reactjs_meetup</a> <br>yield pizza;<br><br>とのこと <a href="https://t.co/RDGQgcMKsz">pic.twitter.com/RDGQgcMKsz</a></p>&mdash; Yosuke FURUKAWA (@yosuke_furukawa) <a href="https://twitter.com/yosuke_furukawa/status/780737219464007682">September 27, 2016</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>次回？</h2>

<p>今のところ、特に考えていないので、何か話したいこととか、聞きたいテーマなどあれば教えてください！
今回は詰め込みすぎたので、次回はメインのTalkは2本くらいにしようと思っています。</p>

<p>来年かな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.11]]></title>
    <link href="http://blog.koba04.com/post/2016/09/07/reactjs-links-vol11d/"/>
    <updated>2016-09-07T19:26:04+09:00</updated>
    <id>http://blog.koba04.com/post/2016/09/07/reactjs-links-vol11d</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Meeting Notes</h2>

<p>7/21, 28, 8/4, 25のMeeting Noteがまとめて公開されました。</p>

<p><code>React.createClass</code>のES classes化については、引き続き進められているようで、すでに80%がES classesになったそうです。
Public Class Fieldsがstage2になったことも紹介されています。</p>

<p>その他には、<code>create-react-app</code>をリリースしたことや、そこでのJestサポートについても紹介されています。
また7/28のMeeting Noteでは、Reconcilerの位置付けについて解説されています。Reconcilerはrendererに属するものであり、react本体にはComponentやReactElementを作成する部分のみが含まれているという形です。
それにより、新しいReactFiberのReconcilerの導入もすでにあるReact Componentに手を入れることなくできるとしています。</p>

<p>（Reactの中では、完全にrenderer毎にコードが分かれているわけではなくて、共通化されている部分もありますが）</p>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-07/july-21.md">https://github.com/reactjs/core-notes/blob/master/2016-07/july-21.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-07/july-28.md">https://github.com/reactjs/core-notes/blob/master/2016-07/july-28.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-08/august-04.md">https://github.com/reactjs/core-notes/blob/master/2016-08/august-04.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-08/august-25.md">https://github.com/reactjs/core-notes/blob/master/2016-08/august-25.md</a></li>
</ul>


<h2>PATTERNS FOR STYLE COMPOSITION IN REACT</h2>

<p>CSS in JSでのパターン集です。</p>

<ul>
<li><a href="http://jxnblk.com/writing/posts/patterns-for-style-composition-in-react/">http://jxnblk.com/writing/posts/patterns-for-style-composition-in-react/</a></li>
</ul>


<h2>Strip flow-only class props without needing transform-class-properties. #3655 (Babel)</h2>

<p><code>babel-plugin-transform-flow-strip-types</code>でtype annotationのためだけに使われているclass propertiesを削除するというPRです。
これがmergeされると、Flowのtype annotationのためだけに<code>babel-plugin-transform-class-properties</code>を追加する必要はなくなります。</p>

<ul>
<li><a href="https://github.com/babel/babel/pull/3655">https://github.com/babel/babel/pull/3655</a></li>
</ul>


<h2>exponentjs/exponent</h2>

<p>ReactEurope 2016でAndroid版の事例を紹介していたReactNativeで作られたExponentのiOS/Android版が公開されています。</p>

<ul>
<li><a href="https://github.com/exponentjs/exponent">https://github.com/exponentjs/exponent</a></li>
</ul>


<h2>react-history</h2>

<p><code>history</code>をラップしたようなReactComponentです。
<code>react-router</code>のv4はこれを使うというような話もあり、あいかわらず落ち着かない感じです&hellip;。</p>

<ul>
<li><a href="https://github.com/ReactTraining/react-history">https://github.com/ReactTraining/react-history</a></li>
</ul>


<h2>Animating in React</h2>

<p>ReactでのAnimationの方法についてのスライドです。
codepenによるサンプルも多く埋め込まれており、とてもわかりやすいです。</p>

<p>CSS、DOM、SVG、Canvasなどによるアプローチの比較や、react-motionなどライブラリーに関する解説もあり、アニメーションで悩んでいる人にはおすすめのスライドです。</p>

<ul>
<li><a href="http://slides.com/sdrasner/react-rally#/">http://slides.com/sdrasner/react-rally#/</a></li>
</ul>


<h2>Async Redux Actions With RxJS</h2>

<p>NetflixのエンジニアでRxJSの開発者であるBen Leshによる、redux-observableを使ってReduxとRxJSを組み合わせる話です。
なぜReduxにRxJSを組み合わせる必要があるのか、redux-observableにあるEpicとは何なのかということがわかりやすく解説されています。</p>

<ul>
<li><a href="http://www.slideshare.net/benlesh1/async-redux-actions-with-rxjs-react-rally-2016">http://www.slideshare.net/benlesh1/async-redux-actions-with-rxjs-react-rally-2016</a></li>
</ul>


<h2>React: Facebook&rsquo;s Functional Turn on Writing JavaScript</h2>

<p>Reactの初期の開発者であるPete Huntと、現在の開発者であるPaul O&#8217;Shannessyに対するReactに関するインタビューです。
Reactの思想などについて語られていて、面白いです。</p>

<ul>
<li><a href="http://queue.acm.org/detail.cfm?id=2994373">http://queue.acm.org/detail.cfm?id=2994373</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.10]]></title>
    <link href="http://blog.koba04.com/post/2016/08/10/react-dot-js-links-vol-dot-10/"/>
    <updated>2016-08-10T14:09:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/08/10/react-dot-js-links-vol-dot-10</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。
10回目!!!</p>

<!-- more -->


<h2>React v15.3.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.3.0">https://github.com/facebook/react/releases/tag/v15.3.0</a></li>
</ul>


<p>Reactのv15.3.0がリリースされました。</p>

<p>今回の大きな変更点は、<code>React.PureComponent</code>の追加です。
これは、PureRenderMixinのES Classes版というような実装で、自動的に<code>shouldComponentUpdate</code>にshallowEqualが適用されるというものです。
最初このPRが出された時には、内部のStateless Functional Componentにも最適化が適用されるという実装も含まれていましたが、PR内での議論で問題点などが見えたため、今回はただのPureRenderMixin for ES Claseesとして入りました。</p>

<p>今後、v16のタイミングなどでさらなる最適化が追加される可能性はあります。</p>

<p>もう一つ、大きな点は<code>react-test-render</code>というパッケージのリリースです。
これは、TestUtilsのShallowRenderと似ていますが、Shallowではなく子孫までrenderして結果をReactElementのJSONとして返します。
refやライフサイクルメソッドなどが呼ばれる点もShallowRenderとは異なります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">renderer</span> <span class="nx">from</span> <span class="s1">&#39;react-test-renderer&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">renderer</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">).</span><span class="nx">toJSON</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Jestにはこれを使ったsnapshottestが追加されました。</p>

<h2>Create Apps with No Configuration</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html">https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html</a></li>
<li><a href="https://github.com/facebookincubator/create-react-app">https://github.com/facebookincubator/create-react-app</a></li>
</ul>


<p>Reactを使ったSingle Page Applicationのひな形を作成している公式のcliがリリースされました。
これまでFacebookは自分たちが実際にプロダクトで使っているものだけをOSSにする方針でしたが、今回はコミュニティーの声に応えて作成したものです。</p>

<p>インストールして、<code>create-react-app hello-world</code>として、<code>npm start</code>すればもう開発できるのは手軽でいいですね。
また、<code>npm run eject</code>すると<code>react-scripts</code>というパッケージの内部に隠れていたwebpackの設定などが全部展開されてカスタマイズ出来るようになるのも面白いですね。</p>

<p>まだ公開されてすぐなので、<code>facebookincubator/create-react-app</code>のリポジトリが、Reactを使ったプロジェクトの構成について多くの人が意見を交わしていてなかなか混沌としています。</p>

<h2>Jest 14.0: React Tree Snapshot Testing</h2>

<ul>
<li><a href="http://facebook.github.io/jest/blog/2016/07/27/jest-14.html">http://facebook.github.io/jest/blog/2016/07/27/jest-14.html</a></li>
</ul>


<p>Jestが密かに追加されている新しいテスト用のrendererを使って、snapshot testをサポートしたという話です。
snapshot testなので、一度テストを実行するとスナップショットのファイルが作成されて、次回からはそのスナップショットとテストが一致するかどうかを判定する感じです。</p>

<p>その他にもReactNativeのサポートや、今後の予定(Jasmine捨てる)などが書かれています。</p>

<h2>React.js in patterns</h2>

<ul>
<li><a href="http://krasimirtsonev.com/blog/article/react-js-in-design-patterns">http://krasimirtsonev.com/blog/article/react-js-in-design-patterns</a></li>
</ul>


<p>High Order ComponentsやContextをDIなど、Reactのパターン集です。</p>

<h2>Function as Child Components</h2>

<ul>
<li><a href="https://medium.com/@iammerrick/function-as-child-components-5f3920a9ace9#.bnfwsk5un">https://medium.com/@iammerrick/function-as-child-components-5f3920a9ace9#.bnfwsk5un</a></li>
</ul>


<p>公式のブログでも言及されて、広く使われるようになったHigh Order Components(HOC)ですが、HOCではなくてchildrenに関数を渡すFunction as Child Componentsのパターンの方が有効ではないかとエントリーです。</p>

<p>Function as Child Componentsにすることで、不要なComponentのラッピングをなくすことが出来たり、Propsの衝突を避けることも容易だとしています。</p>

<h2>Use RxJS with React</h2>

<ul>
<li><a href="http://michalzalecki.com/use-rxjs-with-react/">http://michalzalecki.com/use-rxjs-with-react/</a></li>
</ul>


<p>RxJSを使ってReduxライクな状態管理を行う方法についてのエントリーです。</p>

<h2>How to handle state in React. The missing FAQ.</h2>

<ul>
<li><a href="https://medium.com/react-ecosystem/how-to-handle-state-in-react-6f2d3cd73a0c">https://medium.com/react-ecosystem/how-to-handle-state-in-react-6f2d3cd73a0c</a></li>
</ul>


<p>Reactを学ぶ時に最初からReduxなどを使うのではなくて、ReactのStateから始めようってことで、Stateを扱う方法についてエントリーです。</p>

<h2>Redux vs MobX vs Flux vs&hellip; Do you even need that?</h2>

<ul>
<li><a href="http://goshakkk.name/redux-vs-mobx-vs-flux-etoomanychoices/">http://goshakkk.name/redux-vs-mobx-vs-flux-etoomanychoices/</a></li>
</ul>


<p>上記のエントリーと同じように、まずはReactだけで始めて必要になったらReduxやMobXについて検討しましょうというエントリーです。
Reactだけだと何が辛くて、何を解決するためにReduxなどのライブラリーを使うのかを理解してないと、ただ覚えることが増えたみたいに感じるということはありそうです。</p>

<h2>A STEP-BY-STEP TDD APPROACH ON TESTING REACT COMPONENTS USING ENZYME</h2>

<ul>
<li><a href="http://thereignn.ghost.io/a-step-by-step-tdd-approach-on-testing-react-components-using-enzyme/">http://thereignn.ghost.io/a-step-by-step-tdd-approach-on-testing-react-components-using-enzyme/</a></li>
</ul>


<p>Enzymeを使って、React ComponentをTDDでテストを書いていく方法についてのエントリーです。
TDDの流れに沿って順番にテストを書いていく方法が丁寧に解説されています。</p>

<h2>The Problem with CSS-In-JS, circa Mid-2016</h2>

<ul>
<li><a href="https://medium.com/@taion/the-problem-with-css-in-js-circa-mid-2016-14060e69bf68#.ndfajua3p">https://medium.com/@taion/the-problem-with-css-in-js-circa-mid-2016-14060e69bf68#.ndfajua3p</a></li>
</ul>


<p>CSS in JSやCSS ModulesのようなComponentに閉じたCSSを使う場合の問題点についてのエントリーです。
コンテキストによるスタイルの違いを、CSSがそれぞれ独立している中でどのようにComponentとして表現するかという内容です。</p>

<h2>React Native at SoundCloud</h2>

<ul>
<li><a href="https://developers.soundcloud.com/blog/react-native-at-soundcloud">https://developers.soundcloud.com/blog/react-native-at-soundcloud</a></li>
</ul>


<p>SoundCloudがReactNativeでSoundCloud Purseのアプリを作った時の話です。
なぜReactNativeを使ったのか、実際使ってみてどうだったのかが書かれています。</p>

<h2>A Glimpse Into The Future With React Native For Web</h2>

<ul>
<li><a href="https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/">https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/</a></li>
</ul>


<p><code>react-native-web</code>の現状についてのエントリーです。
基本的には、まだプロダクションで使うレベルにはなっていないけど今後に期待という感じです。</p>

<h2>React Fiber Architecture</h2>

<ul>
<li><a href="https://github.com/acdlite/react-fiber-architecture">https://github.com/acdlite/react-fiber-architecture</a></li>
</ul>


<p>現在実装が進められているReact内部のアルゴリズムであるReact Fiberについてのエントリーです。
詳細については書かれていませんが、導入としては良さそうです。</p>

<p>ちなみにacdliteさんは、今setStateのReact Fiber対応をやっています。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/7344">https://github.com/facebook/react/pull/7344</a></li>
</ul>


<h2>Internationalization in React</h2>

<ul>
<li><a href="https://medium.freecodecamp.com/internationalization-in-react-7264738274a0#.33osi3w58">https://medium.freecodecamp.com/internationalization-in-react-7264738274a0#.33osi3w58</a></li>
</ul>


<p><code>react-intl</code>を使ったReactを使ったアプリケーションでのi18n対応についてのエントリーです。</p>

<h2>Flow: Mapping an object</h2>

<ul>
<li><a href="https://medium.com/@thejameskyle/flow-mapping-an-object-373d64c44592#.xm62m8pic">https://medium.com/@thejameskyle/flow-mapping-an-object-373d64c44592#.xm62m8pic</a></li>
</ul>


<p>Flowでどのように型付けをしていけばいいのかということを、<code>map-obj</code>に型付けしていきながら解説しているエントリーです。
わかりやすいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.9]]></title>
    <link href="http://blog.koba04.com/post/2016/07/21/react-dot-js-links-vol-dot-9/"/>
    <updated>2016-07-21T19:38:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/07/21/react-dot-js-links-vol-dot-9</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.2.1</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.2.1">https://github.com/facebook/react/releases/tag/v15.2.1</a></li>
</ul>


<p>Bug Fixやwarningの追加などが中心です。</p>

<h2>Introducing React&rsquo;s Error Code System</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/11/introducing-reacts-error-code-system.html">https://facebook.github.io/react/blog/2016/07/11/introducing-reacts-error-code-system.html</a></li>
</ul>


<p>React v15.2.0で導入されたエラーコードシステムの解説です。
これにより、プロダクションビルドでもエラーの詳細を確認することができるようになります。</p>

<h2>Design Principles</h2>

<ul>
<li><a href="https://facebook.github.io/react/contributing/design-principles.html">https://facebook.github.io/react/contributing/design-principles.html</a></li>
</ul>


<p>Reactのドキュメントに新しく「Contributing」というセクションが追加されて、Design Principlesというドキュメントが追加されました。
今後、実装のOverviewなどが追加される予定で楽しみです。</p>

<p>Design Principlesでは、Reactが何を重要に考えていてどのように開発をされているかということを「Composition」「Common Abstraction」「Escape Hatches」「Stability」「Interoperability」「Scheduling」「Developer Experience」「Debugging」「Configuration」「Beyond the DOM」「Implementation」「Optimized for Tooling」「Driven by Facebook」という分類で解説されています。</p>

<p>Reactを始める時に最初に読む必要はないですが、Reactについてもっと知りたい人や、Reactを使うかどうか判断する場合に、とてもドキュメントになっています。</p>

<h2>Mixins Considered Harmful</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html">https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html</a></li>
</ul>


<p>Facebook内のコードからMixinを削除しているという話をCore Noteで何度か紹介していましたが、その際の知見も含めた形で、Mixinからの移行を促すエントリーです。
（Mixin自体は、<code>React.createClass</code>に残されます）</p>

<p>Facebook内でMixinが利用されていたケースを取り上げ、High Order Componentsなどのパターンで置き換える方法が丁寧に説明されています。</p>

<p>Design Principlesのドキュメントもそうですが、Dan AbramovがReact Teamに加わってから色々整備されて、よくなってきてるのを感じます。</p>

<h2>Core Team meeting note</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-07/july-07.md">https://github.com/reactjs/core-notes/blob/master/2016-07/july-07.md</a></li>
</ul>


<p>ReactComponentは複数のReactElementを返すことができないので、<code>&lt;div&gt;</code>などで囲む必要があるのですが、これをFragmentsのようなものを導入してどうにかするという話が出ています。
2016年中には入れたいという感じのようです。</p>

<p>Rollupを使ったUMD Bundleのサイズ削減も取り上げられています。
ReactはCommonJSで書かれているのでCommonJSからES Moudlesに変換してRollupに渡す形になっていて、将来的にはES Modulesに移行したいけど、Facebook内部のビルドシステムでES Modulesを使えないのでそうせざるを得ないということのようです。</p>

<p>ファイルサイズについて考えた時に、Reactのイベントシステムの部分が大きな割合を占めていて、これはブラウザー間のAPIや挙動の違いを吸収するレイヤーになっているけど、必要なのかということも取り上げられています。</p>

<h2>Optimizing Compiler: Component Folding #7323</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/7323">https://github.com/facebook/react/issues/7323</a></li>
</ul>


<p>Reactでの新たな最適化についてのIssueです。
<a href="https://en.wikipedia.org/wiki/Constant_folding">Constant folding</a>や<a href="https://en.wikipedia.org/wiki/Inline_expansion">Inline expansion</a>や<a href="https://en.wikipedia.org/wiki/Dead_code_elimination">Dead code elimination</a>を使って最適化を行いたいようです。
一部はRollupがやっていることですね。</p>

<p>ただ、JSはデフォルトがMutableであったり、依存関係をどのように解決するのかなど検討すべき点は多そうです。</p>

<h2>Codemod tests from createClass to ES2015 classes #7321</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7321">https://github.com/facebook/react/pull/7321</a></li>
</ul>


<p>Codemodを使って、<code>React.createClass</code>で書かれたComponentをES2015 classesに変換するPRです。
Codemodのテストのようですが。</p>

<h2>Has Redux&rsquo;s Time Come and Gone #775</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/775">https://github.com/reactjs/redux/issues/775</a></li>
</ul>


<p>ReduxとRelayやGraphQLを組み合わせることについての議論です。
この辺りの組み合わせについて興味がある人は読んでみるといいと思います。</p>

<h2>[META] v3.0.0 (ReactRouter)</h2>

<ul>
<li><a href="https://github.com/reactjs/react-router/issues/3611">https://github.com/reactjs/react-router/issues/3611</a></li>
</ul>


<p>ReactRouter v3.0.0についてのIssueです。
alpha.1から結構経ってますがそろそろ出そうですね。</p>

<h2>You might not need React Router</h2>

<ul>
<li><a href="https://medium.com/@tarkus/you-might-not-need-react-router-38673620f3d#.3ech54krr">https://medium.com/@tarkus/you-might-not-need-react-router-38673620f3d#.3ech54krr</a></li>
</ul>


<p>ReactRouterを使わずに、ReactRouterが内部で使っている<code>history</code>を直接使えばいいのではというエントリーです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A brief note of ReactEurope2016 sessions]]></title>
    <link href="http://blog.koba04.com/post/2016/07/15/a-brief-note-of-reacteurope2016-sessions/"/>
    <updated>2016-07-15T14:56:46+09:00</updated>
    <id>http://blog.koba04.com/post/2016/07/15/a-brief-note-of-reacteurope2016-sessions</id>
    <content type="html"><![CDATA[<p>ReactEurope 2016に行ってきて、改めてメインのTalkの動画を一通り見たので、一言解説を。</p>

<p><a href="https://www.react-europe.org/">https://www.react-europe.org/</a></p>

<!-- more -->


<h2>Day 1</h2>

<p><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa">https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa</a></p>

<h2>Dan Abramov &ndash; The Redux Journey</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/uvAXVMwHJXU" frameborder="0" allowfullscreen></iframe>


<p>去年のReactEuropeでのTalkで一躍有名になり、Reactの中の人になったDan AbramovによるKeynoteです。
Reduxを発表してから何が起きたのか、何を大事にしているのかについて話しています。</p>

<p>改めてReduxのパターンを説明しつつ、ConstraintsとしてReduxが大事に考えていることについて話しています。
全体を通して、Reduxの考え方や現状がわかりやすく説明されています。</p>

<p>また、Talkの最後には新しいReduxのegghead.ioのビデオが公開されました。
これは、前回のものに比べて、より実践的な内容になっています(まだ見てないけど&hellip;)。</p>

<ul>
<li><a href="https://egghead.io/courses/building-react-applications-with-idiomatic-redux">https://egghead.io/courses/building-react-applications-with-idiomatic-redux</a></li>
</ul>


<h2>Eric Vicenti &ndash; Native Navigation for Every Platform</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/dOSwHABLvdM" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeでiOS、Android、Webの各Platform共通で使えるNavigationExperimentalについてのTalkです。</p>

<ul>
<li><a href="https://github.com/ericvicenti/navigation-rfc">https://github.com/ericvicenti/navigation-rfc</a></li>
</ul>


<p>DeeplinkやAndroidのバックボタンなど様々なActionを、ReduxのようにStateをReducerを使って宣言的に処理するアプローチです。
また、アプリの中の1機能としてNavigationを持った機能を埋め込む方法についても解説されています。</p>

<p>Navigator、NavigatorIOSと比べて、NavigationのComponentの外に状態が持てるのはよさそうです。
Reduxを使ったアプリケーションとも親和性が高そうです。</p>

<p>ReactNativeのNavigationについては下にまとまっています。</p>

<ul>
<li><a href="http://facebook.github.io/react-native/docs/navigator-comparison.html">http://facebook.github.io/react-native/docs/navigator-comparison.html</a></li>
</ul>


<h2>Lin Clark &ndash; A cartoon guide to performance in React</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-t8eOoRsJ7M" frameborder="0" allowfullscreen></iframe>


<p>Code CartoonsでおなじみのLin ClarkによるReactアプリケーションのパフォーマンスについてのTalkです。</p>

<p><a href="https://code-cartoons.com/">https://code-cartoons.com/</a></p>

<p>Reactをガッツリ使っている人は知っていることが多いと思いますが、Reactでのパフォーマンスのポイントをブラウザーのレンダリングの仕組みからReactでのレンダリングの流れまで通してわかりやすく説明しています。</p>

<h2>Krzysztof Magiera &ndash; React Native ❤ 60FPS &mdash; Improving React Native</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/qgSMjYWqBk4" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeでのアニメーションについてのTalkです。
Platform固有のNativeComponentを使ったAnimationと、LayoutAnimationとAnimated.jsを使った場合のそれぞれCons,Prosについて、パフォーマンスチューニングついてのポイントについて解説しています。</p>

<ul>
<li><a href="https://facebook.github.io/react-native/docs/animations.html">https://facebook.github.io/react-native/docs/animations.html</a></li>
<li><a href="http://facebook.github.io/react-native/docs/interactionmanager.html">http://facebook.github.io/react-native/docs/interactionmanager.html</a></li>
</ul>


<h2>Christopher Chedeau &ndash; Being Successful at Open Source</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/nRF0OVQL9Nw" frameborder="0" allowfullscreen></iframe>


<p>CSS in JSのプレゼンでもおなじみで、ReactやReactNative、css-layoutをやっているvjeuxによる、OSSを成功に導くために必要なことについてのTalkです。
テクニカルな内容ではなく、ReactをどのようにOSSとして成功させたのかということについて解説しています。
OSSのプロジェクトをやっていたり、参加したいと思っている人にとっては面白いTalkだと思います。
GitHubのIssueスタイルなプレゼンも面白いです。</p>

<p>Demo Driven Developmentという言葉も飛び出していました。</p>

<h2>Dan Schafer &ndash; GraphQL at Facebook</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/etax3aEe2dA" frameborder="0" allowfullscreen></iframe>


<p>GraphQLの基本的な概念の説明と、認証はどのように実装するのか、効果的なデータの取得方法などを実際のコードを出しながら解説したTalkです。
GraphQLには含まれていない部分で、データソースから効率的にデータを取得する方法については、Dataloaderを紹介しています。
Dataloaderを使うことで、N+1問題やオーバーフェッチングを回避しています。</p>

<ul>
<li><a href="https://github.com/facebook/dataloader">https://github.com/facebook/dataloader</a></li>
</ul>


<p>最後に、GraphQL概念として下の3つを紹介していました。</p>

<ul>
<li>Think Graphs, not Endpoints</li>
<li>Single Source of Truth</li>
<li>Thin API layer</li>
</ul>


<p>Talkの後の休憩でQ&amp;Aが盛り上がってたことが印象的でした。</p>

<h2>Jeff Morrison &ndash; A Deepdive Into Flow</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/VEaDsKyDxkY" frameborder="0" allowfullscreen></iframe>


<p>Flowの内部についてのTalkです。
FlowがどのようにJavaScriptのコードを解析しているのか、Parse(AST) 後の InferのフェーズでTypeHeapやOpenTを使ってどのように型情報を保持しているのかなど、かなりテクニカルな情報です。</p>

<p>ただ、内容自体は難しいというわけでもなく丁寧に説明されているので、面白いと思います。</p>

<p>Flowの使い方を知るのではなく、Flowがどのように型チェックを行っているのかを知りたい人にとっては面白いTalkだと思います。
OpenTを利用して複数ファイルを並列にチェックしてる話とか面白いなぁと思いました。
また、FlowGraphはDead Code Eliminationなど様々なことにも利用できるとしています。</p>

<p>個人的にはベストトークかなーという思うくらい面白かったです。Flowの内部に興味が湧きました。</p>

<h2>Mihail Diordiev &ndash; Debugging flux applications in production</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cbXLohVbzNI" frameborder="0" allowfullscreen></iframe>


<p>昨年のDan AbramovのReact Europeでのタイムトラベルのデモをさらに発展させたようなデモ中心のTalkです。</p>

<p>Redux DevTool Extensionを使ったActionとStateのexport、importやテストケースの作成の他、Remote Redux DevToolsを使い、本番でエラーや特定のActionが発生した時にActionとStateのhistoryを送信して手元で再現できるようにしています。</p>

<p>バグが起きるActionとStateをファイルに記録しておいて、記録したActionとStateを再生しながら修正するのはよさそうです。</p>

<p>また、ReduxだけでなくRxJSなどとも組み合わせて使ったり、ReactNativeやElectron環境でも使えるようです。</p>

<h2>Cheng Lou &ndash; On the Spectrum of Abstraction</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/mVVNJKv9esE" frameborder="0" allowfullscreen></iframe>


<p>ReactMotionやAnimationの話をするのかと思っていたら、ライブラリーやフレームワークなどの抽象化についてのTalkでした。</p>

<p>抽象化によるコスト、ライブラリーとフレームワークの違い、抽象化のレイヤーの違いによってどんな影響があるのか、Reactはなぜ今のようなアーキテクチャになっているのかといったことについて熱く話されています。</p>

<p>Grunt vs Gulp、React vs Templates、Immutability vs Mutability、CSS in JS vs Traditional CSSなどのわかりやすい例を用いた説明もあって面白いです。</p>

<ul>
<li>Don&rsquo;t Cover Every Use-case</li>
<li>Not DRY is Fine</li>
<li>Don&rsquo;t Be Swayed by Elegance</li>
<li>When in Doubt, Use Examples</li>
</ul>


<h2>Bertrand Karerangabo &amp; Evan Schultz &ndash; React Redux Analytics</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/MBTgiMLujek" frameborder="0" allowfullscreen></iframe>


<p>Lean Analyticsを回すにあたり、Reduxでどのように計測するのかというTalkです。
後半はSegment.ioと組み合わせて使うためのredux-segmentというライブラリーの紹介やデモです。</p>

<hr />

<h2>Day 2</h2>

<p><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof">https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof</a></p>

<h2>Jonas Gebhardt &ndash; Evolving the Visual Programming Environment with React</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/WjJdaDXN5Vs" frameborder="0" allowfullscreen></iframe>


<p>ブラウザー上でのビジュアルプログラミングについてのデモと解説によるTalkです。
React、Flow、Redux、Immutable.js、RxJSなどを使い、データの流れをコードとビジュアルプログラミングをうまく連携させていて、とても面白いです。Flowの型情報を使って接続できる要素を可視化しているところとか。</p>

<p>ビジュアルプログラミングもただのデータの入力と出力であることがよくわかります。</p>

<h2>Bonnie Eisenman &ndash; React Native Retrospective</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-vl57brMWNg" frameborder="0" allowfullscreen></iframe>


<p>オライリーから出ている「Learning ReactNative」の作者の人のTalkです。</p>

<ul>
<li><a href="http://shop.oreilly.com/product/0636920041511.do">http://shop.oreilly.com/product/0636920041511.do</a></li>
</ul>


<p>ReactNativeが発表されてから、今までの流れを時系列にわかりやすく説明しています。
具体的な使い方などではなくて、モバイルアプリ開発の状況やReactNativeの状況など、どのようにReactNativeが捉えられているのかがよくわかります。</p>

<p>ReactNativeに手を出してみようかと思っている人にとっては参考になると思います。</p>

<h2>Max Stoiber &amp; Nik Graf &ndash; The Evolution of React UI Development</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/0IkWuXeKPV0" frameborder="0" allowfullscreen></iframe>


<p>Hot Reloadingを使って、Componentをインタラクティブに開発していくことについてのTalkです。
紹介していたCarte Blancheというライブラリーでは、PropTypes or FlowtypeからPropデータをランダムに生成してComponentの表示を確認できるようになっています。</p>

<ul>
<li><a href="https://github.com/carteb/carte-blanche">https://github.com/carteb/carte-blanche</a></li>
</ul>


<p>また、データはファイルとして書き出されて、それを編集することでHot Reloadingで反映されるようになっています。
今は、React用でwebpackに依存していますが、様々な環境やライブラリーに対応する予定があるそうです。</p>

<p>react-storybookと似ていますが、こちらはデータをランダムに生成してくれる点などが違う点なのかなと思います。
どちらも使っていないので間違っているかもですが&hellip;。</p>

<ul>
<li><a href="https://github.com/kadirahq/react-storybook">https://github.com/kadirahq/react-storybook</a></li>
</ul>


<h2>Andrew Clark &ndash; Recomposing your React application</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/zD_judE-bXk" frameborder="0" allowfullscreen></iframe>


<p>ReactEuropeの中で数少ない、Reactに関するTalkです。
High Order Componentsとは何か、どんなユースケースがあるのか、パフォーマンスについてはどうなのかについて話されています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// High Order Components
</span><span class='line'>(...args) =&gt; Component =&gt; EnhancedComponent</span></code></pre></td></tr></table></div></figure>


<p>Reduxなどを使う中で、HOCを使っている人も多いと思いますが、実際どうなっているのかやどんなことができるのかを知りたい人にとっては面白いTalkです。
また、HOCを多用した場合にComponentが深くネストした構造になり、パフォーマンスに影響を与えることについても、<code>compose</code>を使った方法やStateless Functional Componentsの場合にはその場でReactElementに展開するようにするといった方法を紹介しています。</p>

<p>実際のHigh Order Componentsの例については、本人が作っている<code>recompose</code>をみるといいと思います。</p>

<p>いかにPresentational Componentにロジックを入れないようにするかのヒントとなるTalkだと思います。</p>

<ul>
<li><a href="https://github.com/acdlite/recompose">https://github.com/acdlite/recompose</a></li>
</ul>


<h2>Tadeu Zagallo &ndash; JavaScript, React Native and Performance</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/1oL_OJ3UePU" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeが起動時にJavaScriptの部分で内部でどのように高速化しているのかという話です。</p>

<p>初期化をマルチスレッド化やモジュール初期化の遅延の他、プラットフォーム固有のコードのDead Code Eliminationなど。</p>

<p>またiOSではJITが使えず、AndroidではJITが使えたけど結果的に遅いという中で、ProfileをとってParse結果をバイトコードでキャッシュして改善していく流れが解説されています。
この最適化は今のところAndroidだけでまた有効化されているわけではないようです。</p>

<p>ReactNativeの内部的な話とか、JavaScriptの最適化に興味がある人にとっては面白いTalkだと思います。</p>

<h2>Jafar Husain &ndash; Falcor: One Model Everywhere</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/nxQweyTUj5s" frameborder="0" allowfullscreen></iframe>


<p>NetflixのTechnical LeadであるJafar HusainさんによるFalcorについてのTalkです。
話すペースは速いですが、さすが話し慣れているだけあってわかりやすいです。</p>

<p><a href="https://twitter.com/jhusain">https://twitter.com/jhusain</a></p>

<p>なぜNetflixがFalcorを作ったのか、Falcorの基本的な説明から、
ReactEuropeなのでGraphQLと比較しつつ、Falcorの方がシンプルで小さく簡単に始められることを強調しています。
GraphQLのように型が必要な場合は、JSONSchemaやTypeScriptと組み合わせることも可能だと説明しています。
また、GraphQLのQueriesのアプローチとFalcorのPathsの違いについても解説しています。</p>

<p>ベタに書いたJSONデータからFalcorを使うように変えていく説明もわかりやすいです。</p>

<p>Falcorの基本を知るにはとてもいいTalkです。JSON Graphをどのように実現しているのかなど。</p>

<h2>Brent Vatne &ndash; Building li.st for Android with Exponent and React Native</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cI9bDvDEsYE" frameborder="0" allowfullscreen></iframe>


<p>ExponentでReactNativeを使ってAndroidのアプリを作った時の話です。
Nativeのカスタムビューを作成することなくできる、かなり実践的な快適なUIを実現する方法が解説されています。</p>

<ul>
<li>UIをブロックしないスムーズなListViewを、IncrementalなRenderingにより実現した話</li>
<li>アニメーションを処理の前後で行うのではなく、同時にバックグラウンドの処理を実行することにより快適なアニメーションの実現する方法</li>
<li><code>ex-navigation</code>を使ったNavigationについて</li>
<li>ユーザーインプットについて。キーボードイベントをどのようにハンドリングするか</li>
<li>タッチやジェスチャーをどのようにハンドリングするのか</li>
</ul>


<p>ReactNativeのAndroidでの事例として貴重なTalkだと感じました。</p>

<ul>
<li><a href="https://github.com/exponentjs/">https://github.com/exponentjs/</a></li>
</ul>


<h2>Laney Kuenzel &amp; Lee Byron &ndash; GraphQL Future</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ViXL0YQnioU" frameborder="0" allowfullscreen></iframe>


<p>GraphQL TeamのメンバーによるGraphQLがオープンソースになってから起きたことと、GraphQLのこれからについてのTalkです。Keynoteっ
ぽい感じもあり、GraphQL使ってない人でも面白いTalkです。</p>

<blockquote><p>We only open source what we use</p>

<p>We release what is generally useful</p></blockquote>

<p>というFacebookの考えの中で、Facebook内で試していることをあくまでExperimentalとして紹介されています。</p>

<ul>
<li>少しでも早く最初のコンテンツを返すための工夫としての<code>@defer</code>や<code>@stream</code>ディレクティブ</li>
<li>リアルタイムアップデートを行うための<code>@live</code>ディレクティブ（プロダクションではまだ使われていない）</li>
<li>現時点ではReactiveなバックエンドを持っていないFacebookでは<code>@live</code>ディレクティブの導入も難しく、さらに複雑な依存関係の中で全ての変更を追従することが難しく、そのような状況の中でイベントベースのSubscriptionをGraphQLで実現するGraphQL Subscriptionsについて

<ul>
<li>Facebookでは、GraphQL SubscriptionsをMQTTを使って実現しているようです。</li>
<li><code>subscription</code>のキーワード自体はgraphql-jsでもサポートされているようです。pubsubの処理は自身で実装する必要がありますが。このあたりはもっと一般化された際にはオープンソースになるかも？</li>
<li>Facebooで実際に使われている規模としては、<code>150B daily subscribes</code>、<code>35B daily payload deliveries</code>、<code>〜30 subscriptions in schema</code>だそうです。</li>
<li>GraphQL Subscriptionsによって、「xxx is writing a comment&hellip;」の表示や、live video上でのlive reactionの機能など多くのことが可能になったそうです。</li>
</ul>
</li>
</ul>


<h2>Martijn Walraven &ndash; Building native mobile apps with GraphQL</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/z5rz3saDPJ8" frameborder="0" allowfullscreen></iframe>


<p>Facebookの外ではまだまだGraphQL導入の敷居が高く、その中でiOSやAndroidアプリからどのようにGraphQLを使えばいいのかというTalkです。
GraphQL Schemaを使ってクライアントでどのように型付けをするのか、RelayのようにGraphQLから取得したデータをどのように一元管理するかという内容です。
ちょっと消化不良感がありました。</p>

<ul>
<li><a href="https://medium.com/apollo-stack">https://medium.com/apollo-stack</a></li>
</ul>


<h2>Question and Answers with core team members</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/5pMDd1t2thc" frameborder="0" allowfullscreen></iframe>


<p>Sessionに登壇していたFacebookのエンジニアによるQ&amp;Aです。
ざっくりまとめると前半がGraphQLについて、後半がアーキテクチャについての話が多い印象です。</p>

<p>GraphQLについては、どのようにSQLに変換すればいいか、本編のTalkにあったGraphQL Subscriptionsについて、GraphQL Fragmentをどうやってテストするのか、バージョニングについてなどの質問がありました。</p>

<p>Reactについては、DevTool APIがそのうち公開されるという話がありました。内部的にはReactPerfで使われているものです。
あとはHigh Order Componentsについての質問もありました。
このあたりは「Andrew Clark &ndash; Recomposing your React application」や下記のブログで詳しく解説されています。</p>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html">https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html</a></li>
</ul>


<p>後半はImmutable.jsについての質問や、1からFacebookを作り直すならどういうアーキテクチャで作るかという質問から、アーキテクチャの話になっています。
JavaScriptにImmutableなデータ型があれば何が変わるのかと言ったことや、Immutabilityとパフォーマンスについてなど。
JavaScriptではMutablityがデフォルトなので、Immutablityが複雑なものとして捉えられますがそれはコンテキストによるもので、デフォルトがImmutableで例外としてMutableを扱う言語もあり、Immutabilityの方がローレベルでシンプルなだという話など。</p>

<p>途中で紹介されるImmutable App Architectureについては別でブログ書いたのでそちらを。</p>

<ul>
<li><a href="http://blog.koba04.com/post/2016/06/21/immutable-app-architecture/">http://blog.koba04.com/post/2016/06/21/immutable-app-architecture/</a></li>
</ul>


<p>その他には、TypeScriptではなくFlowを採用するメリットについての質問やTypeScriptとFlowを組み合わせることについてなど、Flowについての質問もありました。</p>

<p>全体的には、Lee Byron劇場な感じですが、とても面白いQ&amp;Aになっています。</p>

<hr />

<p>そういえば、ReactEurope行ったことについてのエントリー書いてなかったので別途書こう&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.8]]></title>
    <link href="http://blog.koba04.com/post/2016/06/23/react-dot-js-links-vol-dot-8/"/>
    <updated>2016-06-23T13:33:36+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/23/react-dot-js-links-vol-dot-8</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.2.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.2.0">https://github.com/facebook/react/releases/tag/v15.2.0</a></li>
</ul>


<p>15.2.0がリリースされました。</p>

<p>プロダクションビルドでエラーコードが付加されるようになりエラーの調査がしやすくなったことや、PropTypesやkeyのwarning時のスタックトレースがComponentのツリーで表示されるようになりました。
開発をサポートするための機能です。</p>

<p>その他はちょっとしたバグ修正などが中心です。</p>

<h2>Core Notes June 23</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-23.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-23.md</a></li>
</ul>


<p>恒例のCore TeamのMeeting Noteです。</p>

<p>Facebook内での<code>React.createClass</code>からClassによるComponent定義への移行作業は引き続き行われているようです。</p>

<h2>Core Notes June 30</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-30.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-30.md</a></li>
</ul>


<p>こちらもMeeting Noteです。
新しいReconcilerが徐々に動き始めているようです。
また、<code>React.createClass</code>からClassによるComponentによる移行についても進んでいるようです。
下のcodemodを使って、ClassによるComponent定義&amp;property initializer&amp;Flowに変換を行っているようです。</p>

<ul>
<li><a href="https://github.com/reactjs/react-codemod/pull/54">https://github.com/reactjs/react-codemod/pull/54</a></li>
</ul>


<p>React Teamとしては、Class + property initializer + Flowの組み合わせについては、ドッグフーディング中なので現時点では推奨しているわけでないという立場です。</p>

<p>また、Facebook内部ではPureRenderMixinがたくさん使われていて、それを置き換えるためのものとして<code>React.PureComponent</code>が考えられているようです。</p>

<p><code>React.PureComponent</code>に関しては、最初のProposalでは内部のStateless Functional Componentsにも最適化が適用される予定でしたが、混乱や問題点があることから、新しく出されたPRではただのClass版のPureRenderMixinとなっています。そしてmergeされました。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/7195">https://github.com/facebook/react/pull/7195</a></li>
<li><a href="https://github.com/facebook/react/issues/6914">https://github.com/facebook/react/issues/6914</a></li>
</ul>


<p>また、<code>React.createClass</code>をAddonにして、さらに<code>Perf</code>と<code>TestUtils</code>以外のAddonsについては、React Team外にownershipを移して管理するも考えているようです。</p>

<h2>Resolve refs in the order of the children #7101</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7101">https://github.com/facebook/react/pull/7101</a></li>
</ul>


<p>更新時の新しくマウントされるReactElementに対するRefの解決する順番を変更するPRです。
詳しくはPRにある画像を見るとわかると思います。</p>

<h2>Added jsx-self babel transform plugin #3540</h2>

<ul>
<li><a href="https://github.com/babel/babel/pull/3540">https://github.com/babel/babel/pull/3540</a></li>
</ul>


<p>warning目的でReactElementに<code>__self</code>のPropを追加するBabelのtransfomerです。
developmentの時だけ有効にすることが推奨されています。</p>

<h2>Spec proposal: extending the language to allow spreading children #57</h2>

<ul>
<li><a href="https://github.com/facebook/jsx/issues/57">https://github.com/facebook/jsx/issues/57</a></li>
</ul>


<p>JSXでのchildrenの仕様に対するProposalです。
JSXChildを拡張して<code>{...children}</code>を許容するようにするものです。</p>

<h2>RFC: Flat bundle using Rollup</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7178">https://github.com/facebook/react/pull/7178</a></li>
</ul>


<p>現在CommonJSベースで書かれているReactのコードをRollupでバンドルしてTree ShakingやDead Code Eliminationによりファイルサイズを削減するPRです。React Teamのインターンの人ですね。</p>

<p>まずはトップレベルでない<code>require</code>を全てトップレベルにしてES Modulesに変換できるようにして、BabelでCommonJSをES Modulesに変換してRollupでバンドルするという方法を採っているようです。
(RollupのCommonJSプラグインを使う方法よりサイズが小さくなるらしいです)</p>

<h2>Flow v0.28.0</h2>

<ul>
<li><a href="https://github.com/facebook/flow/releases/tag/v0.28.0">https://github.com/facebook/flow/releases/tag/v0.28.0</a></li>
</ul>


<p>Flowの0.28.0がリリースされています。
変更内容については、下記のブログでも書かれています。</p>

<ul>
<li><a href="https://flowtype.org/blog/2016/07/01/New-Unions-Intersections.html">https://flowtype.org/blog/2016/07/01/New-Unions-Intersections.html</a></li>
</ul>


<h2>ReactNative v0.29.0</h2>

<ul>
<li><a href="https://github.com/facebook/react-native/releases/tag/v0.29.0">https://github.com/facebook/react-native/releases/tag/v0.29.0</a></li>
</ul>


<p>ReactNativeの0.29.0がリリースされています。</p>

<h2>Don&rsquo;t Use Bind When Passing Props</h2>

<ul>
<li><a href="https://daveceddia.com/avoid-bind-when-passing-props/">https://daveceddia.com/avoid-bind-when-passing-props/</a></li>
</ul>


<p>PureComponentなんかとも関連しますが、なぜrenderメソッドの中でFunction.prototype.bindしたりArrow Function使うのがダメなのかについて書いたエントリーです。
過去にもあったような気もしますが。
上記を使って書かれているサンプルも多いので、使うときは何が起きているのか意識して使った方がいいと思います。
（Function.prototype.bindやArrow Functionsを使うと当たり前ですが新しい関数が都度生成されるので）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Immutable App ArchitectureについてのTalkを観た]]></title>
    <link href="http://blog.koba04.com/post/2016/06/21/immutable-app-architecture/"/>
    <updated>2016-06-21T01:30:35+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/21/immutable-app-architecture</id>
    <content type="html"><![CDATA[<iframe src="https://player.vimeo.com/video/166790294" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p><a href="https://vimeo.com/166790294">Render 2016 - Lee Byron</a> from <a href="https://vimeo.com/whiteoctober">White October</a> on <a href="https://vimeo.com">Vimeo</a>.</p>


<ul>
<li><a href="https://vimeo.com/166790294">https://vimeo.com/166790294</a></li>
<li><a href="http://2016.render-conf.com/talks.php#immutable-user-interfaces">http://2016.render-conf.com/talks.php#immutable-user-interfaces</a></li>
</ul>


<p>Dan AbramovもReact EuropeのQ&amp;AでおすすめしていたTalkで、改めて見て面白い内容だったので紹介します。</p>

<p>FacebookがReactやGraphQL、Immutable.jsを使ってどのようなアーキテクチャでアプリケーションを作成しているのかということを解説したTalkです。
特にFluxのような新しい概念が提唱されているわけではありませんが、最近のフロントエンドの流れやFacebookが目指しているものがわかりやすく解説されています。</p>

<p>Architectureの話が中心で各ライブラリーの説明や、細かい実装についてのTalkではありません。
各ライブラリーの使い方が〜という話ではなく、どういったArchitectureでWebやiOSやAndroidなどのクライアントサイドを作っていくのかを考えたい人にとっては、参考になるTalkだと思います。</p>

<p>というわけで、軽く内容を。
いろいろ省略しているので、気になった人はぜひTalkを観てください。</p>

<!-- more -->


<h2>Immutable App Architecture</h2>

<p>まず最初に、Architectureの選択は、アプリケーションの品質、開発の簡単さや難しさ、リリース後の改善のサイクルにも大きく影響を及ぼすものであるとしています。</p>

<blockquote><p>Architecture is about Choosing Elements of Abstraction</p></blockquote>

<p>例として、MVC &amp; RESTなArchitectureをInformation Richなアプリケーションで採用した場合、<strong>What Changed</strong> と <strong>Data Synchronization</strong> の部分が問題になるとしています。
変更管理とデータ同期の部分ですね。</p>

<p>特にFacebookは、ネットワーク環境が整備されていない国も含めた全世界にサービスを提供しているので、<strong>Data Synchronization</strong> におけるネットワークのレイテンシーの解決については力を注いでいるように感じます。</p>

<p>Webの場合、 <strong>What Changed</strong> の部分にはReactを使ったComponentによるViewの抽象化とImmutable.jsによるデータ管理の単純化、 <strong>Data Synchronization</strong> の部分にはGraphQLを使って必要最低限のデータのやりとりのみ行う方法を解説しています。</p>

<p>これらを踏まえて、Immutable App Architectureとして、下記の図のような構成を紹介しています。</p>

<p><img src="http://blog.koba04.com/images/posts/immutable-app-architecture/immutable-app-architecture.png" title="'Immutable App Architecture'" ></p>

<p>詳細については動画を見てほしいのですが下のような要素があります。
Fluxについて聞いたことがあるとだいたいイメージできると思います。</p>

<h3>Component</h3>

<p>Componentは下のようなStateを受け取りViewを返すピュアな関数です。
Viewへの反映を最適化します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(State) =&gt; View</span></code></pre></td></tr></table></div></figure>


<p>ReactやReactNative、ComponentKitが担っている部分です。</p>

<h3>View</h3>

<p>DOMやUIViewやAndroidのViewなど各Platformが提供しているViewです。
Mutationが前提になっていて、管理や最適化が難しいとしています。</p>

<h3>Actions</h3>

<p>新しいStateを作成する部分です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(State) =&gt; State</span></code></pre></td></tr></table></div></figure>


<p>ActionごとにStateを再作成するのはパフォーマンス的にツラいのでは？ということに対しては、<strong>Structural Sharing</strong> のアプローチを紹介しています。</p>

<p>Structural Sharingは、Immurable.jsなどで使われていて、変更があった箇所とその上位の要素だけを再作成して、その他は参照を付け替えるだけなので全体を毎回再生成しているわけではないということです。
もちろん、Immutable.jsを使わなくても実装することは可能で、Reduxを使っている人にはおなじみだと思います。</p>

<p><img src="http://blog.koba04.com/images/posts/immutable-app-architecture/structual-sharing.png" title="'Structural Sharing'" ></p>

<p>Immutableにすることにより、Memoizationなどの最適化のテクニックも適用しやすいとしています。</p>

<p>また、サーバーからデータを取得するActionのI/Fは下記のように定義しています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(State) =&gt; State, Promise&lt;State&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>(State) =&gt; Promise&lt;State&gt;</code>の場合、ネットワークが貧弱な環境ではユーザーにすぐにレスポンスを返せないので、「すぐに反映させるためにクライアント側で作成したState」と「サーバーからのレスポンスを反映したStateを返すPromise」の2つを返しています。
このアプローチは次のQueueの部分でも重要になってきます。</p>

<p>もっと複雑な非同期処理をやっている人にとっては、Observableなどで処理した方がいいのかもしれませんが、これで十分なことも多いのかなと思います。</p>

<h3>Queue</h3>

<p>同時に発生する複数のActionをシリアライズして処理するためのQueueです。</p>

<p><code>(State) =&gt; State, Promise&lt;State&gt;</code>のActionの場合、Promiseで解決されるStateを本当のState(<strong>True State</strong>)として、Promiseでない方のStateを <strong>Optimistic State</strong> として扱います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(State) =&gt; State, Promise&lt;State&gt;
</span><span class='line'>   |         |              |--------&gt; True State
</span><span class='line'>   |         |----&gt; Optimistic State
</span><span class='line'>   |--&gt; Current State</span></code></pre></td></tr></table></div></figure>


<p><code>(State) =&gt; State, Promise&lt;State&gt;</code>の場合、まずは <strong>Optimistic State</strong> の方をStateとして扱いViewが更新されます。その後、Promiseがresolveされた時に、<strong>True State</strong> が更新されてQueueにあるActionが再度適用されます。</p>

<p>TODOアイテムの作成を例にすると、下記のような流れになると解説されています。</p>

<hr />

<ul>
<li>入力したTODOのテキストをOptimistic Stateとして即時にStateに反映する</li>
<li>QueueにあるActionをOptimistic Stateに適用する</li>
</ul>


<p>〜サーバーからレスポンスが返ってくる〜</p>

<ul>
<li>サーバーから受け取ったidなどを持った完全な形のTODOをTrue Stateに反映する</li>
<li>QueueにあるActionを再度True Stateに適用する</li>
</ul>


<hr />

<p>これにより、ネットワークリクエストが失敗した場合は、 <strong>Optimistic State</strong> から <strong>True State</strong> に戻せばいいだけなのでロールバックも簡単だとしています。</p>

<p><img src="http://blog.koba04.com/images/posts/immutable-app-architecture/action-queue.png" title="'Action Queue'" ></p>

<p>それぞれ依存する<code>(State) =&gt; State, Promise&lt;State&gt;</code>のActionが複数Queueに積まれた時にどう処理するのかなど細かい不明な点はありますが、こんな感じだと思います。</p>

<h3>State</h3>

<p>Stateはアプリケーションの状態でImmutableです。
Action毎に作成されます。</p>

<p>Initial Stateはサーバーから作成されます。</p>

<h3>Models</h3>

<p>ModelはStateを構成するComponentが必要とするGraphQLのTypeで定義されたデータの形です。</p>

<blockquote><p>Colocated Data Dependencies</p></blockquote>

<p>Plainなオブジェクト（JavaでいうPOJO）であることを推奨しています（JSの場合はImmutable.jsのデータ構造の場合も）。</p>

<p><img src="http://blog.koba04.com/images/posts/immutable-app-architecture/immutable-app-model.png" title="'Model'" ></p>

<h2>まとめ</h2>

<p><img src="http://blog.koba04.com/images/posts/immutable-app-architecture/immutable-app-architecture.png" title="'Immutable App Architecture'" ></p>

<p>上記のように構成されるImmutable App Architectureは <strong>Pure Function</strong>、<strong>Immutability</strong>、<strong>Composition</strong> を組み合わせた <strong>Composition of Simple Elements</strong> だとしています。
Immutable App ArchitectureはFacebookのアプリでも使われていてフィットしているとのことです。</p>

<p>と、しながらもArchitectureの選択はトレードオフだとしています。
なのでアプリケーションを完成させた後も、すぐにゼロから再構築することを考えて、よりよいArchitectureを常に探求する必要があるとしています。</p>

<blockquote><p>There is no Architecture Nirvana.</p>

<p>Exploration and Improvement.</p></blockquote>

<p>Please watch the video!</p>

<ul>
<li><a href="https://vimeo.com/166790294">https://vimeo.com/166790294</a></li>
</ul>


<p>(詳細が聞き取れなかった部分もあるので、間違ってるところがあったら指摘してもらえるとありがたいです)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.7]]></title>
    <link href="http://blog.koba04.com/post/2016/06/16/reactjs-links-vol7/"/>
    <updated>2016-06-16T13:33:36+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/16/reactjs-links-vol7</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Team meeting notes</h2>

<p>恒例のCore Teamのmeeting noteです。</p>

<h3>May 26</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-26.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-26.md</a></li>
</ul>


<p>主にES classesによるComponent定義で<code>React.createClass</code>による定義を置き換えることについて書かれています。
ドキュメントやMixinをどうするか、Class Property Initializerについてのスタンスなど。</p>

<p>その他では、Incremental Reconcilerが入った時にTestUtilsのrenderIntoDocumentが同期的なことについてどうするかについても触れられています。</p>

<h3>June 2</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-02.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-02.md</a></li>
</ul>


<p>PureComponentによるStateless Functional Componentsの最適化について多く触れられています。
また、Facebookのコードベースを<code>React.createClass</code>からES classesに移行する計画があるようです。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/6914">https://github.com/facebook/react/pull/6914</a></li>
</ul>


<h3>June 9</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-09.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-09.md</a></li>
</ul>


<p>主に新しいReconcilerの状況についてや、問題となる点について話されています。</p>

<p>あとは、Facebook内の<code>React.createClass</code>からES classesに移行する方法についてが引き続き触れられています。</p>

<p>新しいトピックでいうと、大きなfeatureについてはTC39のようにchampionを立てて進めていくプロセスを採用するかどうかが検討されているようです。</p>

<h2>RFC: Make Refs Opt-in #6974</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6974">https://github.com/facebook/react/issues/6974</a></li>
</ul>


<p>Refsをopt-inの機能にするという提案(discussion)です。</p>

<h2>React ContextTypes, PropTypes when using an already static typed language like TypeScript #6525</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6525">https://github.com/facebook/react/issues/6525</a></li>
</ul>


<p>PropTypesのFlowやTypeScriptで置き換えた場合でもContextTypesを使う必要があることについてのIssue(?)です。</p>

<h2>New marketing copy on homepage #7012</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7012">https://github.com/facebook/react/pull/7012</a></li>
</ul>


<p>Reactのトップページに、特徴として書かれていた「JUST THE UI」、「VIRTUAL DOM」、「DATA FLOW」が「Declarative」、「Component-Based」、「Learn Once, Write Anywhere」に更新されました。</p>

<p>この変更は、Reactは「JUST THE UI」でありMVCのVだという記述が、Reactを使う時にReduxなどのFlux系のライブラリーが必ず必要であるかのように捉えられてしまっている現状なんかも踏まえたもののようです。</p>

<h2>ReactEurope</h2>

<p>ReactEuropeの動画が公開されています。</p>

<ul>
<li><a href="https://www.react-europe.org/">https://www.react-europe.org/</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa">https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa</a> (Day1)</li>
<li><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof">https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof</a> (Day2)</li>
</ul>


<p>別途、まとめを書ければ書くかも。</p>

<h2>Experimenting with React Native at Khan Academy</h2>

<ul>
<li><a href="https://docs.google.com/document/d/1PU51njrUweehKFgSu69C7OAEdyp6rHmsvQ7KIcLaHqw/edit#">https://docs.google.com/document/d/1PU51njrUweehKFgSu69C7OAEdyp6rHmsvQ7KIcLaHqw/edit#</a></li>
</ul>


<p>Khan AcademyでのReactNativeについてのレポートです。実際に取り入れようとした時に何が問題になったかなど触れられていて参考になります。</p>

<h2>Q&amp;A with Ben Alpert</h2>

<ul>
<li><a href="https://github.com/reactiflux/q-and-a/blob/master/ben-alpert_react-core.md">https://github.com/reactiflux/q-and-a/blob/master/ben-alpert_react-core.md</a></li>
</ul>


<p>Reactのcore memberであるBen Alpertに対するQ&amp;Aです。
New renconcilerについてのトピックが多くて興味深いです。</p>

<h2>State Streams and React</h2>

<ul>
<li><a href="https://medium.com/@markusctz/state-streams-and-react-7921e3c376a4#.39bp3z2fa">https://medium.com/@markusctz/state-streams-and-react-7921e3c376a4#.39bp3z2fa</a></li>
</ul>


<p>RxJSでRedux風なアーキテクチャを構築し、Reactと組み合わせて作るというエントリーです。わかりやすいです。
後半は作者が実際に作った<code>udeo</code>というライブラリーについての説明です。</p>

<ul>
<li><a href="https://github.com/mcoetzee/udeo">https://github.com/mcoetzee/udeo</a></li>
</ul>


<h2>react-enroute</h2>

<ul>
<li><a href="https://github.com/tj/react-enroute">https://github.com/tj/react-enroute</a></li>
</ul>


<p>TJが開発しているreact-router風なlightweightなルーティングライブラリーです。
ルーティングにはenrouteというライブラリーを使っていて、react-enrouteはReactとの繋ぎこみだけをやっているような感じです。</p>

<ul>
<li><a href="https://github.com/lapwinglabs/enroute">https://github.com/lapwinglabs/enroute</a></li>
</ul>


<h2>3 Reasons why I stopped using React.setState</h2>

<ul>
<li><a href="https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.umnvins0y">https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.umnvins0y</a></li>
</ul>


<p>ReactのsetStateのハマリどころなどについて解説したエントリーです。
MobXの作者なので、後半はMobX最高という感じになっています。</p>

<h2>Feature Request: Allow reducers to consult global state #1768</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1768">https://github.com/reactjs/redux/pull/1768</a></li>
</ul>


<p>Reduxのreducerで各ReducerでグローバルなStateも受け取れるようにしようというfeature requestです。
mergeされそうな雰囲気?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.6 5/19〜5/27]]></title>
    <link href="http://blog.koba04.com/post/2016/05/27/reactjs-links-vol6/"/>
    <updated>2016-05-27T19:04:55+09:00</updated>
    <id>http://blog.koba04.com/post/2016/05/27/reactjs-links-vol6</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.1.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.1.0">https://github.com/facebook/react/releases/tag/v15.1.0</a></li>
</ul>


<p>React v15.1.0がリリースされています。
基本的にはbug fixなどですが、Perfが書き直されています。その際、<code>printDOM</code>はdeprecatedになり、代わりに<code>printOperations</code>を使うようになりました。</p>

<h2>React Core Team meeting notes</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-19.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-19.md</a></li>
</ul>


<p>恒例のmeeting noteです。
今回のものは、<code>React.createClass</code>のAPIについてや、<code>PropTypes</code>の扱いなどについて触れられており、今後どうなっていくかに関わる重要なポイントに触れられています。</p>

<p>Stateless Functional ComponentsとES2015 ClassesによるComponent定義が中心であり、PropTypesについてはFlowやTypeScriptなどで置き換えていきたいという流れです。
まだ先の話になると思いますが。</p>

<p>その他にも、パッチ、マイナーリリースを2週間ごとに行う計画や、複数パッケージの管理に<a href="https://lernajs.io/">Lerna</a>を使う計画などについても言及されています。</p>

<h2>RFC: Should createClass be considered legacy? (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6811">https://github.com/facebook/react/pull/6811</a></li>
</ul>


<p>上記のmeeting notesにも関わる内容で、<code>React.createClass</code>をlegacyとして扱うためのブログポストのPRです。
結局、まだその時ではないということでmergeされませんでしたが、meeting note以上に詳しく書かれているので興味のある人はみるといいと思います。</p>

<h2>Support Server Rendering of <code>amp</code> Attribute #6798 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6798">https://github.com/facebook/react/issues/6798</a></li>
</ul>


<p><code>amp</code>のタグをSSRでサポートするかどうかについてのIssueです。</p>

<h2>Copy React ART tests and add hacks to fix them #6775 (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6775">https://github.com/facebook/react/pull/6775</a></li>
</ul>


<p>ReactARTのrendererがReactNativeと同様に、メンテナンス上の理由から<code>facebook/react</code>のリポジトリに入りました。</p>

<h2>RFC: Error code system #6874</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6874">https://github.com/facebook/react/pull/6874</a></li>
</ul>


<p>Core Meeting Notesにあったエラーシステム周りの作業が始まっています。</p>

<h2>Redux 4.0 ?</h2>

<p>Reduxで4.0に向けた議論が始まっています。</p>

<h3>RFC: Simplify middleware signature</h3>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/1744">https://github.com/reactjs/redux/issues/1744</a></li>
</ul>


<p>これは結局入らないみたいですね。</p>

<h3>Proof of Concept: Enhancer Overhaul</h3>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1702">https://github.com/reactjs/redux/pull/1702</a></li>
</ul>


<p><code>store base</code>と呼ばれているこちらのStore enhancerのAPI変更については議論中です。
Storeを直接拡張するのではなく、今MiddlewareのAPIとして渡している<code>{getState, dispatch}</code>の形式を<code>store base</code>として抽象化して、それを拡張できるようにする感じなのかな？</p>

<h2>Understanding MobX and when to use it. #199 (MobX Issue)</h2>

<ul>
<li><a href="https://github.com/mobxjs/mobx/issues/199">https://github.com/mobxjs/mobx/issues/199</a></li>
</ul>


<p>MobXとReduxでのアプローチの違いについての議論です。</p>

<h2>Spectacle</h2>

<ul>
<li><a href="http://formidable.com/open-source/spectacle/">http://formidable.com/open-source/spectacle/</a></li>
</ul>


<p>Reactを使い、JSXでスライドを作成するライブラリーです。
Markdownなんかも使えるようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.5 5/12〜5/18]]></title>
    <link href="http://blog.koba04.com/post/2016/05/18/reactjs-links-vol5/"/>
    <updated>2016-05-18T23:27:34+09:00</updated>
    <id>http://blog.koba04.com/post/2016/05/18/reactjs-links-vol5</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Meeting Note May 12 (React Meeting Note)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-12.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-12.md</a></li>
</ul>


<p>恒例のCore TeamのMeeting Noteです。
現在だと、production build時のエラーがわかりにくいものであったりとエラー周りの仕組みに不便なところがあるのでそれを改善することをReact Teamに来たインターンの人がやるそうです。すごい環境のインターンだ&hellip;。</p>

<p>RustやEmber参考にしたRFCのプロセスを構築することが検討されているようです。
また、ShallowRenderingとは別のテスト用にrendererのプロトタイプが作られていたりとこちらも興味深いです。</p>

<h2>Docs need one or more diagrams #653 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/653#issuecomment-216844781">https://github.com/reactjs/redux/issues/653#issuecomment-216844781</a></li>
</ul>


<p>Reduxでのデータの流れがダイアグラムで示されていてわかりやすいので、はじめて触る人は見ておくといいかもしれません。</p>

<h2>Tiny React Renderer (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/iamdustan/tiny-react-renderer">https://github.com/iamdustan/tiny-react-renderer</a></li>
</ul>


<p>ReactのRendererを理解するための小さな実装です。カスタムRendererを作りたかったり、Reactの内部を知りたい人はソースをみるといいんじゃないかと思います。</p>

<h2>react-router-scroll (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/taion/react-router-scroll">https://github.com/taion/react-router-scroll</a></li>
</ul>


<p>ReactRouterでスクロールマネージメントを行うためのライブラリーです。
scroll-behaviorをラップする感じになっているようです。</p>

<h2>flow-typed (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/flowtype/flow-typed">https://github.com/flowtype/flow-typed</a></li>
</ul>


<p>Flowの型定義を管理するリポジトリーです。前に公開されたリポジトリーですが、最近型定義が集まり出しています。</p>

<h2>Why did you update (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/garbles/why-did-you-update">https://github.com/garbles/why-did-you-update</a></li>
</ul>


<p>Reactにモンキーパッチを当てて、PropやStateが変わってないのにrerenderが行われたことを教えてくれるライブラリーです。
パフォーマンスチューニングしたい場合に便利かもしれません。</p>

<h2>Higher Order Components: Theory and Practice</h2>

<ul>
<li><a href="http://engineering.blogfoster.com/higher-order-components-theory-and-practice/">http://engineering.blogfoster.com/higher-order-components-theory-and-practice/</a></li>
</ul>


<p>ReactでMixinの代わりとしてよく使われるHigh Order Componentsのパターンについてのエントリーです。</p>

<h2>redux-observable (Redux Middleware)</h2>

<ul>
<li><a href="https://medium.com/@benlesh/redux-observable-ec0b00d2eb52">https://medium.com/@benlesh/redux-observable-ec0b00d2eb52</a></li>
</ul>


<p>ReduxとRxJS v5を組み合わせるためのライブラリーについてのエントリーです。
Ben LeshさんはRxJS v5のメインの開発者であり、以前に紹介した通りReduxに<code>es-observable</code>のspecに対応させるPRを送っていましたがここで結びつきました。このライブラリーはNetflixでも使っているようです。</p>

<p><a href="http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2/">http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2/</a></p>

<h2>React Elements vs React Components vs Component Backing Instances (React)</h2>

<ul>
<li><a href="https://medium.com/@fay_jai/react-elements-vs-react-components-vs-component-backing-instances-14d42729f62">https://medium.com/@fay_jai/react-elements-vs-react-components-vs-component-backing-instances-14d42729f62</a></li>
</ul>


<p>ReactElementとReact ComponentとComponentのinstanceの違いについてのエントリーです。</p>

<h2>Getting Started with React Native Development on Windows</h2>

<ul>
<li><a href="https://shift.infinite.red/getting-started-with-react-native-development-on-windows-90d85a72ae65">https://shift.infinite.red/getting-started-with-react-native-development-on-windows-90d85a72ae65</a></li>
</ul>


<p>ReactNativeの開発をWindows上で行う方法について解説したエントリーです。</p>

<h2>UI Testing in React</h2>

<ul>
<li><a href="https://voice.kadira.io/ui-testing-in-react-74fd90a5d58b#.tr0046jgs">https://voice.kadira.io/ui-testing-in-react-74fd90a5d58b#.tr0046jgs</a></li>
</ul>


<p>ReactでのUIテストについてのエントリーです。
テストをFunctional TestingとVisual Testingに分類して、Functional Testingはenzymeを、Visual TestingはReact
Storybookをそれぞれ使う方法が紹介されています。</p>

<h2>React Amsterdam</h2>

<ul>
<li><a href="https://speakerdeck.com/reactamsterdam">https://speakerdeck.com/reactamsterdam</a></li>
<li><a href="https://www.youtube.com/channel/UCsFrt8oKNYXGspSlX9u6uXw">https://www.youtube.com/channel/UCsFrt8oKNYXGspSlX9u6uXw</a></li>
</ul>


<p>React Amsterdamのスライドと動画が公開されています。
ReactNativeのinternalやJSSの話もあったりして色々面白そうです。</p>

<ul>
<li><a href="https://speakerdeck.com/reactamsterdam/tadeu-zagallo-facebook-london-react-native-architecture-overview">https://speakerdeck.com/reactamsterdam/tadeu-zagallo-facebook-london-react-native-architecture-overview</a></li>
<li><a href="https://speakerdeck.com/reactamsterdam/oleg-slobodskoi-chatgrape-berlin-javascript-style-sheets">https://speakerdeck.com/reactamsterdam/oleg-slobodskoi-chatgrape-berlin-javascript-style-sheets</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.4 4/29〜5/11]]></title>
    <link href="http://blog.koba04.com/post/2016/05/11/reactjs-links-vol4/"/>
    <updated>2016-05-11T18:41:13+09:00</updated>
    <id>http://blog.koba04.com/post/2016/05/11/reactjs-links-vol4</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.0.2 (React Release)</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.0.2">https://github.com/facebook/react/releases/tag/v15.0.2</a></li>
</ul>


<p>Reactのv15.0.2がリリースされています。Bug fixが中心です。</p>

<h2>React Core Meeting Note April 28 (React Meeting Note)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-04/april-28.md">https://github.com/reactjs/core-notes/blob/master/2016-04/april-28.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/pull/10">https://github.com/reactjs/core-notes/pull/10</a></li>
</ul>


<p>React Coreチームのmeeting noteです。
v15になったこともあり、リリースサイクルについての議論が行われているようです。</p>

<p>また、<code>Experimenting with StyleSheet.create() on the web</code>のようなトピックもあり、こちらも興味深いです。</p>

<h2>React Core Meeting Note May 5 (React Meeting Note)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-05.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-05.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/pull/13">https://github.com/reactjs/core-notes/pull/13</a></li>
</ul>


<p>React Coreチームのmeeting noteです。</p>

<p>また、<code>airbnb/enzyme</code>をofficialのTestUtilsに？みたいな話もあってこちらも注目です。</p>

<p>あとは、Server Side RenderingやCSSのvendor prefixについての議論もされています。</p>

<h2>Add new ReactPerf #6046 (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6046">https://github.com/facebook/react/pull/6046</a></li>
</ul>


<p>Dan Abramovが作業していたReactPerfのrewriteされたものがmergeされました。
<code>react@15.1.0-alpha.1</code>で試すことができます。</p>

<h2>RFC: New Reconciler Infra (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6690">https://github.com/facebook/react/pull/6690</a></li>
</ul>


<p>Reactのコア部分であるReconcilerと呼ばれているComponentの更新処理を管理する部分の新しいアウトラインとなる実装がmergeされました。まだ初期という感じですが。。
通常、Reactを使う場合にこのReconcilerは使われないので、コンセプトを共有するための実装という感じです。</p>

<p>後、コードベースがFlowになっていますね。ReactNativeのコードはFlowが使われていたりするので、今後Reactの本体のコードにもFlowが使われていくようになるかもしれません。</p>

<h2>React Native 0.25.1 (React Native Release)</h2>

<ul>
<li><a href="https://github.com/facebook/react-native/releases/tag/v0.25.1">https://github.com/facebook/react-native/releases/tag/v0.25.1</a></li>
</ul>


<p>これまでは、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">View</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>と<code>react-native</code>からReactもComponentもimportする必要あったのが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">View</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにView部分だけを<code>react-native</code>からimportする形になり、rendererの1つとしてのReact Nativeという形に近づきました。</p>

<h2>Flux 3.0 (Flux Release)</h2>

<ul>
<li><a href="https://github.com/facebook/flux/blob/master/CHANGELOG.md#300">https://github.com/facebook/flux/blob/master/CHANGELOG.md#300</a></li>
</ul>


<p>大きなところでは、Immutable.jsのMapをStateとして使うためのMapStoreが削除されました。</p>

<h2>React Native Express (React Native Tutorial)</h2>

<ul>
<li><a href="http://www.reactnativeexpress.com/">http://www.reactnativeexpress.com/</a></li>
</ul>


<p>ReactNativeのためのチュートリアル的なサイトです。サンプルが<code>react-native-web</code>を使って確認できるのは面白いですね。</p>

<h2>Proof of Concept: Enhancer Overhaul #1702 (Redux PR)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1702">https://github.com/reactjs/redux/pull/1702</a></li>
</ul>


<p>Storeを拡張する辺りについての新しいコンセプトについて議論されています。</p>

<h2>Mobile Twitter Web(React Users)</h2>

<ul>
<li><a href="https://mobile.twitter.com/">https://mobile.twitter.com/</a></li>
</ul>


<p>TwitterのモバイルWeb版がいつの間にかリニューアルされていて、Reactが使われています。
React Developer Toolsで見る限り、<code>react-router</code>と<code>redux</code>も使われているようです。</p>

<h2>State management is easy &ndash; Introduction to MobX (Slide)</h2>

<ul>
<li><a href="https://speakerdeck.com/mweststrate/state-management-is-easy-introduction-to-mobx">https://speakerdeck.com/mweststrate/state-management-is-easy-introduction-to-mobx</a></li>
</ul>


<p>Mendixというところが作ったMobXの紹介スライドです。
Storeとなるクラスの値をobservableにして、Compnentがobserveとなるような感じです。
これだとデータの流れが不明確になって大規模だと辛そうですが&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.3 4/20〜4/28]]></title>
    <link href="http://blog.koba04.com/post/2016/04/28/reactjs-links-vol3/"/>
    <updated>2016-04-28T19:19:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/28/reactjs-links-vol3</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React core meeting notes April 21 (React)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-04/april-21.md">https://github.com/reactjs/core-notes/blob/master/2016-04/april-21.md</a></li>
</ul>


<p>ReactのCore Teamによるmeeting note(4/21)が公開されています。</p>

<p>特に大きな何かがあるわけではないですが、いくつかのbugをfixした<code>15.0.2</code>が今週にも出そうです。
その他では、v15のリリース時にバタバタしたのでリリースプロセスの見直しなどが検討されているようです。
あとは、ReactのコードベースをFlow化することも議題に挙がっていました。</p>

<p>次の大きなfeatureとしては下のNew Core AlgorithmのIssueです。
詳細はまだわかりませんが、現在一度にまとめて行っているDOMの更新を分割して行うような感じになるなのかなと思います。
最初に表示されている部分だけを更新して、その後に非表示エリアのDOMを非同期で更新するみたいな。</p>

<p>この内容はこの後で紹介するDan AbamovのQ&amp;Aでも言及されていたので興味のある人は見てみるといいと思います。</p>

<ul>
<li><a href="https://github.com/facebook/react/issues/6170">https://github.com/facebook/react/issues/6170</a></li>
</ul>


<h2>Disabled inputs should not respond to clicks in IE (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6215">https://github.com/facebook/react/pull/6215</a></li>
</ul>


<p>IE11でdisableだった場合にもonChageイベントが発行されるバグを修正するPRがmergeされました。</p>

<h2>Move React Core Integration and Injection to the Core Repo #6338 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6338">https://github.com/facebook/react/pull/6338</a></li>
</ul>


<p>React NativeのReactとの連携部分がReactのリポジトリの中に含まれるようになりました。
特に何か変わることはないと思いますが、よりReact Nativeはreact-domのようにただのrendererの1つであるという位置付けになっていく流れなのかなと思います。</p>

<p>(実際なかなかそこまでうまく分割できていないようですが&hellip;)</p>

<h2>Provide info about component tree to devtools #6549 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6549">https://github.com/facebook/react/pull/6549</a></li>
</ul>


<p>React Perfの再構築に伴って、React DevToolのようなものを作るための環境が整備されてきています。
ソースを見る感じ、EventHandlerを登録しておくことで、Reactの中で起こるイベントをlistenすることができるようになるのでthird partyのライブラリーも作りやすくなるのかなと思います。</p>

<h2>Add comments/attribute indicating which component was rendered #6559 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6559">https://github.com/facebook/react/issues/6559</a></li>
</ul>


<p>ChromeとFirefox以外のReactのDevToolsを持っていないブラウザーだと、どのComponentがrenderされたのかわからないので、<code>data-reactcomponent</code>のような属性をDOMに付与するのはどうかという提案です。
もちろん開発環境のみで、別のフラグでOn/Offできるような感じで。</p>

<p>いるのかな&hellip;。</p>

<h2>QA with Dan Abramov in Reactiflux (Link)</h2>

<ul>
<li><a href="https://github.com/reactiflux/q-and-a/blob/master/dan-abramov_react-core.md">https://github.com/reactiflux/q-and-a/blob/master/dan-abramov_react-core.md</a></li>
</ul>


<p>Dan AbramovがReactifluxのDiscordで行ったQ&amp;Aのまとめです。
Facebookで何をやってるとかRedux、Reactについての質問に答えています。</p>

<p>今後の予定は下記で確認できます。Ben Alpertの会が個人的に楽しみです。そして何気にJonathan Carterが。</p>

<ul>
<li><a href="https://paper.dropbox.com/doc/Reactiflux-QA-Schedule-7QAfGzEqfKjtN9UmhYYM9">https://paper.dropbox.com/doc/Reactiflux-QA-Schedule-7QAfGzEqfKjtN9UmhYYM9</a></li>
</ul>


<h2>AMA with Lee Byron (Link)</h2>

<ul>
<li><a href="https://hashnode.com/ama/with-lee-byron-cin0kpe8p0073rb53b19emcda">https://hashnode.com/ama/with-lee-byron-cin0kpe8p0073rb53b19emcda</a></li>
</ul>


<p>GraphQLやImmutable.jsのメンテナーであるLee Byronが色々質問に答えています。
GraphQLやImmutable.jsだけでなく、Facebook内での開発についてやReactについてやCSS modulesどう思うかなど色々答えているので面白いです。
GraphQLとFalcor比べてどう？TypeScriptがあるのになんでFlowを作っているのか？
Burnoutにどう対処すべきかなどなど。(FacebookにはHack-a-monthという仕組みがあるらしい)</p>

<h2>Add Redux Logo #1671 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1671">https://github.com/reactjs/redux/pull/1671</a></li>
<li><a href="https://github.com/reactjs/redux/issues/151">https://github.com/reactjs/redux/issues/151</a> (ロゴのアイデア)</li>
</ul>


<p>ようやくReduxのロゴが決まったようです。</p>

<h2>Redux FAQ (Redux documentation)</h2>

<ul>
<li><a href="http://redux.js.org/docs/FAQ.html">http://redux.js.org/docs/FAQ.html</a></li>
</ul>


<p>少し前に追加されたReduxのFAQページです。</p>

<p><strong>Do I have to put all my state into Redux? Should I ever use React’s setState()?</strong>や、<strong>How can I represent “side effects” such as AJAX calls? Why do we need things like “action creators”, “thunks”, and “middleware” to do async behavior?</strong>など、Reduxでアプリケーションを作る時に気になるような質問があるので、Reduxを使っている人は見てみることをオススメします。</p>

<h2>Remove unneeded code #1640 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1640">https://github.com/reactjs/redux/pull/1640</a></li>
</ul>


<p>Reduxのutils/warningがなぜ↓のようなことをしているのか。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// This error was thrown as a convenience so that if you enable</span>
</span><span class='line'>    <span class="c1">// &quot;break on all exceptions&quot; in your console,</span>
</span><span class='line'>    <span class="c1">// it would pause the execution at this line.</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">message</span><span class="p">)</span>
</span><span class='line'>  <span class="cm">/* eslint-disable no-empty */</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/reactjs/redux/blob/master/src/utils/warning.js#L13-L19">https://github.com/reactjs/redux/blob/master/src/utils/warning.js#L13-L19</a></p>

<p>&ldquo;break on all exceptions&#8221;を有効にしている時にここで止まるようにしているんですね。なるほど。</p>

<h2>How to sync Redux state and url hash tag params (Redux Stackoverflow)</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/36722584/how-to-sync-redux-state-and-url-hash-tag-params/36749963#36749963">http://stackoverflow.com/questions/36722584/how-to-sync-redux-state-and-url-hash-tag-params/36749963#36749963</a></li>
</ul>


<p>ReduxでURLのqueryやhashで状態を管理したい時にStateとどう同期すればいいの？<code>react-router-redux</code>使えばいいの？という質問です。
それに対して作者のDan Abramovが解答しています。
Reduxの質問に解答しているのをよく見るのでわからないことがあったらstackoverflowで聞いてみるといいかもしれないですね。</p>

<p>Stateと管理する必要はなくて、必要となった時にURLから値を取得して使えばいいという答えです。
StateにすることでActionになるので、リプレイなどがやりやすくなるメリットはありますが、必要でない場合は複雑になるだけです。</p>

<h2>MobX (Library)</h2>

<ul>
<li><a href="https://github.com/mobxjs/mobx">https://github.com/mobxjs/mobx</a></li>
</ul>


<p>Observableを活用したReduxライクなState Managementのライブラリーです。
TypeScriptで書かれています。
Reactと組み合わせることが想定されているようで、Reactとbindingするためのライブラリーもあります。</p>

<p>10分でわかる説明</p>

<ul>
<li><a href="https://mobxjs.github.io/mobx/getting-started.html">https://mobxjs.github.io/mobx/getting-started.html</a></li>
</ul>


<p>ちゃんと中身見てないので、イマイチどのあたりが素晴らしいのかわからかなったので、気が向いたらまた見てみます。
<code>@observable decorator (ES2015)</code>って書いたのがとても気になりました&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Podcasts I'm listening]]></title>
    <link href="http://blog.koba04.com/post/2016/04/21/podcasts-im-listening/"/>
    <updated>2016-04-21T18:39:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/21/podcasts-im-listening</id>
    <content type="html"><![CDATA[<p>以前Qiitaで少し書きましたが、最近聴いている英語のPodcastの一覧のメモ。
日本語だとRebuild.fmとかmozaic.fmとかを聴いてますがまぁ言うまでもないので。</p>

<p>英語力の問題で内容と話す人によっては全く意味がわからないこともありますが、こんな感じのPodcastをsubscribeしていて、気になったエピソードだけを通勤時に聞いています。
週に1〜2エピソードくらいしか聴いてないですが&hellip;。</p>

<p>なんとなく、よく聴いている順番に並べてみました。</p>

<!-- more -->


<h2>Software Engineering Daily</h2>

<ul>
<li><a href="http://softwareengineeringdaily.com/">http://softwareengineeringdaily.com/</a></li>
</ul>


<p>本当にデイリーで1hくらいのエピソードが配信されていてすごいです。
基本的には1on1のインタビュー形式で、オーナーの人がゆっくり話してくれるのでわかりやすいです。</p>

<p>内容はサーバーサイドからフロントエンド、Netflixなどの開発スタイルなど幅広い感じです。ただ、JavaScript系の話が多いような気もします。</p>

<p>英語の聞き取りやすさもそうですが、What is Flux?のようなすごいシンプルな質問から入っていったりするので内容もわかりやすいです。</p>

<h2>JavaScript Jabber</h2>

<ul>
<li><a href="https://devchat.tv/js-jabber">https://devchat.tv/js-jabber</a></li>
</ul>


<p>JavaScript系のPodcastだと一番有名な気がします。
レギュラーのパネリストもゲストも複数なことが多く、盛り上がってくると複数人がわーっと話すので、ついていけないことも多いです。</p>

<p>個人的には取り上げているトピックやゲストが興味深いことが多いです。</p>

<p>最近音楽が変わったのですが、個人的には前の曲の方が好きでした。あの曲なんだったんだろう&hellip;。</p>

<h2>5 Minutes of JavaScript</h2>

<ul>
<li><a href="https://fivejs.codeschool.com/">https://fivejs.codeschool.com/</a></li>
</ul>


<p>Podcastのスポンサーとして個人的にはおなじみのCode SchoolがやっているPodcastです。
毎週JavaScriptに関するトピックを30s〜60sくらいで何個か取り上げていくPodcastです。</p>

<p>たいてい7minくらいなので気軽に聞けます。</p>

<h2>Modern Web</h2>

<ul>
<li><a href="http://www.modern-web.org/#/modern-web-podcast">http://www.modern-web.org/#/modern-web-podcast</a></li>
</ul>


<p>最近聴き始めたPodcastです。
JavaScriptのフロントエンド周りが中心です。Emberの話とFRPとかRxJSとかObservableとかの話が多い印象です。
まぁ1〜2エピソードしか聞いてないですが、聴きやすい気がしています。</p>

<h2>JavaScript Air</h2>

<ul>
<li><a href="https://javascriptair.com/">https://javascriptair.com/</a></li>
</ul>


<p>JavaScriptに関する、話題になっているライブラリーなどを取り上げてレギュラーのパネリストとゲスト複数人でワイワイ話すスタイルのPodcastです。</p>

<p>Google Hangoutで収録しているようですが、人によっては音がかなり悪くて聞き取りにくいことも&hellip;。
ただ、内容はフロントエンドやっている人には面白いものが多いです。</p>

<p>ちなみにレギュラーのパネリストにReduxの作者のDan Abramovがいて、たまに出てます。あんまり話さないけど。</p>

<h2>The Web Platform Podcast</h2>

<ul>
<li><a href="http://www.thewebplatformpodcast.com/">http://www.thewebplatformpodcast.com/</a></li>
</ul>


<p>Webに関する話題を取り上げるPodcastです。
フロントエンド系の話が多い印象がありますが、Platformの話やWebなど広い範囲のテーマを取り上げている印象です。</p>

<h2>The Changelog</h2>

<ul>
<li><a href="https://changelog.com/podcast/">https://changelog.com/podcast/</a></li>
</ul>


<p>Webやプログラミングに関する話題を広く取り上げているPodcastです。
DHHが出たりなどおおっ、思う人がたまに出て来て面白いです。</p>

<h2>NodeUp</h2>

<ul>
<li><a href="http://nodeup.com/">http://nodeup.com/</a></li>
</ul>


<p>Node.js自体に関する話題が多いPodcastです。</p>

<h2>Software Engineering Radio</h2>

<ul>
<li><a href="http://www.se-radio.net/">http://www.se-radio.net/</a></li>
</ul>


<p>名前の通り、Software Engineeringに関するテーマを取り上げたPodcastです。DevOpsとか。
Dave Thomasが出たりもしてました。</p>

<h2>React Native Radio</h2>

<ul>
<li><a href="https://devchat.tv/react-native-radio">https://devchat.tv/react-native-radio</a></li>
</ul>


<p>React Nativeに関する話題を取り上げるPodcastです。
React Native以外にもAndre Staltzが出てCycle.jsの話をしたり、Facebookの人が出てGraphQLの話をしたリもしています。</p>

<h2>Soft Skills Engineering</h2>

<ul>
<li><a href="https://itunes.apple.com/us/podcast/soft-skills-engineering/id1091341048?mt=2">https://itunes.apple.com/us/podcast/soft-skills-engineering/id1091341048?mt=2</a></li>
</ul>


<p>まだ1話して聞いてないですが&hellip;。
Softとある通り、tech以外の話題を取り上げているPodcastです。
キャリアについてなど他のPodcastではあまり話題にならないような内容について話されています。</p>

<p>おわり。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.2 4/15〜4/19]]></title>
    <link href="http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2/"/>
    <updated>2016-04-19T19:19:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>Server-side Environments (React documentation)</h2>

<ul>
<li><a href="http://facebook.github.io/react/docs/environments.html">http://facebook.github.io/react/docs/environments.html</a></li>
</ul>


<p>あまり内容はありませんが、NashornとNode環境でReactを使った例を紹介するドキュメントが追加されました。</p>

<h2>Error reporting in production #2686 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/2686">https://github.com/facebook/react/issues/2686</a></li>
</ul>


<p>かなり前のIssueですが、最近また盛り上がっているので紹介します。</p>

<p>Reactでは、warningとerrorの2種類のログレベルがありますが、現在は<code>NODE_ENV</code>がproductionであるかどうかでログを有効にするか無効にするかを切り替えることしかできません。
このissueはその辺りの改善に関するものです。</p>

<p>前回紹介したリンクでも、developmentビルドとproductionビルドのパフォーマンスの違いについてありましたが、developmentビルドでは実行速度を気にせずにデバッグログを出力していて、productionビルドでは速度優先で不要なチェックは一切行われていません。
その結果、パフォーマンスに大きな違いがあります。</p>

<p>そのため、developmentビルドのままで本番に投入することも難しく、かといってproductionビルドのままでerrorのログを確認したいという場面に対応できていません。
現在作り直しが行われているPerf周りでもPROFILEフラグをという話もあるので、その辺りとあわせて<code>REACT_ENV</code>のような新しい仕組みが入るかもしれません。</p>

<h2>Two Weird Tricks with Redux (Blog)</h2>

<ul>
<li><a href="http://jlongster.com/Two-Weird-Tricks-with-Redux">http://jlongster.com/Two-Weird-Tricks-with-Redux</a></li>
</ul>


<p>Firefox Developer Toolの開発をしている<a href="https://twitter.com/jlongster">@jlongster</a>さんによるFirefox Developer Toolsの開発にReduxを使った時の話です。
非同期処理をどうやって扱ったかということが書かれています。</p>

<p>言及されているソースはこのあたりにあるので気になる人は見るといいと思います。</p>

<ul>
<li><a href="https://github.com/mozilla/gecko-dev/tree/master/devtools/client/debugger/content">https://github.com/mozilla/gecko-dev/tree/master/devtools/client/debugger/content</a></li>
</ul>


<h2>React Flip Move (Library)</h2>

<ul>
<li><a href="https://github.com/joshwcomeau/react-flip-move/">https://github.com/joshwcomeau/react-flip-move/</a></li>
</ul>


<p>React Componentをアニメーションさせるためのライブラリーです。
READMEを見る限り、シンプルで使いやすそうです。react-motionを使っているのかと思ったけど独自実装でした。</p>

<h2>What to use for React styling? (Blog)</h2>

<ul>
<li><a href="http://andrewhfarmer.com/how-to-style-react/">http://andrewhfarmer.com/how-to-style-react/</a></li>
</ul>


<p>ReactとCSSをどのように組み合わせるのかを解説したエントリーです。
MethodologiesとPreprocessorsとPostprocessorsとInline Style Helpersのアプローチに分けて、それぞれどんな特徴でどんなライブラリーがあるということが解説されています。
ReactとCSSの扱いに悩んでいる人は見てみるといいかもしれません。</p>

<h2>Proposal: Add support for observable spec interop point #1631 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/1631">https://github.com/reactjs/redux/issues/1631</a></li>
<li><a href="https://github.com/reactjs/redux/pull/1632">https://github.com/reactjs/redux/pull/1632</a></li>
</ul>


<p>ReduxのStoreを現在stage1のes-observableの<code>Symbol.observable</code>に対応させるIssueとPRです。
これにより、RxJS 5やその他のライブラリーとも組み合わせやすくなります。</p>

<p>PR出してるのはRxJS 5のメインの開発者である<a href="https://github.com/blesh">blesh</a>さんです。
<code>Symbol.observable</code>のponyfillには<a href="https://github.com/blesh/symbol-observable">blesh/symbol-observable</a>が使われています。</p>

<h2>eslint-config-airbnb 7,0 (Library)</h2>

<ul>
<li><a href="https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/CHANGELOG.md#700--2016-04-11">https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/CHANGELOG.md#700&#8211;2016-04-11</a></li>
</ul>


<p>Reactに関するLintも含んでいるeslint-config-airbnbの7.0がリリースされています。
React Componentのaccessibilityを検査する<code>eslint-plugin-a11y</code>が依存に追加されたので、アップデートする際は追加でインストールする必要があります。</p>

<ul>
<li><a href="https://github.com/evcohen/eslint-plugin-jsx-a11y">https://github.com/evcohen/eslint-plugin-jsx-a11y</a></li>
</ul>


<h2>5 Open Source React Native Projects To Learn From (React Native Blog)</h2>

<ul>
<li><a href="https://medium.com/@bilalbudhani/5-open-source-react-native-projects-to-learn-from-fb7e5cfe29f2">https://medium.com/@bilalbudhani/5-open-source-react-native-projects-to-learn-from-fb7e5cfe29f2</a></li>
</ul>


<p>ソースが公開されている5つのReactNativeのアプリが紹介されています。</p>

<h2>React Hot Loader 3.0 alpha demo (Library)</h2>

<ul>
<li><a href="https://github.com/gaearon/react-hot-loader/pull/240">https://github.com/gaearon/react-hot-loader/pull/240</a></li>
</ul>


<p>React Hot Loaderの3.0のalpha版がリリースされています。2は飛ばして一気に3になったようです。
3.0のデモは下記で紹介されていますので使っている人は確認してみるといいと思います。</p>

<ul>
<li><a href="https://github.com/gaearon/react-hot-boilerplate/pull/61">https://github.com/gaearon/react-hot-boilerplate/pull/61</a></li>
</ul>


<p>個人的には使っていないので詳細はわからないですが、Stateless ComponentsやHOC辺りのサポートや設定周りが改善されたようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Links vol.1 4/6〜4/14]]></title>
    <link href="http://blog.koba04.com/post/2016/04/14/reactjs-links-vol1/"/>
    <updated>2016-04-14T13:17:31+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/14/reactjs-links-vol1</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<p>今週はF8があったのでReact Native関連の記事が多くありました。</p>

<!-- more -->


<h2>React v15</h2>

<ul>
<li><a href="http://facebook.github.io/react/blog/2016/04/07/react-v15.html">http://facebook.github.io/react/blog/2016/04/07/react-v15.html</a></li>
<li><a href="https://facebook.github.io/react/blog/2016/04/08/react-v15.0.1.html">https://facebook.github.io/react/blog/2016/04/08/react-v15.0.1.html</a></li>
</ul>


<p>React v15がリリースされました。バグがあったのですぐに15.0.1がリリースされています。インストールする際には15.0.1を使用してください。</p>

<p>細かいfeatureについてはブログ書いたのでそちらをみてください</p>

<ul>
<li><a href="http://blog.koba04.com/post/2016/03/09/react-js-v15-changes/">http://blog.koba04.com/post/2016/03/09/react-js-v15-changes/</a></li>
</ul>


<h2>React Native: A year in review</h2>

<ul>
<li><a href="https://code.facebook.com/posts/597378980427792/react-native-a-year-in-review/">https://code.facebook.com/posts/597378980427792/react-native-a-year-in-review/</a></li>
</ul>


<p>React Nativeが2013年の夏に社内の(?)hackathonで誕生してから、30,000以上のstarをgithubで得るようになるまでのStoryが書かれています。
&ldquo;The React Native team has grown from around 10 to around 20 engineers in the past year&#8221;や&#8221;we are 1 percent finished. &#8220;とあるように、今後も力を入れていくことがわかります。
Facebookのエンジニア以外からのcommitも30%くらいあって、Facebook以外でも使われていることがわかります。</p>

<p>また、facebookがreact-nativeのリポジトリをどのように管理しているのかや、たくさんのissueやPRを処理するために作ったmention-botなどについても書かれていて、巨大なOSSをgithubでどう管理するかという点でも面白いです。</p>

<p><a href="https://github.com/facebook/mention-bot">https://github.com/facebook/mention-bot</a></p>

<h2>Building the F8 2016 App</h2>

<ul>
<li><a href="http://makeitopen.com/">http://makeitopen.com/</a></li>
</ul>


<p>ReactNativeを使ってF8のiOSとAndroidのアプリを作った際のことを、チュートリアルとして紹介しています。
どのような構成にするのかを検討して、マルチプラットフォーム対応をどうするか、データ管理をどうするか、テストをどうするかなどが書かれていてとても参考になります。</p>

<p>React使っている人は一度見てみるといいんじゃないかと思います。</p>

<p>ReactNative + Flow + Redux + Jestな構成でサーバーサイドにはOSSのParse Serverを使っているようです。
エディターはNuclideだそうです。</p>

<p>アプリのソースコードもgithubで公開されています。</p>

<ul>
<li><a href="https://github.com/fbsamples/f8app">https://github.com/fbsamples/f8app</a></li>
</ul>


<h2>React Native on the Universal Windows Platform</h2>

<ul>
<li><a href="https://blogs.windows.com/buildingapps/2016/04/13/react-native-on-the-universal-windows-platform/">https://blogs.windows.com/buildingapps/2016/04/13/react-native-on-the-universal-windows-platform/</a></li>
</ul>


<p>MicroSoftがUniversal Windows Platform (UWP)対応をReactNativeに追加することが書かれています。
これにより、WindowsのPCがモバイルだけでなく、Xbox OneやHoloLensのためのアプリをReactNativeで作れるようになります。
記事では、F8のアプリをWindows 10 mobileとDesktop向けに作ったことが紹介されています。</p>

<p>JavaScriptのランタイムにはChakraが使われているみたいです。</p>

<p>また、VSCodeのReactNative拡張やReactNativeを使ったWindowsアプリに対するCodePush対応などを行っているようです。</p>

<ul>
<li><a href="http://microsoft.github.io/code-push/articles/ReactNativeWindows.html">http://microsoft.github.io/code-push/articles/ReactNativeWindows.html</a></li>
</ul>


<p>現在はforkしたrepositoryになっていますが、将来的にはReactNative本体と同期が取れるようにうまくやっていくようです。</p>

<p><a href="https://github.com/ReactWindows/react-native">https://github.com/ReactWindows/react-native</a></p>

<h2>core note 4/7</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-04/april-7.md">https://github.com/reactjs/core-notes/blob/master/2016-04/april-7.md</a></li>
</ul>


<p>Reactのcoreチームのmeeting noteが公開されています。
以前はあったものの途中で削除されたBrowser Testingについて言及されているのは注目です。</p>

<p>その他では、<em>ReactDOM.render() return value being <del>deprecated</del> legacy</em> (<a href="https://github.com/facebook/react/pull/6400">#6400</a>) も注目です。
内部的なアルゴリズムの見直しをするために、ReactDOM.renderが将来的に戻り値を返さなくなります。
戻り値を使いたい場合は、Refsを指定して取得することになりそうです。</p>

<p>また、<em>Sebastian is moving some files from React Native to React</em> (<a href="https://github.com/facebook/react/pull/6338">#6338</a>)としてReactNativeのrenderer周りをreactのrepositoryに持ってきて、<code>react-native-renderer</code>として別パッケージにすることも予定されています。
さらに<code>react-dom</code>から<code>react-dom-renderer</code>も切り離すことを検討されています。</p>

<p>これによってカスタムrendererを作る時のI/Fが整備されて、わかりやすくなるといいなと思います。
Windows対応もあったりでこの辺りを整理する優先度は高そうです。</p>

<h2>Improve React performance with Babel</h2>

<ul>
<li><a href="https://medium.com/doctolib-engineering/improve-react-performance-with-babel-16f1becfaa25">https://medium.com/doctolib-engineering/improve-react-performance-with-babel-16f1becfaa25</a></li>
</ul>


<p>productionビルドやBabelの最適化を使った場合のパフォーマンスについてのエントリーです。当たり前ですが、developmentビルドとproductionビルドのパフォーマンスの違いが目立っています。
Babelを使った最適化の場合でも数%の向上が見られますが、アプリケーションによるので利用する際は計測してみて導入することをおすすめします。</p>

<h2>unofficial React Router docs</h2>

<ul>
<li><a href="http://knowbody.github.io/react-router-docs/">http://knowbody.github.io/react-router-docs/</a></li>
</ul>


<p><a href="https://github.com/knowbody">knowbody</a>さんによる非公式なReact Routerのドキュメントです。WIPですが、公式を読んでよくわからなかった人は確認してみるといいかもしれません。</p>

<h2>React Router is dead. Long live rrtr.</h2>

<p><strong>下のエントリーは現在は削除されています。</strong></p>

<ul>
<li><del><a href="https://medium.com/@taion/react-router-is-dead-long-live-rrtr-d229ca30e318#.vd0qjkccc">https://medium.com/@taion/react-router-is-dead-long-live-rrtr-d229ca30e318#.vd0qjkccc</a></del></li>
</ul>


<p>React Routerでここ数ヶ月中心的にcontributeしていた<a href="https://github.com/taion">taion</a>さんがリリースのサイクルの遅さやプロセスに不満を抱いてforkして<a href="https://github.com/taion/rrtr">rrtr</a>を作ったことを表明したエントリーです。</p>

<p>それに対して、React Routerのオーナーである<a href="https://github.com/ryanflorence">ryanflorence</a>さんもgistでリアクションしています。</p>

<ul>
<li><del><a href="https://gist.github.com/ryanflorence/08a056374e24a7cda3c459e3d7d63e6e">https://gist.github.com/ryanflorence/08a056374e24a7cda3c459e3d7d63e6e</a></del> (<strong>これも削除済み</strong>)</li>
</ul>


<p>で下の通り、結局丸く収まりました。</p>

<ul>
<li><a href="https://medium.com/rackt-and-roll/rrtr-is-dead-long-live-react-router-ce982f6f1c10">https://medium.com/rackt-and-roll/rrtr-is-dead-long-live-react-router-ce982f6f1c10</a></li>
</ul>


<p>結果的に、PRをmergeするプロセスや定期的なリリースなど、プロジェクトの運営方針が行われました。</p>

<p>ちなみにtaionさんはhistoryと組み合わせてscroll位置の復元などをサポートするscroll-behaviorというライブラリーも公開しています。</p>

<ul>
<li><a href="https://github.com/taion/scroll-behavior">https://github.com/taion/scroll-behavior</a></li>
</ul>


<h2>crysislinux/chrome-react-perf</h2>

<ul>
<li><a href="https://github.com/crysislinux/chrome-react-perf">https://github.com/crysislinux/chrome-react-perf</a></li>
</ul>


<p>Perfによる計測をChrome Developer Toolsで行うことができるライブラリーです。
カジュアルに計測が出来そうなのでよさそうです。</p>
]]></content>
  </entry>
  
</feed>
