<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2015-02-26T21:27:11+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React v0.13.0 Beta1でclassでComponentが作れるようになった]]></title>
    <link href="http://blog.koba04.com/post/2015/01/28/published-react-v0.13.0-beta1/"/>
    <updated>2015-01-28T17:20:35+09:00</updated>
    <id>http://blog.koba04.com/post/2015/01/28/published-react-v0.13.0-beta1</id>
    <content type="html"><![CDATA[<p>React.js Confの前日にv0.13.0 Beta1がnpmにpublishされました。</p>

<p><a href="http://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html">http://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html</a></p>

<p>featureは色々あるみたいですが、↑のブログにはその1つとしてClassによるReact Componentの作成が紹介されていたのでそれについて書きたいと思います。</p>

<p>ちなみに<code>React.createClass</code>を使う場合はこれまでと同じままで大丈夫なはずです。</p>

<!-- more -->


<h2>ES6 Classes</h2>

<p><code>React.createClass</code>ではなくて、ES6のclassを使って↓みたいな感じで書けるようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">React</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">Hello</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">val</span><span class="o">:</span> <span class="nx">props</span><span class="p">.</span><span class="nx">foo</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">onClick</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">val</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">val</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">state</span> <span class="nx">is</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">val</span><span class="p">}.</span> <span class="nx">props</span> <span class="nx">is</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">foo</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onClick</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span><span class="o">&gt;</span><span class="nx">click</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">Hello</span><span class="p">.</span><span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">foo</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>ポイントとしては</p>

<ul>
<li><code>React.Component</code>をextendsします。</li>
<li><code>constructor</code>に<code>props</code>が引数として渡ってくるのでそれを使って必要に応じて<code>state</code>の初期化をする。

<ul>
<li><code>getInitialState</code>は使うことができません。(warnが出ます)</li>
</ul>
</li>
<li>Autobindingはされなくなったので明示的に<code>this.onClick.bind(this)</code>のようにする必要があります。</li>
<li><code>propTypes</code>や<code>defaultProps</code>はconstructorのpropertyとして指定する必要があります。</li>
<li>現時点で<code>mixin</code>はclassで書いた場合は使うことができません。</li>
</ul>


<p>といった辺りです。</p>

<h3>変換</h3>

<p>ES6のコードの変換は、これまで通りreact-toolsでjsxの<code>--harmony</code>optionを有効にしたり6to5使ったりする感じです。</p>

<h3>今後</h3>

<p>今の書き方だと微妙に感じるところも結構あるのですが、最終的には↓のような形で書けるようにしたいみたいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">React</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">class</span> <span class="nx">Hello</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">propTypes</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PropTypes</span><span class="p">.</span><span class="nx">number</span> <span class="p">};</span>
</span><span class='line'>  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">val</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">foo</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">};</span>
</span><span class='line'>  <span class="nx">onClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">val</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">val</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">state</span> <span class="nx">is</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">val</span><span class="p">}.</span> <span class="nx">props</span> <span class="nx">is</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">foo</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">onClick</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">click</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>mixinについてはreact-futureを見る限りこんな感じになるのかもしれないですね。</p>

<p><a href="https://github.com/reactjs/react-future/blob/master/01%20-%20Core/02%20-%20Mixins.js">https://github.com/reactjs/react-future/blob/master/01%20-%20Core/02%20-%20Mixins.js</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">mixin</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;react-utils&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;react&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">A</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Hello</span> <span class="kr">extends</span> <span class="nx">mixin</span><span class="p">(</span><span class="nx">Component</span><span class="p">,</span> <span class="nx">A</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CoffeeScript &amp; TypeScript</h3>

<p>ちなみにES6だけでなく、CoffeescriptやTypeScriptのClass syntaxでもかけます。</p>

<hr />

<p>React.js自体でやることを減らしてES6、7のfeatureに任せることが出来るところは任せようといった方向性を感じて個人的にはいいんじゃないかと思っています。</p>

<p>React.js Conf行きたかった&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A combination of React.js and 6to5]]></title>
    <link href="http://blog.koba04.com/post/2015/01/13/a-combination-of-reactjs-and-6to5/"/>
    <updated>2015-01-13T18:50:28+09:00</updated>
    <id>http://blog.koba04.com/post/2015/01/13/a-combination-of-reactjs-and-6to5</id>
    <content type="html"><![CDATA[<p>In English article is <a href="http://en.blog.koba04.com/2015/02/04/a-combination-of-reactjs-and-6to5/">here</a>.</p>

<p>今までは、react-toolsを使ってjsxのharmony optionを有効にして書くことで一部のES6のfeatureが使えて満足していたのですが、azuさんの記事を見て6to5を試したくなったのでReact.js + 6to5の組み合わせで書いてみました。</p>

<ul>
<li><a href="https://6to5.org/">https://6to5.org/</a></li>
<li><a href="http://efcl.info/2015/01/09/write-es6/">http://efcl.info/2015/01/09/write-es6/</a></li>
</ul>


<p>結論から言うと6to5自体がjsxのサポートもしているので何も意識することなく書けていい感じでした。</p>

<p>コードはこんな感じ。</p>

<p><a href="https://github.com/koba04/react-boilerplate">https://github.com/koba04/react-boilerplate</a></p>

<!-- more -->


<h2>structure</h2>

<h3>browserify + 6to5ify</h3>

<p>変換の流れはbrowserifyのtransformである6to5ifyを使うので、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ES6  -&gt;   CommonJS(ES5)      -&gt;       bundle.js
</span><span class='line'>    6to5                 browserify</span></code></pre></td></tr></table></div></figure>


<p>な形になっています。</p>

<p>AltJSで書くときと同じ流れです。</p>

<h2>configuration</h2>

<p><a href="https://github.com/koba04/react-boilerplate/blob/master/package.json">https://github.com/koba04/react-boilerplate/blob/master/package.json</a></p>

<h3>bundle.js</h3>

<p>bundle.jsの作成はただ、6to5ifyをtransformとして指定するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;watch&quot;</span><span class="o">:</span> <span class="s2">&quot;watchify app/index.js -o dist/bundle.js -v&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;build&quot;</span><span class="o">:</span> <span class="s2">&quot;browserify app/index.js &gt; dist/bundle.js&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;browserify&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;transform&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">[</span> <span class="s2">&quot;6to5ify&quot;</span> <span class="p">]</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>start server</h3>

<p>serverを立ち上げる時は、entry pointとなるserver.jsもES6で書きたいので、6to5に含まれている<code>6to5-node</code>コマンドを利用します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;start&quot;</span><span class="o">:</span> <span class="s2">&quot;6to5-node server&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>これによってserver.jsもES6で書くことが出来るようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">express</span>  <span class="nx">from</span> <span class="s1">&#39;express&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span>    <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">App</span>      <span class="nx">from</span> <span class="s1">&#39;./app/components/App&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">app</span>     <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">html</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">renderToString</span><span class="p">(</span><span class="nx">React</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="nx">App</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">path</span><span class="o">:</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="nx">name</span>
</span><span class='line'>    <span class="p">}));</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span>        <span class="nx">handler</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/artist&#39;</span><span class="p">,</span>  <span class="nx">handler</span><span class="p">(</span><span class="s1">&#39;artist&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/country&#39;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">(</span><span class="s1">&#39;country&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">__dirname</span><span class="o">+</span><span class="s1">&#39;/dist&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">5000</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;listening...&quot;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>test by Jest</h3>

<p>Jestのテストについても<code>6to5-jest</code>というmoduleがあるのでそれをinstallして、scriptPreprocessorに指定するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="s2">&quot;jest&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;scriptPreprocessor&quot;</span><span class="o">:</span> <span class="s2">&quot;&lt;rootDir&gt;/node_modules/6to5-jest&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">jest</span><span class="p">.</span><span class="nx">dontMock</span><span class="p">(</span><span class="s1">&#39;../InputArtist&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span>                    <span class="nx">from</span> <span class="s1">&#39;react/addons&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">InputArtist</span>              <span class="nx">from</span> <span class="s1">&#39;../InputArtist&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">AppTracksActionCreators</span>  <span class="nx">from</span> <span class="s1">&#39;../../actions/AppTracksActionCreators&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;inputArtist&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">inputArtist</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">inputArtist</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">TestUtils</span><span class="p">.</span><span class="nx">renderIntoDocument</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">InputArtist</span> <span class="o">/&gt;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;state&quot;</span><span class="p">,</span>  <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;set inputArtist radiohead&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">inputArtist</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">inputArtist</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s2">&quot;radiohead&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;handleSubmit&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">preventDefault</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">preventDefault</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">genMockFunction</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">inputArtist</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span> <span class="nx">inputArtist</span><span class="o">:</span> <span class="s1">&#39;travis&#39;</span> <span class="p">});</span>
</span><span class='line'>      <span class="nx">React</span><span class="p">.</span><span class="nx">addons</span><span class="p">.</span><span class="nx">TestUtils</span><span class="p">.</span><span class="nx">Simulate</span><span class="p">.</span><span class="nx">submit</span><span class="p">(</span><span class="nx">inputArtist</span><span class="p">.</span><span class="nx">getDOMNode</span><span class="p">(),</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">preventDefault</span><span class="o">:</span> <span class="nx">preventDefault</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">it</span> <span class="p">(</span><span class="s2">&quot;calls AppTracksActionCreators.fetchByArtist with state.inputArtist&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">AppTracksActionCreators</span><span class="p">.</span><span class="nx">fetchByArtist</span><span class="p">).</span><span class="nx">toBeCalled</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">AppTracksActionCreators</span><span class="p">.</span><span class="nx">fetchByArtist</span><span class="p">).</span><span class="nx">toBeCalledWith</span><span class="p">(</span><span class="s1">&#39;travis&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">it</span> <span class="p">(</span><span class="s2">&quot;calls e.preventDefault&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">preventDefault</span><span class="p">).</span><span class="nx">toBeCalled</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>code</h2>

<h3>JSX</h3>

<p>6to5ではjsxもサポートしているので、何も意識することなくjsxを書いておくことが出来ます。</p>

<p><a href="https://6to5.org/docs/usage/jsx/">https://6to5.org/docs/usage/jsx/</a></p>

<h3>ES6 modules</h3>

<p>今までは、ES6を感じながらcommonJS styleで書くのもちょっとなぁという気持ちがありましたがこれによってES6 modulesのstyleで書くことが出来ていい感じです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span>        <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Nav</span>          <span class="nx">from</span> <span class="s1">&#39;./Nav&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Footer</span>       <span class="nx">from</span> <span class="s1">&#39;./Footer&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">InputArtist</span>  <span class="nx">from</span> <span class="s1">&#39;./InputArtist&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Tracks</span>       <span class="nx">from</span> <span class="s1">&#39;./Tracks&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">TrackStore</span>   <span class="nx">from</span> <span class="s1">&#39;../stores/TrackStore&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">displayName</span><span class="o">:</span> <span class="s1">&#39;Artist&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">style</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">title</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fontFamily</span><span class="o">:</span> <span class="s2">&quot;&#39;Poiret One&#39;, cursive&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">header</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;page-header&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">h1</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">style</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Artist</span> <span class="nx">Top</span> <span class="nx">Tracks</span> <span class="o">&lt;</span><span class="nx">small</span><span class="o">&gt;</span><span class="nx">by</span> <span class="nx">Last</span><span class="p">.</span><span class="nx">FM</span><span class="o">&lt;</span><span class="err">/small&gt;&lt;/h1&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/header&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Nav</span> <span class="nx">current</span><span class="o">=</span><span class="s2">&quot;artist&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">article</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;main-content&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">InputArtist</span> <span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">Tracks</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/article&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Footer</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>直接export defaultにComponentのClassを渡しているので、displayNameは明示的に指定しています。</p>

<hr />

<p>というわけでReact.jsのコードを6to5使ってES6で簡単に書くことが出来るという話でした。</p>

<p>個人的には今後書くコードはES6で書いていきたい感じです。</p>

<p>6to5シンプルに使えていいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking back 2014]]></title>
    <link href="http://blog.koba04.com/post/2014/12/31/looking-back-2014/"/>
    <updated>2014-12-31T22:18:22+09:00</updated>
    <id>http://blog.koba04.com/post/2014/12/31/looking-back-2014</id>
    <content type="html"><![CDATA[<p>2014年の振り返りということで。</p>

<h2>最初にまとめ</h2>

<p>2014年は</p>

<ul>
<li>英語を避けない</li>
<li>inputしたものは全てoutputする</li>
</ul>


<p>という2点をポイントとして考えていたのですが、もっとOSSにcontributeしたかったなぁという感じです。</p>

<p>React.jsも結局documentの修正をpull requestしたくらいだったので&hellip;。</p>

<p>ちなみにReact.jsのAdvent Calendarは薄い本形式で書いてもいいかなと思ったのですが、それをするにも一度知っていることを全部出して整理しておきたいなという意味で書きました。</p>

<p>来年に書きたいモチベーションがあれば書くかも。</p>

<p>2015年は内容のあるアウトプットをしたいところです。</p>

<!-- more -->


<h2>以下Tweetで振り返る</h2>

<p>完全に自分用です。</p>

<blockquote class="twitter-tweet" lang="en"><p>日記書いた「GalaxyS4のWebviewでのCanvasがおかしい件の解決方法」 <a href="http://t.co/eTTS6RfXD1">http://t.co/eTTS6RfXD1</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/421568611971387392">January 10, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="en"><p>2014年最初のエントリがAndroidの機種依存のバグ対応についてとかだいぶ前途多難感がある</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/421661190800936960">January 10, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>新年早々、Androidのバグに遭遇していたようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>“Introduction to React // Speaker Deck” <a href="http://t.co/X5ea2haYgQ">http://t.co/X5ea2haYgQ</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/425472004771172352">January 21, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>一応React.jsについては見ていたみたいですがこの時点ではスルーしていたようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>日記書いた「Marionette.js in Single Page Applicationという話をした」 <a href="http://t.co/yEF0uQYo25">http://t.co/yEF0uQYo25</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/425574026891624448">January 21, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Marionette.jsについて社内勉強会で話したみたいです。</p>

<blockquote class="twitter-tweet" lang="en"><p>ライトなMVVMのフレームワークかな / “vue.js” <a href="http://t.co/AeqbyAt5AZ">http://t.co/AeqbyAt5AZ</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/430502612278841344">February 4, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>vue.jsについても興味を持っていたようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>node-webkitってそういうことだったのか。名前だけでPhantomJSみたいなもんだと思ってたｗ</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/430707052223012865">February 4, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>node-webkitについて認識したようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>日記書いた「さようならはてなダイアリー、ありがとうはてなダイアリー」 <a href="http://t.co/CjACcmDF4Q">http://t.co/CjACcmDF4Q</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/440140794402316288">March 2, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>はてなダイアリーから移行しました。</p>

<blockquote class="twitter-tweet" lang="en"><p>posted blog “npmとbowerライブラリのバージョン管理” <a href="http://t.co/eRxP3dMo8S">http://t.co/eRxP3dMo8S</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/440528560424353792">March 3, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>npmの依存性の解決とかどうなるのって思って書いたエントリーです。npm-shrinkwrap教えてもらいました。</p>

<blockquote class="twitter-tweet" lang="en"><p>testem、ファイルが増えてくると最初の立ち上げがものすごく遅くなるし、specまとめると毎回の起動が遅くなるしどうしたらいいの&#8230;.</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/441906651063271424">March 7, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>testemが辛くなってきたようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>browserify、よくわからなくて面白い。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/446090322280329216">March 19, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>browserifyについて興味を持ったようですがよくわかってないようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>node-webkitやっぱ面白いなぁ</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/446283446894071810">March 19, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>node-webkitに興味を持っているようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>Posted new entry &quot;browserify in Backbone.Marionette project&quot; <a href="http://t.co/ALM8atVdRZ">http://t.co/ALM8atVdRZ</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/447875601546768384">March 23, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>browserifyを試しているみたいです。</p>

<blockquote class="twitter-tweet" lang="en"><p>node-webkitはscriptタグで読み込んだ時はwindowのcontextでrequireした先はnodeのcontextになるのか。だからvue.jsみたいなrequireでdocument参照してるライブラリ読み込むとエラーになるのかー。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/449169127077212162">March 27, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>node-webkitのcontextの扱いについて悩んでいるようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>フロント側、開発効率を上げつつyak率を抑えるバランスが難しい</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/449555088327979009">March 28, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>色々フロントエンドで取り入れていてちょっとやり過ぎ感を感じているようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>espowerifyも出たから次のテストはpower-assertで書いてみよう</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/450447992416264192">March 31, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>power-assertで書くことを決めたようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>Uターンして株式会社はてなに入社したい</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/450803394756628480">April 1, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>何故かはてなに入社したいと思っていたようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>semver運動もいいけど、changelog設置しよう運動もお願いしたいところ</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/454283994981359617">April 10, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>changelogなくて辛かったらしい。</p>

<blockquote class="twitter-tweet" lang="en"><p>Webサイト的なものを作る時にフロントのJavaScriptどうするか大変悩ましい。SEO的に。AjaxSEO(なんて括るのかわからん)みたいなサービス使うだけでいいならだいぶ楽だけど。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/455678860760068098">April 14, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>SPAでのSEOについてどうすんのと考えていたらしい。仕事はSEO関係ない世界でやってたけど。</p>

<blockquote class="twitter-tweet" lang="en"><p>はぁ、やっとVue.jsのGuideとAPIのところ読み終わった。。スライドにでもまとめるかな・・・ <a href="https://t.co/AJ1FOq7LEl">https://t.co/AJ1FOq7LEl</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/455726759502041088">April 14, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>vue.jsのドキュメントを読んでいたようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>イベントの実装、既存の機能をどんどん汚していくような感じになってツライ</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/456374359867678720">April 16, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>イベントの実装で悩んでいたらしい。</p>

<blockquote class="twitter-tweet" lang="en"><p>ブログ書いた「Reusable components by Vue.js and Browserify」 <a href="http://t.co/DRjEtoEYkK">http://t.co/DRjEtoEYkK</a> ちょっとタイトルと内容が違うけど、、。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/456570783368622080">April 16, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>この辺りからComponentを意識し始めていたみたい。</p>

<blockquote class="twitter-tweet" lang="en"><p>わーい、Vue.jsの作者に日本語でありがとうって言われた！(translateではないけど・・) <a href="https://t.co/dwTXDGZttT">https://t.co/dwTXDGZttT</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/456628489991360512">April 17, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>承認欲求が満たされたみたい。</p>

<blockquote class="twitter-tweet" lang="en"><p>nodeでフロントにサーバー立てる構成ちょっとやってみたい</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/456792479337951232">April 17, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>これはずっと思ってる。</p>

<blockquote class="twitter-tweet" lang="en"><p>答えたい質問があったのでstackoverflowに登録した</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/456952402441027584">April 18, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>stackoverflowデビュー。確かvue.jsについての質問に答えた。</p>

<blockquote class="twitter-tweet" lang="en"><p>ロシア語とかで面白そうな記事を見たりすると、日本語じゃなくて英語で書こうかなーとかちょっと思ったりするけど、そうすると(英語が酷すぎて)誰も読めなくなるので自重してる。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/458518498189127680">April 22, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>英語力の低さを嘆いてる。</p>

<blockquote class="twitter-tweet" lang="en"><p>2050年になったらコケるテスト書いた</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/458873755385593856">April 23, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>罠を仕込んだ。</p>

<blockquote class="twitter-tweet" lang="en"><p>ついに「iTunes Match 終わらない」でググってしまった…</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/464030008843849728">May 7, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>iTunes Matchに消耗してた。</p>

<blockquote class="twitter-tweet" lang="en"><p>子育てエンジニア飲み会を企画してやろうかなという気分になってる。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/465717911856750592">May 12, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>今年こそは！</p>

<blockquote class="twitter-tweet" lang="en"><p>Angular.js、いつまで経ってもfactoryとserviceとproviderの違いについてのpostがいっぱい出てくるので見直した方がいいのでは感ある。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/466451268232564736">May 14, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>はい。</p>

<blockquote class="twitter-tweet" lang="en"><p>続きを読むにはイイねをみたい記事、HTTPリクエストの無駄だから滅んでほしい。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/470899883998601216">May 26, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>マジで。</p>

<blockquote class="twitter-tweet" lang="en"><p>これ、ものすごい大事な発表やんか。 / “Google ウェブマスター向け公式ブログ: ウェブページをより深く理解するようになりました” <a href="http://t.co/4CeKj7De5D">http://t.co/4CeKj7De5D</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/470935988789723136">May 26, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Googleだけどうにか出来ればいいわけではないけど、大きな一歩。</p>

<blockquote class="twitter-tweet" lang="en"><p>node-webkitのwikiのTOPに&quot;I know most of you just don&#39;t read documentations&quot; て書いてあるｗ</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/471304537404219394">May 27, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>www</p>

<blockquote class="twitter-tweet" lang="en"><p>メモリリークしてるコード見つけるとテンションがあがる。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/472296743074148352">May 30, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>メモリリークを探していたようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>1人で子ども2人の面倒見ながらのalert対応、だいぶ厳しい感ある。見れるけどコード書けない。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/472633096718651393">May 31, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>子どもはキーボードが大好き。</p>

<blockquote class="twitter-tweet" lang="en"><p>&quot;Mithril and React use virtual DOM diffing &quot; 気になる。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/473975523194847232">June 3, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Virtual DOMにも興味を持っていたようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>HTTP 1.1での最適化がHTTP 2.0だと悪影響になるって面白いな。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/474884509242904576">June 6, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ハイパフォーマンスブラウザネットワーキングを読んでいたようです。</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/hashtag/%E6%9A%87?src=hash">#暇</a> <a href="http://t.co/DSt4esbPDh">pic.twitter.com/DSt4esbPDh</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/476382524105424896">June 10, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>暇だったらしい。</p>

<blockquote class="twitter-tweet" lang="en"><p>レビューを指名制から出来る人が取る方式に変えてみたけどうまくいくかなー。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/477033635086745600">June 12, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>レビューをうまく回したかったらしい。</p>

<blockquote class="twitter-tweet" lang="en"><p>Marionette 2.0 release notes in Japanese&#10;&#10;<a href="http://t.co/VLItT4JDHy">http://t.co/VLItT4JDHy</a>&#10;&#10;Thanks <a href="https://twitter.com/koba04">@koba04</a></p>&mdash; Backbone.Marionette (@marionettejs) <a href="https://twitter.com/marionettejs/status/479635101555638272">June 19, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>紹介されて嬉しかった。</p>

<blockquote class="twitter-tweet" lang="en"><p>Karmaについて書いた。 &quot;Karma for JavaScript test runner&quot; <a href="http://t.co/yS5YW4xHgz">http://t.co/yS5YW4xHgz</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/481220465571024897">June 23, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>testemからKarmaに移行したようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>Vue.jsもくもく会 <a href="https://twitter.com/hashtag/2%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99?src=hash">#2に参加します</a>！ vue.js bookの続きを書かねば&#8230; <a href="http://t.co/M4jZZR34kY">http://t.co/M4jZZR34kY</a> <a href="https://twitter.com/hashtag/vuejs_mkmk?src=hash">#vuejs_mkmk</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/482535242687709184">June 27, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Vue.jsもくもく会にも参加してた。途中から行けなくなってしまったけど&hellip;。</p>

<blockquote class="twitter-tweet" lang="en"><p>そういえばVue.jsのEvanからいきなりメール来てビビったんだけど、Vue.jsで改善したい項目あれば教えてもらえれば伝えておきますよ。日本人の意見も聞きたいらしい。 このissueに書いてもよさそうだけど。 <a href="https://t.co/nr0fA4xGYZ">https://t.co/nr0fA4xGYZ</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/483422819053621248">June 30, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Evanからメール来て残念な英語でメールを返信した。</p>

<blockquote class="twitter-tweet" lang="en"><p>英語で文章書くの時間掛かるし、issueみたいなのじゃなくて考え説明するの伝わる気がしない…</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/483603220304896002">June 30, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>英語力&hellip;。</p>

<blockquote class="twitter-tweet" lang="en"><p>Reactかぁー見てみよう / “Atom Blog” <a href="http://t.co/eNzaWCXkur">http://t.co/eNzaWCXkur</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/484547742782337024">July 3, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>React.jsを調べてみようと思ったタイミングです。</p>

<blockquote class="twitter-tweet" lang="en"><p>今日は天下一クライアントサイドJS MV\*フレームワーク武道会でLTとパネルやります！ドキドキ&#8230; <a href="http://t.co/oI5ae94l3f">http://t.co/oI5ae94l3f</a> <a href="https://twitter.com/hashtag/ten1club?src=hash">#ten1club</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/487529507675320321">July 11, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>JS関連で初めて外で話したイベント。</p>

<blockquote class="twitter-tweet" lang="en"><p>VirtualDOM難しい…。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/492309911032713216">July 24, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Virtual DOMの何が難しかったのだろうか&hellip;。</p>

<blockquote class="twitter-tweet" lang="en"><p>ZombieView見つけて直すの楽しい</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/494411375251177472">July 30, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ZombieViewを退治してようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>面白い話がいっぱい聞けると思うので是非来て下さい！ / “今年のYAPC前夜祭は「Webアプリ10連発」！ - YAPC::Asia Tokyo 2014” <a href="http://t.co/5RxK36NsNG">http://t.co/5RxK36NsNG</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/499040965420519426">August 12, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>YAPCの前夜祭の手伝いをしていたみたいです。</p>

<blockquote class="twitter-tweet" lang="en"><p>最近Reactのドキュメントをちょいちょい読んでる</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/501892377544364032">August 20, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>React.jsのドキュメント読み始めてる。</p>

<blockquote class="twitter-tweet" lang="en"><p>誰も幸せにならない感じのソースを久々に見た</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/502612257977954306">August 22, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>何だろう。気になる&hellip;。</p>

<blockquote class="twitter-tweet" lang="en"><p>「よし、次のプロジェクトではReact使うぞ！」って言って嫌な顔されたい</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/502612835009318912">August 22, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>React.js気に入ってるみたい。</p>

<blockquote class="twitter-tweet" lang="en"><p>いやー、typesterさんの話、本当によかった。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/505672825202434048">August 30, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>YAPCのtypesterさんの話よかった。</p>

<blockquote class="twitter-tweet" lang="en"><p>isomorphicを実現するためにReactを使うの盛り上がっていきそうだな。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/509487375710289920">September 9, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>isomorphicにも興味を持っているようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>社内で話したやつ(ちょっと手を加えたけど) <a href="http://t.co/bMAObYgQfa">http://t.co/bMAObYgQfa</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/516458323579637761">September 29, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>冠詞がないとご指摘頂きました。</p>

<blockquote class="twitter-tweet" lang="en"><p>React.jsについてのスライド書いた <a href="https://t.co/AxCEVstmfb">https://t.co/AxCEVstmfb</a> <a href="https://twitter.com/hashtag/reactjs?src=hash">#reactjs</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/516812116783661056">September 30, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>React.jsについてまとめてる。</p>

<blockquote class="twitter-tweet" lang="en"><p>中学英語〜みたいな本読んだら前より英語わかるようになったのでどうやら中学レベルの英語力らしい。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/519309644871630848">October 7, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>中学レベルの英語力です。</p>

<blockquote class="twitter-tweet" lang="en"><p>雑にVue.js v0.11での変更点まとめた(個人のメモレベル) 「Vue.js v0.11の変更点(予定)まとめ」 <a href="http://t.co/OSu4sTayFa">http://t.co/OSu4sTayFa</a> <a href="https://twitter.com/hashtag/vuejs?src=hash">#vuejs</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/519371264226373633">October 7, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>個人のメモレベルって書いてるのは逃げですね。</p>

<blockquote class="twitter-tweet" lang="en"><p>そっか、podcastもscrobblingされるのか <a href="http://t.co/Gy4GgRhP8I">pic.twitter.com/Gy4GgRhP8I</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/519661300113080322">October 8, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>BeckとNUMBER GIRLの間にmiyagawaさんがいる。</p>

<blockquote class="twitter-tweet" lang="en"><p>ヨセミテった</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/523022191332323330">October 17, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ヨセミテにしたらしい。</p>

<blockquote class="twitter-tweet" lang="en"><p>What is song used by JavaScript Jabber?</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/524365178595311616">October 21, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>JavaScript Jabberの曲が気になっている。これも冠詞ないな&hellip;。</p>

<blockquote class="twitter-tweet" lang="en"><p>家族増えると帰省するだけでめっちゃお金掛かるようになる</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/524462349533446146">October 21, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>知見です。</p>

<blockquote class="twitter-tweet" lang="en"><p>koaのworkshopやったついでにtypoとか直しておいた。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/524766543591112704">October 22, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>何故かこのタイミングでkoaのworkshopやってた。</p>

<blockquote class="twitter-tweet" lang="en"><p>JSONをサーバーとフロント側で安全に共有する on <a href="https://twitter.com/Qiita">@Qiita</a> <a href="http://t.co/hzJHzaU7m0">http://t.co/hzJHzaU7m0</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/525185306249539584">October 23, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>結構XSS出来そうなサンプル実装が多かったので書いてみた。</p>

<blockquote class="twitter-tweet" lang="en"><p>達人出版会さん、kindleフォーマットも欲しいです…。変換するの面倒なので…。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/525666150500151297">October 24, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>お願いします&hellip;。</p>

<blockquote class="twitter-tweet" lang="en"><p>現状です。 &quot;Joining TOLOT&quot; <a href="http://t.co/8udQFUqVs0">http://t.co/8udQFUqVs0</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/531595354605514752">November 9, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>転職したようです。</p>

<blockquote class="twitter-tweet" lang="en"><p>めっちゃAWSのドキュメント読んでる</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/531726245336084480">November 10, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>AWSについて調べているみたいです。</p>

<blockquote class="twitter-tweet" lang="en"><p>知らないことに囲まれて、hubotのscript書くことに逃避しかけてた。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/531752267557244928">November 10, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twipt async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>逃避です。</p>

<blockquote class="twitter-tweet" lang="en"><p>JSのテスト、mochaとpower-assertでファイナルアンサー感ある。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/532529669262675970">November 12, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>この組み合わせはいいと思う。</p>

<blockquote class="twitter-tweet" lang="en"><p>とりあえずVDOMとJavaScriptのAdventCalendarには登録しておいた</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/532690253459378176">November 13, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Advent Calendar、この時はReact.jsの書くかまだ悩んでた。</p>

<blockquote class="twitter-tweet" lang="en"><p>Om試さないとな</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/534370157565460480">November 17, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Omは来年触る。(多分&hellip;)</p>

<blockquote class="twitter-tweet" lang="en"><p>React.jsのAdventCalendar書くぞ！！！ <a href="http://t.co/z8ecrLvoSx">http://t.co/z8ecrLvoSx</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/537979299244937216">November 27, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>勢い大事。</p>

<blockquote class="twitter-tweet" lang="en"><p>Reactのドキュメント読んでたら間違ってたので直しておいた</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/539554749603803137">December 1, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>documentのfixだけど、contributeしておいた。</p>

<blockquote class="twitter-tweet" lang="en"><p>Utilsとかって名前、負けてる感あって好きじゃないんだよなー。実際のprojectに作るとなんでもそこに入ってくるし。</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/541852742822543361">December 8, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Util問題。(これは多分Fluxの実装見て言ってる)</p>

<blockquote class="twitter-tweet" lang="en"><p>子連れのAdventCalendar書いておいた</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/542703997685997568">December 10, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>React.jsのAdvent Calendarの息抜きに書いた。</p>

<blockquote class="twitter-tweet" lang="en"><p>.<a href="https://twitter.com/ama_ch">@ama_ch</a> コメント書きました！ <a href="https://t.co/1OAwiHkOdt">https://t.co/1OAwiHkOdt</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/545241754752909312">December 17, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>呼ばれたので答えた。</p>

<blockquote class="twitter-tweet" lang="en"><p>The Get Up Kidsはエモい</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/545837308503543809">December 19, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>エモい is&hellip;</p>

<blockquote class="twitter-tweet" lang="en"><p>私のJavaScript情報の集め方 on <a href="https://twitter.com/Qiita">@Qiita</a> <a href="http://t.co/UoRg6MHPIh">http://t.co/UoRg6MHPIh</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/547248396835123201">December 23, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>さくっと書いたら意外とストックされた。</p>

<blockquote class="twitter-tweet" lang="en"><p>React.js Advent Calendar全部のストック数とさくっと書いた情報の集め方1つの記事のストック数がほぼ同じという現実…</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/547914405963247617">December 25, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>これな。</p>

<blockquote class="twitter-tweet" lang="en"><p>一人React.js Advent Calendarお疲れ様でした！</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/547989651219152898">December 25, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>他のAdvent Calendarで言ってたら一人だけど言ったら意外と反応もらえて嬉しかった。</p>

<blockquote class="twitter-tweet" lang="en"><p>来年 <a href="https://twitter.com/hashtag/reactsushi?src=hash">#reactsushi</a> いくぞ！！</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/548023404238880768">December 25, 2014</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>いくぞ！</p>

<hr />

<p>良いお年を。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joining TOLOT]]></title>
    <link href="http://blog.koba04.com/post/2014/11/08/joining-tolot/"/>
    <updated>2014-11-08T23:19:00+09:00</updated>
    <id>http://blog.koba04.com/post/2014/11/08/joining-tolot</id>
    <content type="html"><![CDATA[<p>11月から<a href="http://tolot.com/">TOLOT</a>で働いています。</p>

<p><a href="http://tolot.com/">http://tolot.com/</a></p>

<!-- more -->


<p>TOLOTは500円でフォトブックやカレンダーが作れるサービスで、1ユーザーとして好きなサービスだし中の人に話を聞いたりしてこれから面白くなっていきそうだなと思ったので決めた感じです。</p>

<p>振り返ってみると高校の時にUS/UK RockのMix-CDを作ってあげたりするのが好きで、モノを作って自分を含む誰かにプレゼントすることが簡単に出来るサービスに対する思い入れが強いというのも背景にあったりします。</p>

<p>今のところしばらくはサーバーサイドを中心にやる感じかなと思っていますが、そのうちフロントエンドとかAPI設計とか<a href="http://www.oreilly.co.jp/books/9784873116761/">ハイパフォーマンスブラウザネットワーキング</a>に書いてあるようなこととかを駆使してWebで面白いことやりたいなと思っています。</p>

<p>まだ1週間ですが、技術的にも面白い人たちと一緒働けて楽しいです。</p>

<p>色んな言語の色んなシステムがあって、やりたいこともいっぱいあるので興味ある人は是非声掛けてください！</p>

<p>さて、来年のカレンダーもそろそろ作らないと。</p>

<hr />

<p><a href="http://www.amazon.co.jp/registry/wishlist/3RM30V69LJHUY">例のやつ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vueifyでcomponent化]]></title>
    <link href="http://blog.koba04.com/post/2014/10/07/component-by-vueify/"/>
    <updated>2014-10-07T15:29:06+09:00</updated>
    <id>http://blog.koba04.com/post/2014/10/07/component-by-vueify</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/vuejs/vueify">https://github.com/vuejs/vueify</a></p>

<p>vueifyというVue.js用のbrowserifyのtransformが出てたので紹介。</p>

<!-- more -->


<p>以前にpartialifyやstylify、coffeeify、insert-cssなどを組み合わせてHTML、JavaScript、CSSをComponent化する方法を紹介しましたがそれをさらに進めて1つのファイルで完結することが出来るようになっています。</p>

<p><a href="http://blog.koba04.com/post/2014/04/17/reusable-components-by-vuejs-and-browserify/">http://blog.koba04.com/post/2014/04/17/reusable-components-by-vuejs-and-browserify/</a></p>

<h2>使い方</h2>

<p>vueifyを使うと1つのファイルにHTMLとJavaScriptとCSSを全部まとめて書くようになり、1ファイルが1Componentという形になります。</p>

<ul>
<li>src/app.vue</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script lang="coffee"&gt;
</span><span class='line'>  module.exports =
</span><span class='line'>    data: -&gt;
</span><span class='line'>      view: "top"
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;template&gt;
</span><span class='line'>  &lt;div v-component="" v-transition&gt;&lt;/div&gt;
</span><span class='line'>&lt;/template&gt;
</span><span class='line'>
</span><span class='line'>&lt;style lang="stylus"&gt;
</span><span class='line'>  #app
</span><span class='line'>    .v-enter
</span><span class='line'>      -webkit-animation: fadein 0.5s
</span><span class='line'>      -webkit-animation-delay: 0.2s
</span><span class='line'>      animation: fadein 0.5s
</span><span class='line'>      animation-delay: 0.2s
</span><span class='line'>      opacity: 0
</span><span class='line'>    .v-leave
</span><span class='line'>      -webkit-animation: fadeout 0.2s
</span><span class='line'>      animation: fadeout 0.2s
</span><span class='line'>
</span><span class='line'>  @keyframes fadein
</span><span class='line'>    0%
</span><span class='line'>      transform: scale(0.5)
</span><span class='line'>      -webkit-transform: scale(0.5)
</span><span class='line'>      opacity: 0
</span><span class='line'>    50%
</span><span class='line'>      transform: scale(1.2)
</span><span class='line'>      -webkit-transform: scale(1.2)
</span><span class='line'>      opacity: 0.7
</span><span class='line'>    100%
</span><span class='line'>      transform: scale(1)
</span><span class='line'>      -webkit-transform: scale(1)
</span><span class='line'>      opacity: 1
</span><span class='line'>
</span><span class='line'>  @keyframes fadeout
</span><span class='line'>    0%
</span><span class='line'>      transform: scale(1)
</span><span class='line'>      -webkit-transform: scale(1)
</span><span class='line'>    100%
</span><span class='line'>      transform: scale(0)
</span><span class='line'>      -webkit-transform: scale(0)
</span><span class='line'>&lt;/style&gt;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>➜  tree src
</span><span class='line'>src
</span><span class='line'>├── app.vue
</span><span class='line'>├── artist.vue
</span><span class='line'>├── country.vue
</span><span class='line'>├── footer.vue
</span><span class='line'>├── index.js
</span><span class='line'>├── input-artist.vue
</span><span class='line'>├── nav.vue
</span><span class='line'>├── select-country.vue
</span><span class='line'>├── top.vue
</span><span class='line'>└── tracks.vue</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/koba04/vue-boilerplate/tree/master/src">https://github.com/koba04/vue-boilerplate/tree/master/src</a></p>

<p>coffeescriptとstylus以外にも、less、scss(node-sass)、jadeなどを指定することが出来ます。</p>

<h2>syntax highlight</h2>

<p>1つにまとめて、vueっていう拡張子付けたりするとシンタックスハイライトどうするのかという問題になりますが、SublimeTextだとこれで大丈夫なようです
(使ってないのでわからないですが)</p>

<p><a href="https://gist.github.com/yyx990803/9194f92d96546cebd033">https://gist.github.com/yyx990803/9194f92d96546cebd033</a></p>

<p>vimとかの場合は&hellip;</p>

<p>まぁ、ちょっとしたものを作るときにvueify使ってみるのもいいのではないでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vue.js v0.11の変更点(予定)まとめ]]></title>
    <link href="http://blog.koba04.com/post/2014/10/07/vue-js-v011-changes/"/>
    <updated>2014-10-07T13:04:51+09:00</updated>
    <id>http://blog.koba04.com/post/2014/10/07/vue-js-v011-changes</id>
    <content type="html"><![CDATA[<p>Vue.js v0.11のrc版もリリースされて、v0.10からの変更点が多いのでchangesを参考にまとめてみました。</p>

<p><strong> rc3がリリースされたので修正・追記しました </strong></p>

<p>APIの変更も多いですが、data継承の仕組みが完全に変わっているのでその辺りは注意が必要ですね。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install vue@0.11.0-rc2</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>まだ安定してなかったりドキュメントはv0.10のものしかなくてchangesとmergeしながら読む必要があったりするので、これから開発する人は今のタイミングはどのバージョンを使えばいいのかちょっと悩ましいですね。v0.11系を使っていった方がいいとは思いつつ。</p>

<p>今回の変更でも見えるのですが、Angular.js以外にもBackbone.jsやReact.jsなど様々なフレームワークからいいところを持ってきてるところがVue.jsの面白いところですね。</p>

<p><a href="https://github.com/yyx990803/vue/blob/0.11.0-rc3/changes.md">https://github.com/yyx990803/vue/blob/0.11.0-rc3/changes.md</a></p>

<h2>Instantiation process</h2>

<p><code>el</code>オプションがインスタンス化する際に指定されていなかった場合、以前は空のdivを作成していましたが&#8221;unmounted&#8221;な状態となり新しく追加された<code>$mount</code>メソッドにquerySelectorを渡すことでViewと紐付けるようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span> <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="mi">1</span><span class="p">}</span> <span class="p">})</span> <span class="c1">// only observes the data</span>
</span><span class='line'><span class="nx">vm</span><span class="p">.</span><span class="nx">$mount</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span> <span class="c1">// actually compile the DOM</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in comparison, this will compile instantly just like before.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span> <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#app&#39;</span><span class="p">,</span> <span class="nx">data</span><span class="o">:</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">}</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>$mount()</code>を引数なしで呼ぶと空の<code>&lt;div&gt;</code>が作成されます。</li>
</ul>


<h2>New Scope Inheritance Model</h2>

<p>以前のバージョンではprototypeなデータ継承の仕組みを持っていませんでした。にも関わらず<code>this.$parent</code>や<code>this.$get</code>を使って親scopeの値を参照することが出来ました。</p>

<p>新しいバージョンでは、Angular.jsに似た継承システムを持っていて、直接親scopeの値を参照することが出来ます。
大きな違いは子scopeで値を設定するとそれは親scopeにも影響することです。</p>

<p>この例がわかりやすいです。 <a href="http://jsfiddle.net/Px2n6/2/">http://jsfiddle.net/Px2n6/2/</a></p>

<p>デフォルトではtemplate内で入れ子にしても親scopeは継承しません。これは意図せず親scopeの値を書き換えないようにするためです。
もし親scopeを継承したい場合は<code>inherit: true</code>オプションをつける必要があります。</p>

<p><code>v-repeat</code>と<code>v-if</code>は親scopeをデフォルトで継承します。</p>

<h2>Instance Option changes</h2>

<h3><code>Vue.extend</code>内で<code>el</code>と<code>data</code>を使用する場合は関数定義にする必要があります。</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">el</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">el</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// you can initialize your element here.</span>
</span><span class='line'>    <span class="c1">// you can even return a documentFragment to create</span>
</span><span class='line'>    <span class="c1">// a block instance.</span>
</span><span class='line'>    <span class="nx">el</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s1">&#39;content&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">el</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// similar to ReactComponent.getInitialState</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">a</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">b</span><span class="o">:</span> <span class="mi">123</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>events</code>オプション追加されました</h3>

<p>Backbone.jsのeventsみたいな感じですね。
$emitで発行する独自イベント以外にも<code>hook:created</code>のようなライフサイクルイベントについても定義することが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;hook:created&#39;</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;created!&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">greeting</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="c1">// can also use a string for methods</span>
</span><span class='line'>    <span class="nx">bye</span><span class="o">:</span> <span class="s1">&#39;sayGoodbye&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">methods</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sayGoodbye</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;goodbye!&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="c1">// -&gt; created!</span>
</span><span class='line'><span class="nx">vm</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;greeting&#39;</span><span class="p">,</span> <span class="s1">&#39;hi!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// -&gt; hi!</span>
</span><span class='line'><span class="nx">vm</span><span class="p">.</span><span class="nx">$emit</span><span class="p">(</span><span class="s1">&#39;bye&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// -&gt; goodbye!</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>watch</code>オプションが追加されました</h3>

<p><code>events</code>のようにwatchしたい対象の評価式とコールバックをオブジェクトの形式で定義することが出来ます。
わかりやすく書けるようになっていいですね。</p>

<h3><code>inherit</code>オプションが追加されました(デフォルトはfalse)</h3>

<p>親scopeの<code>data</code>を継承するかどうかの設定です。
継承することで</p>

<ol>
<li>親scopeの値をtemplateで参照することが出来るようになります</li>
<li>親scopeの値をインスタンスから直接アクセス出来るようになります</li>
</ol>


<h3><code>mixin</code>オプションが追加されました</h3>

<p>いわゆるmixinってやつです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">mixin</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">created</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">created</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">mixins</span><span class="o">:</span> <span class="p">[</span><span class="nx">mixin</span><span class="p">]</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="c1">// -&gt; 1</span>
</span><span class='line'><span class="c1">// -&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>name</code>オプションが追加されました</h3>

<p>デバッグしやすさのために名前をつけることが出来るようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">SubClass</span> <span class="o">=</span> <span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;MyComponent&#39;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SubClass</span><span class="p">()</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span> <span class="c1">// -&gt; MyComponent { $el: ... }</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>parent</code>オプションが削除されました</h3>

<p>かわりに$addChildを使うことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">$addChild</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="p">[</span><span class="nx">contructor</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>lazy</code>が削除されました</h3>

<p>ViewModelに指定するのではなくて、<code>v-model</code>毎に設定すべきだからということで<code>v-model</code>のoptionになりました。</p>

<h3><code>id</code>、<code>tagName</code>、<code>className</code>、<code>attributes</code>も削除されました</h3>

<p>代わりに<code>el</code>に関数定義して指定するようにします</p>

<h3><code>created</code>のhookの挙動が変更されました</h3>

<p>データバインディングされた後に呼ばれるにようになったので、dataを追加する場合は$addや$removeを使わないとデータバインディングの対象にならなくなりました。</p>

<h3><code>ready</code>のhookの挙動が変更されました</h3>

<p>documentに初めて追加されるときだけに呼ばれるようになりました。これまでと同じように使いたい場合は<code>compiled</code>を使ってください。</p>

<h3><code>beforeCompile</code>のhookが追加されました</h3>

<p>インスタンス化されてDOMのcompileが開始される前に呼ばれます。</p>

<h3><code>compiled</code>のhookが追加されました</h3>

<p>これまでの<code>ready</code>のタイミングで呼ばれて、初期のデータでのcompileが終了したタイミングで呼ばれます。</p>

<h3><code>afterDestroy</code>のhookが<code>destroy</code>に変更されました</h3>

<h2>Instance methods change</h2>

<h3><code>$watch</code>に評価式を渡せるようになりました</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">vm</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;a + b&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">newVal</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do something</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>$watch</code>でのdeep watchの挙動が変わりました</h3>

<p>デフォルトではwatchに渡した値に対する変更しか監視しなくなったので、ネストしたオブジェクトの評価をしたい場合は、第三引数に<code>true</code>を渡す必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">vm</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;someObject&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="nx">vm</span><span class="p">.</span><span class="nx">someObject</span><span class="p">.</span><span class="nx">nestedValue</span> <span class="o">=</span> <span class="mi">123</span>
</span><span class='line'><span class="c1">// callback is fired</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>$watch</code>の即時実行</h3>

<p>第四引数にtrueを渡すことで初回に値をセットするときにもcallbackを実行させることが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">vm</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'><span class="c1">// callback is fired immediately with current value of `a`</span>
</span></code></pre></td></tr></table></div></figure>


<p>この辺、deepWatchと合わせて第三引数をoptionsなオブジェクトにしたほうがいいと思う。</p>

<h3><code>$unwatch</code>は削除されて、<code>$watch</code>の戻り値である関数を呼ぶことでunwatchされます</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">unwatch</span> <span class="o">=</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span>
</span><span class='line'><span class="c1">// later, teardown the watcher</span>
</span><span class='line'><span class="nx">unwatch</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>vm.$get</code>に評価式を渡せるようになりました</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">$get</span><span class="p">(</span><span class="s1">&#39;a + b&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>vm.$add</code>と<code>vm.$delete</code>が追加されました</h3>

<p>ViewModelのプロパティを追加・削除するときに使います。
まぁでも、インスタンス化する際に全てのプロパティをnullなどで設定しておく方がいいです。</p>

<h3><code>vm.$eval</code>が追加されました</h3>

<p>filterも適用することが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">$eval</span><span class="p">(</span><span class="s1">&#39;msg | uppercase&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>vm.$interpolate</code>が追加されました</h3>

<p>template文字列を評価することが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">markup</span> <span class="o">=</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">$interpolate</span><span class="p">(</span><span class="s1">&#39;&lt;p&gt;&lt;/p&gt;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>vm.$log</code>が追加されました</h3>

<p>インスタンスのdataを生のオブジェクトとしてみることが出来ます(getter/setterなし)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">vm</span><span class="p">.</span><span class="nx">$log</span><span class="p">()</span> <span class="c1">// logs entire ViewModel data</span>
</span><span class='line'><span class="nx">vm</span><span class="p">.</span><span class="nx">$log</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">)</span> <span class="c1">// logs vm.item</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>vm.$compile</code>が追加されました</h3>

<p>DOMをcompileすることが出来て、戻り値としてteardownするときに使うdecompileする関数を返します。
decompile関数ではDOMは削除されません。
主にカスタムdirectiveを書く人のためのメソッドです。</p>

<h2>Computed Properties API Change</h2>

<h3><code>$get</code>、<code>$set</code>は<code>get</code>、<code>set</code>になりました</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">computed</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fullName</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Directive API change</h2>

<h3>directiveに動的な値を指定出来るようになりました</h3>

<p>こんな感じでv-viewみたいなことが出来るようになりました</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">v-component=</span><span class="s">&quot;{{test}}&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>今サポートしているのは<code>v-component</code>だけで、独自directiveを作る時は<code>update</code>関数を実装することでハンドリング出来ます。</p>

<h3><code>v-model</code>に<code>lazy</code>属性と<code>number</code>属性が追加されました</h3>

<p><code>lazy</code>はこれまでインスタンスオプションにあった、enterキー押したときかフォーカス外れた時だけにchangeイベントが発行されるものがv-modelの属性になりました。</p>

<p><code>number</code>はmodelに反映されるときにNumber型にすることが出来ます。</p>

<h3>select要素に<code>v-model</code>としてtextとvalueを含んだオブジェクトの配列を渡すとoption要素として評価してくれます</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;select&gt;</span>
</span><span class='line'>  <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;a&quot;</span><span class="nt">&gt;</span>A<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>  <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;b&quot;</span><span class="nt">&gt;</span>B<span class="nt">&lt;/option&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>select要素に<code>v-model</code>としてlabelとoptionsを含んだオブジェクトの配列を渡すとoptgroup要素として評価してくれます</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">label</span><span class="o">:</span> <span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">]},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">label</span><span class="o">:</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;d&#39;</span><span class="p">]}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;select&gt;</span>
</span><span class='line'>  <span class="nt">&lt;optgroup</span> <span class="na">label=</span><span class="s">&quot;A&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;a&quot;</span><span class="nt">&gt;</span>a<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;b&quot;</span><span class="nt">&gt;</span>b<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/optgroup&gt;</span>
</span><span class='line'>  <span class="nt">&lt;optgroup</span> <span class="na">label=</span><span class="s">&quot;B&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;c&quot;</span><span class="nt">&gt;</span>c<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;d&quot;</span><span class="nt">&gt;</span>d<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/optgroup&gt;</span>
</span><span class='line'><span class="nt">&lt;/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>v-component</code>に<code>keep-alive</code>属性を指定するとインスタンスを破棄せずにキャッシュしておいてくれるようになります</h3>

<p>Viewの切り替えを<code>v-component</code>で行うときに使うとよさそうです。使い方間違うとリークしそうですが&hellip;。</p>

<h3><code>v-repeat</code>に<code>trackby</code>を指定することで、配列の値を再利用することが出来るようになりました</h3>

<p>配列のdataにAPIのレスポンスなどを適用してswapされた場合など、今までは全部の要素を作りなおしていたのですがtrackbyを指定することで既存の値は再利用してくれるようになりました。React.jsのkeyみたいな感じ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li</span> <span class="na">v-repeat=</span><span class="s">&quot;items&quot;</span> <span class="na">trackby=</span><span class="s">&quot;_id&quot;</span><span class="nt">&gt;</span>...<span class="nt">&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>v-with</code>で親と子のインスタンスの間で2wayバインディングされないようになりました</h3>

<p><code>v-with</code>で作られた子のインスタンスの値を変更しても親には反映されなくなります。親のインスタンスの変更は子に反映されます。</p>

<h3><code>v-el</code>が追加されました</h3>

<p><code>v-ref</code>で似た感じですが、こちらは<code>vm.$$.xxx</code>とすることでDOM Nodeを参照することが出来ます。</p>

<h3><code>twoWay</code>のオプションが追加されました</h3>

<p>このオプションはdirectiveが2wayデータバインディングをするかどうかを指定します。
これを指定することで<code>this.set(value)</code>をdirectiveの内部で使用することが出来ます。</p>

<ul>
<li>ちょっとどういう使われ方するのかよくわかってないです&hellip;</li>
</ul>


<h3><code>acceptStatement</code>のオプションが追加されました</h3>

<p>このオプションはdirectiveが<code>v-on</code>のようにインラインステートメントを受け付けるかどうかを指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">v-on=</span><span class="s">&quot;click: a++&quot;</span><span class="nt">&gt;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>指定したステートメントは関数としてラップされてdirectiveの<code>update</code>関数に渡されます。</p>

<h3><code>isEmpty</code>と<code>isFn</code>オプションが削除されました</h3>

<h2>Interpolation change</h2>

<h3>textのバインディング自動的にstringifyしなくなりました。</h3>

<p><code>json</code>filterを使いましょう。</p>

<h3>One time interpolationsが指定出来るようになりました</h3>

<p>変更されない値に指定することでrenderingのパフォーマンスを向上させることが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span&gt;</span>{{* hello }}<span class="nt">&lt;/span&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Config API change</h2>

<h3>Vue.configがメソッド形式からpropertyアクセスに変更されました</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// old</span>
</span><span class='line'><span class="c1">// Vue.config(&#39;debug&#39;, true)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// new</span>
</span><span class='line'><span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">debug</span> <span class="o">=</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>config.prefix</code>の値にハイフンが必須になりました</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">prefix</span> <span class="o">=</span> <span class="s2">&quot;data-&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>config.delimiters</code>が少し柔軟に指定出来るようになりました</h3>

<p>これまでは<code>['{','}']</code>というような指定しか出来なかったのが<code>['(%', '%)']</code>という指定も出来るようになりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Vue</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">delimiters</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;(%&#39;</span><span class="p">,</span> <span class="s1">&#39;%)&#39;</span><span class="p">]</span>
</span><span class='line'><span class="c1">// tags now are (% %) for text</span>
</span><span class='line'><span class="c1">// and ((% %)) for HTML</span>
</span></code></pre></td></tr></table></div></figure>


<h3>&lsquo;proto&#8217;optionをfalseにすることでArrayの<code>__proto__</code>の書き換えを禁止することが出来ます</h3>

<p>NativeのArrayのsubclassなどを作っている場合で、<code>__proto__</code>の書き換えされると困る場合にfalseにすることで<code>__proto__</code>の書き換えがされなくなります
(配列のオブジェクトに追加される)</p>

<p><img src="http://blog.koba04.com/images/vue-config-proto.png" title="'Vue.config.proto = false'" ></p>

<p>またrc2からオブジェクトの場合に<code>__proto__</code>の書き換えがされることはなくなりました。ただObject.prototypeに$addと$delete、Array.prototypeに$removeと$setが追加されています。</p>

<p>dataに生のオブジェクトを使っている場合には影響無いですが、Constructorから作ったオブジェクトを使っている場合にはprototypeが残るようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Hoge</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Hoge</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://blog.koba04.com/images/vue-object-prototype.png" title="'Vue object prototype'" ></p>

<h3>async optionをfalseにすることで即時にDOMが更新することが出来ます</h3>

<p>通常は、batch方式によってDOMの更新はまとめて行われるのですが、このオプションをfalseにすることで即時にDOMに反映することが出来るようになります。</p>

<p><strong>当初は「trueにすると」と書いていたので修正しました(2015/02/26)</strong></p>

<h2>Transition API change</h2>

<h3><code>v-transition</code>と<code>v-animation</code>と<code>v-effect</code>の違いはなくなりました</h3>

<p>どれかに統一されるのかな？</p>

<h3><code>Vue.config</code>でenter/leaveの指定が設定出来なくなりました</h3>

<h3><code>Vue.effect</code>は<code>Vue.transition</code>に変更されました。<code>effects</code>オプションも<code>transitions</code>に変更されました。</h3>

<h3><code>v-transition="my-transition"</code>とした場合、</h3>

<ol>
<li><code>Vue.transition(id, def)</code>で登録されているオブジェクトまたは、<code>transitions</code>オプションを&#8221;my-transition&#8221;をkeyとして探します。</li>
<li>上記で見つからなかった場合、CSS transitionsまたはCSS animationsを適用します。</li>
<li>上記でもアニメーションしなかった場合、DOM操作を即時に行われます。</li>
</ol>


<h3>JavaScript transitionsのAPIがAngular.jsっぽく変更されました</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Vue</span><span class="p">.</span><span class="nx">transition</span><span class="p">(</span><span class="s1">&#39;fade&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">beforeEnter</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">el</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// a synchronous function called right before the</span>
</span><span class='line'>    <span class="c1">// element is inserted into the document.</span>
</span><span class='line'>    <span class="c1">// you can do some pre-styling here to avoid FOC.</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">enter</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// element is already inserted into the DOM</span>
</span><span class='line'>    <span class="c1">// call done when animation finishes.</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;opacity&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">opacity</span><span class="o">:</span> <span class="mi">1</span> <span class="p">},</span> <span class="mi">1000</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// optionally return a &quot;cancel&quot; function</span>
</span><span class='line'>    <span class="c1">// to clean up if the animation is cancelled</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="nx">el</span><span class="p">).</span><span class="nx">stop</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">leave</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// same as enter</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="nx">el</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">opacity</span><span class="o">:</span> <span class="mi">0</span> <span class="p">},</span> <span class="mi">1000</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="nx">el</span><span class="p">).</span><span class="nx">stop</span><span class="p">()</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Events API change</h2>

<h3><code>$dispatch</code>と<code>broadcast</code>で発行されるイベントのコールバックでfalseを返すと、伝播を止めることが出来るようになりました。</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">parent</span><span class="o">:</span> <span class="nx">a</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">parent</span><span class="o">:</span> <span class="nx">b</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">a</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nx">b</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">$dispatch</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// -&gt; &#39;c&#39;</span>
</span><span class='line'><span class="c1">// -&gt; &#39;b&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Two Way filters</h2>

<h3>filterに関数を渡すとreadのfilterとして扱われますが、<code>v-model</code>のような2wayバインディングのdirectiveと組み合わせることでwriteのfilterも定義出来るようになりました</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Vue</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;format&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">read</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">val</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">write</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">oldVal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">val</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/ok/</span><span class="p">)</span> <span class="o">?</span> <span class="nx">val</span> <span class="o">:</span> <span class="nx">oldVal</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Block logic control</h2>

<h3>template要素を制御ブロックとして扱うことが出来るようになりました</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">items</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;title-1&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">subtitle</span><span class="o">:</span> <span class="s1">&#39;subtitle-1&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">content</span><span class="o">:</span> <span class="s1">&#39;content-1&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;title-2&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">subtitle</span><span class="o">:</span> <span class="s1">&#39;subtitle-2&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">content</span><span class="o">:</span> <span class="s1">&#39;content-2&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;template</span> <span class="na">v-repeat=</span><span class="s">&quot;item:items&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h2&gt;</span><span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/template&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--v-block-start--&gt;</span>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>title-1<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>subtitle-1<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>content-1<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="c">&lt;!--v-block-end--&gt;</span>
</span><span class='line'><span class="c">&lt;!--v-block-start--&gt;</span>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>title-2<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>subtitle-2<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>content-2<span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="c">&lt;!--v-block-end--&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>v-partial</code>にtemplateと一緒に使うことが出来ますし、下記のようにすることでpartialを動的に選択することが出来ます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;template</span> <span class="na">v-partial=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;/template&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Misc</h2>

<h3><code>$destroy()</code>はdefaultだと<code>$el</code>はそのまま残すので、<code>$el</code>も削除したい場合は<code>$destroy(true)</code>としてください</h3>

<h3><code>v-model</code>と一緒に<code>value</code>属性を指定するとvmの値を上書きして初期値として設定されます</h3>

<hr />

<p>vue.js bookもv0.11対応して続きを書かないと&hellip;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::ASIA 2014の前夜祭をやった]]></title>
    <link href="http://blog.koba04.com/post/2014/08/30/hold-yapc-asia-2014-eve/"/>
    <updated>2014-08-30T01:30:49+09:00</updated>
    <id>http://blog.koba04.com/post/2014/08/30/hold-yapc-asia-2014-eve</id>
    <content type="html"><![CDATA[<p><a href="http://yapcasia.org/2014/talk/show/bc6052f4-0c8b-11e4-aec0-ad686aeab6a4">http://yapcasia.org/2014/talk/show/bc6052f4-0c8b-11e4-aec0-ad686aeab6a4</a></p>

<p>YAPC::ASIA 2014の前夜祭の企画・進行をやってきました。</p>

<p><a href="http://gihyo.jp/news/report/01/yapcasia2014/0000">http://gihyo.jp/news/report/01/yapcasia2014/0000</a></p>

<!-- more -->


<h2>突然のオファー</h2>

<p>そもそも何でやっていたかですが、</p>

<p><a href="https://twitter.com/yusukebe">@yusukebe</a>さんからWebアプリのコンテストみたいなのやりたいから企画と当日の仕切りをお願いしますというオファーが来たので、なんか大変そうな気もするけど楽しそうなので受けることにしました。</p>

<h2>企画を考える</h2>

<p>結局、10minのTalkを10本ぶっ続けという形式に落ち着きましたが、@yusukebeさんの他にも<a href="https://twitter.com/uzulla">@uzulla</a>さん、<a href="https://twitter.com/kfly8">@kfly8</a>さんと相談しながらかなり悩んでいました。</p>

<ul>
<li>投票形式にする？</li>
<li>LT(5min)にする？</li>
<li>パネルディスカッションにする？</li>
<li>一般募集する？</li>
<li>:</li>
</ul>


<p>ですが最終的には、「前夜祭はYAPC::ASIA 2014一番目のイベント」なので勢いのある感じにしたいということで、Talk(10min)を10本ぶっ通しで行うという形に落ち着きました。</p>

<p>なんとなく、今回はYAPC初参加のPerlを使っていない人もそこそこいると思ったのと、前夜祭は初参加の人にとってはYAPCを印象付けるものになると思ったので、誰でも楽しめるようなイベントになるようにとは考えていました。</p>

<h2>オファーする</h2>

<p>誰にオファーするかは、一度上記のメンバーで集まった時にひたすら面白いサービス作っている人の名前を挙げていって、そのリストから自分が聞きたい！と思った人に順番に声を掛けていきました。(一応PerlメインになりそうなTalkのバランスも考えましたが)</p>

<p><img src="http://blog.koba04.com/images/oretoku.png"></p>

<p>皆さん快くお受け頂いて本当に感謝しています。</p>

<h2>そして当日</h2>

<p>司会とタイムキーパーをやっていたので100%聞けていたわけではないですが、全部のTalkが面白くて3分前と1分前に出していた案内が遅れることも&hellip;。</p>

<p>準備不足で若干もたついたところもあり申し訳なかったです&hellip;。</p>

<h3>@__papix__ / GeekDojo</h3>

<p>Pamon2という独自にAmon2を拡張したライブラリを使っていたり、チームでの開発での話も聞けそうで面白そうだなと思いお願いしました。</p>

<p>一発目のTalkでしたがさすがの盛り上げっぷりでPerlの話もありつつ楽しませてもらいました。</p>

<h3>@hondallica / hrhm.info</h3>

<p>Heavymetal好きのためのサービスということでかなり濃いこだわりが聞けるのではないかなと思いお願いしました。</p>

<p>Talkが本当に面白くてHeavymetalに対する愛が詰まった発表で素晴らしかったです。</p>

<h3>@ppworks / pplog</h3>

<p>この企画を考えた際にまず思いついたのが個人的にも好きなサービスであるpplogで、下記のエントリを見て話を聞きたいなと思いお願いしました。</p>

<ul>
<li><a href="http://ppworks.hatenablog.jp/entry/2014/07/13/012855">http://ppworks.hatenablog.jp/entry/2014/07/13/012855</a></li>
</ul>


<p>自分たちが使いたいものを作るというはっきりとした意思があり、それをPOEMとして文章にしておくなどサービスを育てていくことに対するヒントがいっぱいあってとても勉強になりました。</p>

<h3>@syachi / ゴミ収集カレンダー</h3>

<p>YAPCに応募されていたトークで、「札幌市のWebページに掲載されている&#8221;ごみ収集日カレンダー&#8221;をperlを使ってparseする」という暮らしを便利にするコンセプトが面白そうだなと思いお願いしました。</p>

<p>まさかの号泣ネタもありながら、ごみ収集カレンダーと戦っていく様子がとても面白かったです。</p>

<h3>@masuidrive / wri.pe</h3>

<p>wri.peは個人的にも愛用しているシンプルで使いやすくて完成度の高いアプリで、個人でどうやって作っていったのかという過程に興味があって今回お願いしました。</p>

<p>GW中に作ろうと思って作り始めてそこからたくさんの人に使われていく流れが面白く、デザインを考えた時の話などとても参考になりました。</p>

<h3>@hika69 / プライベートで3年間チーム開発した話</h3>

<p>CastoやStoryBoardsなど面白いサービスたくさん作られていて、Rendrなど色々な技術を使われているのもすごいなぁと思ってお願いしました。あとuzullaさんの強烈なpushもありｗ</p>

<p>技術をサービスに活用するのが本当に上手いなぁというのと、チーム開発に対するヒントがたくさん詰まった発表でとても勉強になりました。</p>

<h3>@sugyan / ttyrecからGIFアニメを作る話</h3>

<p>golangを学びながらサービスを作ってしまって、その上Web対応もやってすごいなぁと思ってお願いしました。</p>

<p>デモを交えながらの発表で、さらっとすごいことをやっていてさすがだなという発表でした。</p>

<h3>@razokulover / GIFMAGAZINEの話</h3>

<p>GIFMAGAZINEをはじめ面白いサービスをたくさん作られていて、どういうことを考えてサービスを作っていることに興味があってお願いしました。</p>

<p>GIFアニメ好きのために作るという明確な意思がGIFMAGAZINEを支えていて、一番使って欲しい人のためにサービスを作ることの大事さを感じる発表でした。</p>

<h3>@yositosi / togetter</h3>

<p>AdminsBarというpodcastで出演されているのを聞いて是非話を聞いてみたいと思ったのでお願いしました。</p>

<ul>
<li><a href="http://admins.bar/2/">http://admins.bar/2/</a></li>
</ul>


<p>togetter誕生からたくさんの人に使われていくまでの流れをpodcastの時と同様に面白くTalkされていてあっという間の時間でした。</p>

<p>podcast聴いてない人はWebサービスを作る楽しさが詰まっているので是非聴いてみてください！</p>

<h3>@debility / クイズを支える技術</h3>

<p>YAPCのTalkにも応募されていて、デモが面白いという噂を聞きお願いしました。</p>

<p>ネタ満載でトリに相応しい盛り上がりで楽しませてもらいました！</p>

<p>(楽しみ過ぎてて最後の締めの挨拶何も考えてなかったのは失敗でしたが&hellip;)</p>

<h2>まとめ</h2>

<p>自分がTalkを聞きたい人に集まってもらったので本当に楽しかったです！</p>

<p>発表者の方、そしてスタッフの方本当にありがとうございました！！</p>

<p>すこしでもWebアプリ作ろうと思った人がいれば嬉しいです！</p>

<p>※参加してくださった方は感想を書いて頂けると嬉しいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「Yコンビネーター シリコンバレー最強のスタートアップ養成スクール」を読んだ]]></title>
    <link href="http://blog.koba04.com/post/2014/07/25/book-review-of-the-launch-pad/"/>
    <updated>2014-07-25T00:06:17+09:00</updated>
    <id>http://blog.koba04.com/post/2014/07/25/book-review-of-the-launch-pad</id>
    <content type="html"><![CDATA[<p>37Signals本を読んだりしていて、たまたま本屋でこの本を発見して読んでみました。</p>

<p>Yコンビネーターは「ハッカーと画家」やLispプログラマーとしても有名なポール・グレアムがやっているスタートアップを支援する組織で、この本はそこに集まった起業家が3ヶ月後のデモ・デーに挑むまでのドキュメンタリーが中心の内容になっています。</p>

<!-- more -->


<h2>エンジニア目線で</h2>

<p>ここに起業家として登場するのはまさに選ばれた天才ばかりで、ハッカーも多くいますが技術的な内容はほとんどないです。</p>

<p>この本では37Signalsの本にあるようなチームのあり方についてなどもありますが、それよりもサービスのアイデアの生み出し方やマネタイズ、どう育てていくのかといったことのヒントを創業者の悩みやポール・グレアムの助言を通じて学ぶことが出来ます。</p>

<p>また、Yコンビネーターの先輩として、<a href="https://www.dropbox.com/">Dropbox</a>や<a href="https://www.heroku.com/">Heroku</a>などのメンバーが登場したり、
今回の創業者の中にも<a href="https://www.mongohq.com/">MongoHQ</a>や<a href="https://parse.com/">Parse</a>や<a href="http://www.codecademy.com/">Codecademy</a>がいてそのエピソードはとても興味深いです。</p>

<p>SnapjoyのメンバーはHerokuを使っていて、サービスが急成長しているときにDynoを急いで増やしてもらうためにHerokuの創業者にインスタントメッセージで直接お願いしたというエピソードもあったりします。</p>

<p>プログラミングしてサービスを作れることがどんなに強みであるかやその楽しさを改めて再確認させてくれます。</p>

<h2>リアルさ</h2>

<p>この本は密着取材という形で書かれていて、全64チームのうちいくつかメインとなるチームがありながら様々なチームが登場し、海外からの参加者や結婚して子どももいる人など様々なバックグラウンドを持っている人たちが登場します。</p>

<p>それらについて、とてもリアルにまるでその場にいるような形で書かれています。基本的には3ヶ月間ひたすらコードを書き続けるという感じなのでドラマチックなことが何か起きるわけではなく、サービスを作りポール・グレアムなどに相談してまた作るということを繰り返していく感じです。</p>

<p>ですが、実際にサービスに対してどういう考えを持っているかといった部分や何に力を注いでいるのかといった部分がとても勉強になります。</p>

<h2>ヒットするサービス</h2>

<p>ポール・グレアムでもヒットするサービスを見極めることは難しいので少額(数万ドル)でも全チームに投資していたり、デモ・デーまでの3ヶ月でもサービスを何度も変えて作り直すチームがいくつもあったり、サービスを作ることの難しさや厳しさを感じさせてくれます。</p>

<h2>分析</h2>

<p>取材した内容をただ書いているだけでなく、なぜシリコンバレーである必要があるのかといった疑問に対する分析も含まれていてそれもとても面白いです。</p>

<h2>最後に</h2>

<p>400ページ以上となかなかのボリュームですが、読み始めると面白くて一気に最後まで読んでしまう本でした。</p>

<p>サービスを作っている人が読むと、開発者であっても得られるものが多い本だと思いました。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=musicfanclub-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4822249468" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[天下一クライアントサイドJS MV*レームワーク武道会で話しました #ten1club]]></title>
    <link href="http://blog.koba04.com/post/2014/07/12/talked-at-ten1club/"/>
    <updated>2014-07-12T23:13:39+09:00</updated>
    <id>http://blog.koba04.com/post/2014/07/12/talked-at-ten1club</id>
    <content type="html"><![CDATA[<p><a href="http://connpass.com/event/6910/">http://connpass.com/event/6910/</a></p>

<p>「天下一クライアントサイドJS MV*フレームワーク武道会」でMarionette.jsについてのLTとパネルディスカッションをさせて頂きました。</p>

<!-- more -->


<p>JavaScriptについて外部で話すの初めてだったのでドキドキしてましたが本当にとても面白いイベントでした。</p>

<p><a href="https://twitter.com/yosuke_furukawa">@yosuke_furukawa</a>さんに感謝です。++</p>

<p>ありがとうございます！</p>

<h2>LT</h2>

<p>Marionette.jsについてを簡単に説明した感じです。面白みがないですが&hellip;。興味があれば見てみてください。</p>

<p><a href="https://speakerdeck.com/koba04/5fen-dewakarumarionette-dot-jsfalseiitokoro">5分でわかるMarionette.jsのいいところ</a></p>

<p>他の方の発表もみんな面白かったです。Reactが気になっていたのでその辺りも少し聞けてよかったです。</p>

<h2>パネルディスカッション</h2>

<p><a href="https://twitter.com/mizchi">@mizchi</a>さん、<a href="https://twitter.com/damele0n">@damele0n</a>さん、<a href="https://twitter.com/hokaccha">@hokaccha</a>さん、<a href="https://twitter.com/teppeis">@teppeis</a>さんという豪華なメンバーに紛れて参加させて頂いたいのですが、うまく伝えられず反省する点もありましたが聞いていてとても楽しくてあっという間の1時間でした。また機会があれば続きをやりたいです。</p>

<h2>懇親会</h2>

<p>色んな方に声を掛けて頂き、面白い話がいっぱい聞けて楽しかったです。ブログ見たと言ってもらえたのが嬉しかったのと、意外とMarionette.js使われていて同じようなところで悩んでるなぁとわかってよかったです。懇親会後のWebComponents話も面白かったです。</p>

<h2>最強のフレームワーク??</h2>

<p>まぁぶっちゃけ、このフレームワーク使っておけばいいというものはなくて、「誰が触るのか」、「どんなアプリなのか」によって全く答えは変わってくるので、選択肢を自分の中で持っておくことが大切なんじゃないかなと思いました。</p>

<h2>蛇足</h2>

<p>ちなみに個人的には、Vue.js、browserify辺りを使って、テストはkarma、mocha、power-assertとか組み合わせるのが今は好きです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release karma-say-reporter]]></title>
    <link href="http://blog.koba04.com/post/2014/06/29/release-karma-say-reporter/"/>
    <updated>2014-06-29T01:14:36+09:00</updated>
    <id>http://blog.koba04.com/post/2014/06/29/release-karma-say-reporter</id>
    <content type="html"><![CDATA[<p>最近karmaを使っているのもあって、karma-say-reporterっていうのをリリースしました。</p>

<p><a href="https://www.npmjs.org/package/karma-say-reporter">https://www.npmjs.org/package/karma-say-reporter</a></p>

<!-- more -->


<p>karmaでテストの結果によって通知するものとしては、<a href="https://www.npmjs.org/package/karma-mp3-reporter">karma-mp3-reporter</a>というものがありますが、好きな言葉を指定したいということでOSXにあるsayコマンドで結果を通知してくれるものです。</p>

<h2>Config</h2>

<p>こんな感じでreportersにsayを追加して、successとfailのときのメッセージを指定出来るようになっています。また、sayコマンドの-vで指定出来るvoiceの種類も設定出来るようになっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// karma.conf.js</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">reporters</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;say&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">sayReporter</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="s2">&quot;test all successs&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">fail</span><span class="o">:</span> <span class="s2">&quot;test failed&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">voice</span><span class="o">:</span> <span class="s2">&quot;Agnes&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Kyoko for Japanese</h2>

<p>デフォルトだと日本語を指定することが出来ないのですが、環境設定の「音声入力と読み上げ」からKyokoさんを追加すれば日本語を指定できるようになるので、Kyokoさんを追加した後に下記のように設定することで日本語で通知することも出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// karma.conf.js</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">reporters</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="s1">&#39;say&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">sayReporter</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="s2">&quot;やったね&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">fail</span><span class="o">:</span> <span class="s2">&quot;テストこけてるで&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">voice</span><span class="o">:</span> <span class="s2">&quot;Kyoko&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Linux&hellip;</h2>

<p>ソース見てもらえれば分かる通り、voiceを覗いてはただsayコマンドに渡してるだけなので、独自にsayコマンドを定義してあげれば多分動くと思います。</p>

<p>なので汎用的なreporterとしても使えるかもしれないです。</p>

<h2>Enjoy!</h2>

<p>Karmaのpluginはまだ未開の地な感があるのでいろんなplugin作っていくと楽しくテスト書けそうでいいですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Karma for JavaScript test runner]]></title>
    <link href="http://blog.koba04.com/post/2014/06/23/karma-for-javascript-test-runner/"/>
    <updated>2014-06-23T00:48:32+09:00</updated>
    <id>http://blog.koba04.com/post/2014/06/23/karma-for-javascript-test-runner</id>
    <content type="html"><![CDATA[<p><img src="http://blog.koba04.com/images/karma.png" title="'karma'" ></p>

<p>今まではなんとなくtestemを使っていたのですが、Karmaを検討する必要があったので試してみました。</p>

<p>サンプルの設定などは↓で見ることが出来ます。</p>

<ul>
<li><a href="https://github.com/koba04/backbone-boilerplate">https://github.com/koba04/backbone-boilerplate</a></li>
</ul>


<!-- more -->


<h2>testem to karma</h2>

<p>これまでは業務でもtestemを使っていて、テストの数が少ないうち(1000以下)は問題なかったのですが、
段々テストが増えてくるとCPU100%になってテストが走るブラウザが固まることが増えてきて辛い感じになってきました。</p>

<p>そんなときに下記の記事を見て同じような現象だなと思いKarmaを試してみることにしました。</p>

<ul>
<li><a href="http://developer.cybozu.co.jp/tech/?p=7089">http://developer.cybozu.co.jp/tech/?p=7089</a></li>
</ul>


<h2>Installation</h2>

<p>インストールは<strong>npm install karma</strong>するだけです。</p>

<p>globalでkarmaのコマンドが使いたい場合はgruntのように<strong>npm install -g karma-cli</strong>します。</p>

<ul>
<li>karmaはglobalに入れません。</li>
</ul>


<h2>Easy to use</h2>

<p>テストを読み込むためのHTMLを用意して色々書いたりする必要がなくて、<strong>karma init</strong>してframeworkやテスト対象のファイルを指定して、
<strong>karma start</strong>するだけで変更を監視しての自動テストを行うことが出来ます。簡単です。</p>

<h2>Configration</h2>

<p>最初の設定は、<strong>karma init</strong>することで対話的に作成することが出来て、終了すると<strong>karma.conf.js</strong>が作成されます。</p>

<p>ちなみに<strong>karma init karma.conf.coffee</strong>のように拡張子をcoffeeにして指定することでcoffeescriptで作成することも出来ます。</p>

<p>生成されたファイルはこんな感じで、使うフレームワークや対象ファイル、実行するブラウザ、出力形式、ファイルの変更を監視して自動でテストするか、テスト終了後もプロセスを残すかどうかなどを設定します。</p>

<ul>
<li>設定項目の抜粋</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">config</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ベースとなるパス</span>
</span><span class='line'>    <span class="nx">basePath</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 使用するフレームワーク。ここから探せる https://npmjs.org/browse/keyword/karma-adapter</span>
</span><span class='line'>    <span class="nx">frameworks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;mocha&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 読み込むファイル(テスト対象のファイルやテストファイルなど)。</span>
</span><span class='line'>    <span class="nx">files</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;js/*.js&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// filesから除外したファイル</span>
</span><span class='line'>    <span class="nx">exclude</span><span class="o">:</span> <span class="p">[],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// テストの実行前に差し込む処理。ここから探せる https://npmjs.org/browse/keyword/karma-preprocessor</span>
</span><span class='line'>    <span class="nx">preprocessors</span><span class="o">:</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// テストの結果を出力する形式。ここから探せる https://npmjs.org/browse/keyword/karma-reporter</span>
</span><span class='line'>    <span class="c1">// &#39;dots&#39;と&#39;progress&#39;は最初から使える</span>
</span><span class='line'>    <span class="nx">reporters</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;progress&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 使用するport</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">9876</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 出力に色を付けるか</span>
</span><span class='line'>    <span class="nx">colors</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ログレベル: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span>
</span><span class='line'>    <span class="nx">logLevel</span><span class="o">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">LOG_INFO</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ファイルの変更を監視してテストを自動的に実行するかどうか</span>
</span><span class='line'>    <span class="nx">autoWatch</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// テストするブラウザ。ここから探せる https://npmjs.org/browse/keyword/karma-launcher</span>
</span><span class='line'>    <span class="nx">browsers</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Chrome&#39;</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// trueにすると一回テストを実行するとプロセスが終了する</span>
</span><span class='line'>    <span class="c1">// CIのときに使ったり。</span>
</span><span class='line'>    <span class="nx">singleRun</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>その他では、<strong>autoWatchBatchDelay</strong>を使うと指定したms内での変更をまとめて一つとして扱ってくれるので、監視対象のファイルが短い時間に連続して更新されて複数回テストが実行される場合は、この値を長めにするといいかもしれません(defaultは250ms)。</p>

<h2>Browsers</h2>

<p>ブラウザはChromeやSafariやPhantomJSなど色々ありますので、<strong>karma-xxx-launcher</strong>で探すことが出来ます。</p>

<h2>Frameworks</h2>

<p><strong>mocha</strong>や<strong>jasmine</strong>や<strong>qunit</strong>などの場合は<strong>karma-mocha</strong>のようにすでにadapterが用意されているので、
ここにframeworkを設定に書いてadapterをインストールするだけで使うことが出来ます。</p>

<h3>karma-mocha-debug</h3>

<ul>
<li><a href="https://github.com/maksimr/karma-mocha-debug">https://github.com/maksimr/karma-mocha-debug</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">frameworks</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;mocha-debug&#39;</span><span class="p">,</span> <span class="s1">&#39;mocha&#39;</span><span class="p">],</span>
</span></code></pre></td></tr></table></div></figure>


<p>testem+mochaでやっている時に、ブラウザで結果を確認してそこから指定したテストだけを再実行出来るのが便利だったので
karmaでも出来ないないかな思って調べるみると、karma-mocha-debugを使うと出来るようでした。
karmaのブラウザからdebugボタンを押してdebug.htmlを開くと見ることが出来ます。素晴らしい！</p>

<p><img src="http://blog.koba04.com/images/karma-mocha-debug.png" title="'karma mocha debug'" ></p>

<h2>Preprocessors</h2>

<p>preprocessorsを指定することで<strong>files</strong>に書いたファイルに対してテストを実行する前に処理を挟むことが出来、柔軟なテストの設定が可能です。</p>

<p>coffeescriptのコンパイルだったりbrowserifyのビルドなどで<strong>karma-xxxx-preprocessor</strong>で探すことが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">preprocessors</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;**/*.coffee&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;coffee&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>karma-html2js-preprocessor</h3>

<ul>
<li><a href="https://github.com/karma-runner/karma-html2js-preprocessor">https://github.com/karma-runner/karma-html2js-preprocessor</a></li>
</ul>


<p>また、karma-html2js-preprocessorというものもあって、これを使うと指定したHTMLを<strong>window.__html__[&lsquo;name.html&rsquo;]</strong>に入れてくれるので、fixtureデータとして使うことが出来ます。アプリのテストだとどうしてもDOMが必要になるので便利です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">files</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>  <span class="s1">&#39;**/*.html&#39;</span>
</span><span class='line'><span class="p">],</span>
</span><span class='line'><span class="nx">preprocessors</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;**/*.html&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;html2js&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">before</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span> <span class="nb">window</span><span class="p">.</span><span class="nx">__html__</span><span class="p">[</span><span class="s">&#39;fixture.html&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reporters</h2>

<p>reporterを指定することで、様々な形式でテストの結果を出力したり通知したりすることが出来ます。</p>

<p>karma-xxxx-reporterで探すことが出来て、
nyanやtapやmocha形式のような出力形式のカスタマイズ以外にも、結果をgrowlやmp3で通知したりcoverageを計測したりなどさまざまなreporterがあります。</p>

<h3>karma-nyan-reporter</h3>

<ul>
<li><a href="https://github.com/dgarlitt/karma-nyan-reporter">https://github.com/dgarlitt/karma-nyan-reporter</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">reporters</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;nyan&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>nyanの形式でテストを出力してくれるのでもっとテスト書こうという気持ちになっていいです。(バグってたのpull reqして直してもらいました&hellip;)</p>

<p><img src="http://blog.koba04.com/images/karma-nyan-reporter.gif" title="'karma nyan reporter'" ></p>

<h3>karma-growl-reporter,karma-osx-reporter</h3>

<ul>
<li><a href="https://github.com/petrbela/karma-osx-reporter">https://github.com/petrbela/karma-osx-reporter</a></li>
<li><a href="https://github.com/karma-runner/karma-growl-reporter">https://github.com/karma-runner/karma-growl-reporter</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">reporters</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;growl&quot;</span><span class="p">,</span> <span class="s2">&quot;osx&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>GrowlかNotificationCenterでテストの結果を通知してくれるので便利です。</p>

<h3>karma-mp3-reporter</h3>

<p><a href="https://github.com/x2es/karma-mp3-reporter">https://github.com/x2es/karma-mp3-reporter</a></p>

<p>成功したとき、失敗したときに好きな音が流せて楽しいですね。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">reporters</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;mp3&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">mp3Reporter</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">red</span><span class="o">:</span> <span class="s2">&quot;go-to-hell.mp3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">green</span><span class="o">:</span> <span class="s2">&quot;happy.mp3&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>karma-mocha-reporter</h3>

<p><a href="https://github.com/litixsoft/karma-mocha-reporter">https://github.com/litixsoft/karma-mocha-reporter</a></p>

<p>mochaの形式で出力してくれるreporterなのですが、describeとitに与える説明をObjectが持っている関数名にすると&#8221;Cannot assign to read only property&#8221;というエラーになるので注意が必要です(describe &ldquo;method名&#8221;の形式で書いていたのでハマった&hellip;)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Error!!!!</span>
</span><span class='line'><span class="nx">describe</span> <span class="s">&quot;constructor&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&quot;xxxx&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因としては、下記のようにdescriptionをpropertyとして使っているため、constructorやtoStringとかを指定すると関数が取得されて、そこにnameを追加しようとしてエラーになる感じです(use strictが指定されてるためエラーになる)。</p>

<ul>
<li><a href="https://github.com/litixsoft/karma-mocha-reporter/blob/master/index.js#L178-L182">https://github.com/litixsoft/karma-mocha-reporter/blob/master/index.js#L178-L182</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">path</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">suite</span><span class="p">,</span> <span class="nx">description</span><span class="p">,</span> <span class="nx">depth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">item</span> <span class="o">=</span> <span class="nx">suite</span><span class="p">[</span><span class="nx">description</span><span class="p">]</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>        <span class="nx">suite</span><span class="p">[</span><span class="nx">description</span><span class="p">]</span> <span class="o">=</span> <span class="nx">item</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">item</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">description</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclution</h2>

<p>というわけでKarmaを試したのですが、思った以上に簡単に始めることが出来て、<strong>preprocessors</strong>や<strong>reporters</strong>などの仕組みがあってプラガブルな感じがとてもいいなぁと思いました。</p>

<p>今後もっとpluginが増えていくことに期待です。</p>

<h2>おまけ</h2>

<h3>power-assert対応しました</h3>

<p>もともとbrowserifyを使っていたので、transformにespowerifyを指定してあとはテストをassertに書き換えるだけだったのでとても簡単に出来てよかったです！素晴らしい！</p>

<p>コミットログはこの辺り。 <a href="https://github.com/koba04/backbone-boilerplate/commit/2fadec43e46f99cce0d3d828c66d4b12d758f4f0">https://github.com/koba04/backbone-boilerplate/commit/2fadec43e46f99cce0d3d828c66d4b12d758f4f0</a></p>

<p><img src="http://blog.koba04.com/images/power-assert.png" title="'power-assert'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release Marionette 2.0!]]></title>
    <link href="http://blog.koba04.com/post/2014/06/19/release-marionette-2_0/"/>
    <updated>2014-06-19T00:53:03+09:00</updated>
    <id>http://blog.koba04.com/post/2014/06/19/release-marionette-2_0</id>
    <content type="html"><![CDATA[<p>Marionette.jsの2.0がリリースされましたね！(2.0.1も出ましたが..)</p>

<p>1.x系では入れることが出来なかったbreakingな変更がかなりあるので内容を確認してみました。</p>

<p><a href="https://github.com/marionettejs/backbone.marionette/releases/tag/v2.0.0">https://github.com/marionettejs/backbone.marionette/releases/tag/v2.0.0</a></p>

<!-- more -->


<h2>Translate release note in Japanese</h2>

<p>というわけで、上記のリリースノートをざっくり日本語に訳してみたのを @samccone が公開してもいいと言ってくれたので公開します。
実際に動作確認して確証を取るまではやってないので間違っているところがあれば指摘してもらえるとありがたいです。</p>

<p><a href="https://gist.github.com/koba04/c375231f871a6cd1a42c">https://gist.github.com/koba04/c375231f871a6cd1a42c</a></p>

<p>view.closeがview.destoryになったり、LayoutがLayoutViewに変わったりといったI/Fがガッツリ変わるものから、triggerMethodがmethodが呼ばれたあとにeventがtriggerされるように順番が変わったなど、地味だけどハマりそうな変更まで色々あります。</p>

<p>ただ、基本的には大きな機能追加というよりはbreakingになるため出来なかったわかりにくいかった部分の改善などが主な感じです。</p>

<p>わかりやすくなってよくなったと思います。</p>

<h2>1.x to 2.0</h2>

<p>実際にどうかなと思って、1系で作ってたMarionetteのサンプルプロジェクトを2.0に移行してみました。</p>

<ul>
<li><p>2.0対応したコミットログはこの辺り</p>

<ul>
<li><a href="https://github.com/koba04/backbone-boilerplate/commit/7eb3ae0537be2c8a004aed31743bc7ece46c6f95">https://github.com/koba04/backbone-boilerplate/commit/7eb3ae0537be2c8a004aed31743bc7ece46c6f95</a></li>
</ul>
</li>
</ul>


<p>LayoutをLayoutViewにしたりitemViewをchildViewにしたりと機械的に出来る変更だけでいけるかなと思いましたが、regionのelがDOMに存在しない時に例外を投げるようになった変更の影響でテストの時にDOMへの反映をちゃんとやってなくてエラーになり、その対応に地味に時間を取られたりしました。</p>

<p>実際のプロダクトの方はちょっと大変かもと思いましたが、テスト書いてあればまぁ移行できそうな印象です。</p>

<h2>Upgrade Guide</h2>

<p>あた、ここにpython製の1.xから2.0への移行scriptがあるのでそれを試してみるのもいいかもしれないですね。</p>

<p><a href="https://github.com/marionettejs/Marionette.Upgrade">https://github.com/marionettejs/Marionette.Upgrade</a></p>

<h2>Announce</h2>

<p>蛇足ですが、「天下一クライアントサイドJS MV*フレームワーク武道会」でMarionette派としてLTします。2.0がいいタイミングで出たので2.0のコードベースで出来るのでよかったです。</p>

<p><a href="http://connpass.com/event/6910/">http://connpass.com/event/6910/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't use Backbone.Model#toJSON for render]]></title>
    <link href="http://blog.koba04.com/post/2014/06/17/dont-use-backbone-model-tojson-for-render/"/>
    <updated>2014-06-17T23:32:16+09:00</updated>
    <id>http://blog.koba04.com/post/2014/06/17/dont-use-backbone-model-tojson-for-render</id>
    <content type="html"><![CDATA[<p>Marionette.jsのrepoを見ていて知ったのですが、BackboneのtoJSONをViewをrenderするデータを作る目的では使うべきではないということです。</p>

<ul>
<li><a href="https://github.com/marionettejs/backbone.marionette/issues/1476">https://github.com/marionettejs/backbone.marionette/issues/1476</a></li>
</ul>


<!-- more -->


<h2>toJSON</h2>

<p>Backbone.ModelやBackbone.CollectionはtoJSONというメソッドを持っていて実装はattributesをcloneして返すようになっています。</p>

<ul>
<li>Model(<a href="https://github.com/jashkenas/backbone/blob/master/backbone.js#L296-L298">https://github.com/jashkenas/backbone/blob/master/backbone.js#L296-L298</a>)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">toJSON</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Collection(<a href="https://github.com/jashkenas/backbone/blob/master/backbone.js#L645-L647">https://github.com/jashkenas/backbone/blob/master/backbone.js#L645-L647</a>)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">toJSON</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">){</span> <span class="k">return</span> <span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span> <span class="p">});</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>toJSONはBackbone内では、ajaxリクエストを行うBackbone.syncの中でModelのデータをシリアライズするために使われています。</p>

<h2>The many uses of Model#toJSON()</h2>

<ul>
<li><a href="https://github.com/jashkenas/backbone/issues/2134">https://github.com/jashkenas/backbone/issues/2134</a></li>
</ul>


<p>Backbone.syncの中で使われているこのtoJSONですが、以前のBackboneのドキュメント内ではtemplateをrenderする際に下記のような感じでtoJSONが使われていたため、toJSONをrenderするときに使うことが広まってしまっているようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>というわけで、サーバーに送るデータを作るメソッドとtemplateに渡すデータを作るメソッドが同じなのは２つの全く違う役割を持っている点もよくないし、サーバーに送りたい形式とtemplateで使いたい形式が異なる場合などに不都合が生じるのでよくないとして、ドキュメントは修正されました。</p>

<h2>Marionette.js</h2>

<p><a href="https://github.com/marionettejs/backbone.marionette/pull/745">https://github.com/marionettejs/backbone.marionette/pull/745</a></p>

<p>Marionette.jsではItemViewにtemplateに渡すデータを作るためのserializeDataというメソッドがあって、その中ではtoJSONが呼ばれています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">serializeData</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">data</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">items</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>ですが上記の理由から2.0またはそれ以降からはtoJSONが使われなくなりそうです。</p>

<p>このpullreqだと、serializeModel(Collection)というメソッドを定義してそのなかではtoJSONと同じくcloneしたattributesを返す形になっています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">serializeModel</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">attributes</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">serializeCollection</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">collection</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">){</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">serializeModel</span><span class="p">(</span><span class="nx">model</span><span class="p">);</span> <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Backboneでtemplateに渡すデータを作るためにtoJSONを使うことは推奨されていないので注意しましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webアプリエンジニア養成読本を読んだ]]></title>
    <link href="http://blog.koba04.com/post/2014/05/01/book-review-of-webapp-mook/"/>
    <updated>2014-05-01T23:36:44+09:00</updated>
    <id>http://blog.koba04.com/post/2014/05/01/book-review-of-webapp-mook</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/dp/4774163678?">Webアプリエンジニア養成読本</a></p>

<h2>全体の感想</h2>

<p>タイトル通り、これからWebアプリエンジニアになる人の最初のお供にとても相応しい本だなという感想を持ちました。</p>

<p>構成としては、1章でWebについて、2章でPHPとRubyによる実践、3章でサーバー環境について、4章でサービスの運用について書かれていて、コンパクトなサイズで幅広く触れられています。</p>

<!-- more -->


<p>各章の最後でこの本を読んだ次の本のオススメが書かれていたりと、Webアプリ開発をやる上で知っておくべきことに対する道標が示されているような内容になっています。なので、この本を読めばバリバリ開発出来るぜーとはならないと思いますが、この本でどういったことを知っておく必要があるのか把握しておくことはとても役に立つと思うので、ちょうど4月からWebアプリエンジニアとして働くような人には特にオススメだと思いました。</p>

<p>全体を通してセキュリティについても触れられているのもいいなと思いました。</p>

<h2>1章 Web技術オーバービュー</h2>

<p>HTTPからGithub、エディタまでWebアプリ開発で必要になってくることがわかりやすく読みやすく書かれています。この章をもっと詳しく知りたいと思ったら「<a href="http://www.amazon.co.jp/dp/4774154075">Webサービスの作り方</a>」を読むといいんじゃないかなと思いました。</p>

<h2>2章 Webアプリケーション実践入門</h2>

<h3>PHP</h3>

<p>PHPについては全然知らなかったのでとても勉強になりました。Composerみたいなpackage managerもあるんですね。Slimの使い方からテストの仕方やデバッグの方法まで読んでいて面白かったです。やっぱり\を区切りにつかってるのには慣れなかったですがｗ</p>

<h3>Ruby</h3>

<p>Rubyの文法からSinatra、RSpec、Rakeといった内容を順番に説明されていてわかりやすかったです。コードがシンプルになるのはRubyの良さだなと思いました。</p>

<h2>3章 サーバー環境の作り方</h2>

<p>IaaS業者やLinuxのディストリビューションの選び方、ミドルウェアの設定やデプロイの仕方まで丁寧に書かれていてわかりやすかったです。</p>

<h2>4章 サービス運用の基礎知識</h2>

<p>監視やロギング、バックアップやチューニングなどのついつい後回しに考えがちな内容についてがコンパクトに書かれていて面白かったです。</p>

<p>また障害対応などについても触れられているのでとても勉強になりました。</p>

<h2>蛇足</h2>

<p>褒めてばっかりだとアレなので、こうなってるとさらによかったのかなーと思ったことも。</p>

<p>この書籍では、WindowsとMac環境での開発についても丁寧に説明されていて素晴らしいのですが結構面倒なこともあるし実際はLinuxの上でアプリケーションを動かすことになると思うので、そこはVirtualBoxにLinux入れてという構成にしてもよかったのかなーと思ったりもしました。</p>

<p>あと、RubyとPHPで作るサンプルが似てはいるものの違うものだったので、全く同じものにしてもRubyとPHPの違いが見えて面白いのかなと思ったりもしました。</p>

<h2>最後に</h2>

<p>Webアプリケーションを作ってみたいと思っている人や仕事でWebアプリケーション作るけどあまりよくわかってないという人は手にとって読んでみるといいんじゃないかなと思いました！</p>

<p>紹介されている本もいい本ばかりなので、この本を読んだあとに紹介されている本を読んで知識を深めていくとよさそうだと思いました。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=musicfanclub-22&o=9&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=4774163678" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reusable components by Vue.js and Browserify]]></title>
    <link href="http://blog.koba04.com/post/2014/04/17/reusable-components-by-vuejs-and-browserify/"/>
    <updated>2014-04-17T01:27:24+09:00</updated>
    <id>http://blog.koba04.com/post/2014/04/17/reusable-components-by-vuejs-and-browserify</id>
    <content type="html"><![CDATA[<p>最近Vue.jsについて調べたり試したりしていて、browserifyと組み合わせたexampleがなかなか興味深かったので参考に自分でも作ってみました。</p>

<p>参考</p>

<ul>
<li><a href="https://github.com/vuejs/vue-browserify-example">https://github.com/vuejs/vue-browserify-example</a></li>
</ul>


<p>作ったサンプル</p>

<ul>
<li><a href="https://github.com/koba04/vue-boilerplate">https://github.com/koba04/vue-boilerplate</a></li>
<li><a href="http://koba04.com/vue-boilerplate/">http://koba04.com/vue-boilerplate/</a></li>
</ul>


<!-- more -->


<h2>browserify</h2>

<p>Vue.js自体はビルドに<a href="https://github.com/component/component">Compoment</a>を使っているのですが、ここでは個人的な好みによりbrowserifyを使っています。</p>

<p>上記のexampleではbrowserifyにプラスしてwatchifyとpartialifyを使っていたのですが、今回はlivereloadもしたかったのでwatchifyではなくて<a href="https://github.com/chrisdickinson/beefy">beefy</a>にして、さらにcoffeeifyとstylifyも使ってcoffeescriptとstylusのcompileも任せることにしました。</p>

<p>その結果の起動scriptはこんな感じで、<strong>npm run dev</strong>するとlivereload + auto buildな環境が立ち上がり、<strong>npm run build</strong>するとbundle.jsが生成されるようになっています。</p>

<ul>
<li><a href="https://github.com/koba04/vue-boilerplate/blob/master/package.json">https://github.com/koba04/vue-boilerplate/blob/master/package.json</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;dev&quot;</span><span class="o">:</span> <span class="s2">&quot;beefy src/index.coffee:bundle.js --live -- -t partialify -t coffeeify -t stylify --extension=coffee&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;build&quot;</span><span class="o">:</span> <span class="s2">&quot;browserify src/index.coffee -t partialify -t coffeeify -t stylify --extension=coffee &gt; bundle.js&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに<a href="https://github.com/bclinkinbeard/partialify">partialify</a>はhtmlをrequireで読み込むのに使っています。</p>

<p>これで、gruntを使うことなくbrowserifyだけでlivereload + auto buildが出来るようになりました。便利！</p>

<h2>Reusable components</h2>

<p>Vue.jsを使っていると、ViewModelをCompomentとして組み合わせてアプリケーションを作る感じになっていくので、Component単位でhtml、js、cssをまとめたくなります(ならない？)。</p>

<p>Vue.jsにはcompomentという概念があるのでこんな感じでViewModelをcompomentとして登録することが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># グローバルにcompomentを登録</span>
</span><span class='line'><span class="nx">Vue</span><span class="p">.</span><span class="nx">component</span> <span class="s">&#39;artist&#39;</span><span class="p">,</span>   <span class="nx">require</span> <span class="s">&#39;./artist/index.coffee&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># or</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># ViewModelに紐づけて登録</span>
</span><span class='line'><span class="nv">module.exports = </span><span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">components:</span>
</span><span class='line'>    <span class="s">&quot;nav&quot;</span><span class="o">:</span>          <span class="nx">require</span> <span class="s">&#39;../nav/index.coffee&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>exampleでもそのようになっていて、partialifyでhtmlとcssをrequireして読み込んでcssの方はinsert-cssで追加する感じになっています。</p>

<ul>
<li>insert-cssというのはsubstackが作っているライブラリで、CSSを渡すとDOMにstyle要素を作ってhead要素にappendしてくれるというライブラリです。

<ul>
<li><a href="https://www.npmjs.org/package/insert-css">https://www.npmjs.org/package/insert-css</a></li>
</ul>
</li>
</ul>


<p>ただCSSはグローバルに作用してしまいます。なので名前ベースで解決したくなりますがCSSではネストした記述をサポートしていません。そこでstylusを使ってネストで書きやすくしてみました。</p>

<ul>
<li><a href="https://github.com/koba04/vue-boilerplate/blob/master/src/top/index.coffee">https://github.com/koba04/vue-boilerplate/blob/master/src/top/index.coffee</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s">&#39;insert-css&#39;</span><span class="p">)(</span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;./index.styl&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Vue = </span><span class="nx">require</span> <span class="s">&#39;vue&#39;</span>
</span><span class='line'><span class="nv">module.exports = </span><span class="nx">Vue</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">template: </span><span class="nx">require</span> <span class="s">&#39;./index.html&#39;</span>
</span><span class='line'>  <span class="nv">className: </span><span class="s">&#39;top&#39;</span>
</span><span class='line'>  <span class="nv">components:</span>
</span><span class='line'>    <span class="s">&quot;nav&quot;</span><span class="o">:</span>          <span class="nx">require</span> <span class="s">&#39;../nav/index.coffee&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://github.com/koba04/vue-boilerplate/blob/master/src/top/index.styl">https://github.com/koba04/vue-boilerplate/blob/master/src/top/index.styl</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.top</span>
</span><span class='line'>  <span class="nt">h1</span>
</span><span class='line'>    <span class="na">font-family</span><span class="o">:</span> <span class="s1">&#39;</span><span class="s2">Playfair Display SC&#39;</span><span class="o">,</span> <span class="no">serif</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じにすると、Compoment単位でディレクトリ作ってindex.coffeeの中でinsert-cssを使ってcssを追加しつつpartialifyでhtmlをtemplateとして設定することで、javascriptとhtmlとcssをまとめることが出来ます。</p>

<ul>
<li><p>ファイル名の付け方は悩ましいですが・・・。</p></li>
<li><p><a href="https://github.com/koba04/vue-boilerplate">https://github.com/koba04/vue-boilerplate</a></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>src
</span><span class='line'>├── artist
</span><span class='line'>│   ├── components
</span><span class='line'>│   │   └── input-artist
</span><span class='line'>│   │       ├── index.coffee
</span><span class='line'>│   │       ├── index.html
</span><span class='line'>│   │       └── index.styl
</span><span class='line'>│   ├── index.coffee
</span><span class='line'>│   ├── index.html
</span><span class='line'>│   └── index.styl
</span><span class='line'>├── country
</span><span class='line'>│   ├── components
</span><span class='line'>│   │   └── <span class="k">select</span>-country
</span><span class='line'>│   │       ├── index.coffee
</span><span class='line'>│   │       ├── index.html
</span><span class='line'>│   │       └── index.styl
</span><span class='line'>│   ├── index.coffee
</span><span class='line'>│   ├── index.html
</span><span class='line'>│   └── index.styl
</span><span class='line'>├── index.coffee
</span><span class='line'>├── index.html
</span><span class='line'>├── index.styl
</span><span class='line'>├── nav
</span><span class='line'>│   ├── index.coffee
</span><span class='line'>│   ├── index.html
</span><span class='line'>│   └── index.styl
</span><span class='line'>├── partials
</span><span class='line'>│   └── footer.html
</span><span class='line'>├── top
</span><span class='line'>│   ├── index.coffee
</span><span class='line'>│   ├── index.html
</span><span class='line'>│   └── index.styl
</span><span class='line'>└── tracks
</span><span class='line'>    ├── index.coffee
</span><span class='line'>    ├── index.html
</span><span class='line'>    └── index.styl
</span></code></pre></td></tr></table></div></figure>


<p>まぁ実際はcompoment化してもなかなか再利用は難しいのですが、こういう分け方もありかなーと思いました。</p>

<h2>routing animation by v-view and css animation</h2>

<p>余談ですが、今回作ったサンプルの遷移時のウザイアニメーションは、v-viewとv-animationを組み合わせています。</p>

<ul>
<li><a href="http://koba04.com/vue-boilerplate/">http://koba04.com/vue-boilerplate/</a></li>
</ul>


<p>routingは<a href="https://www.npmjs.org/package/director">director</a>とv-viewとVue.compomentを組み合わせています。</p>

<ul>
<li>angular.jsのng-animateみたいな感じでv-enterとv-leaveというクラスがあてられるのでそれを使ってアニメーションさせています。</li>
</ul>


<p>v-viewとv-animationの組み合わせについては、v-leaveのanimation-endで要素が削除されるためアニメーションが指定されていないと古い要素が残ったりと若干ハマりどころもあるのですが、それはまた別の機会にまとめたいと思います。</p>

<ul>
<li><a href="https://github.com/koba04/vue-boilerplate/blob/master/src/index.html">https://github.com/koba04/vue-boilerplate/blob/master/src/index.html</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">v-view=</span><span class="s">&quot;view&quot;</span> <span class="na">v-animation</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://github.com/koba04/vue-boilerplate/blob/master/src/index.styl">https://github.com/koba04/vue-boilerplate/blob/master/src/index.styl</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nn">#app</span>
</span><span class='line'>  <span class="nc">.v-enter</span>
</span><span class='line'>    <span class="na">-webkit-animation</span><span class="o">:</span> <span class="n">fadein</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span>
</span><span class='line'>    <span class="na">-webkit-animation-delay</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.2</span><span class="kt">s</span>
</span><span class='line'>    <span class="na">animation</span><span class="o">:</span> <span class="n">fadein</span> <span class="mi">0</span><span class="mf">.5</span><span class="kt">s</span>
</span><span class='line'>    <span class="na">animation-delay</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.2</span><span class="kt">s</span>
</span><span class='line'>    <span class="na">opacity</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nc">.v-leave</span>
</span><span class='line'>    <span class="na">-webkit-animation</span><span class="o">:</span> <span class="n">fadeout</span> <span class="mi">0</span><span class="mf">.2</span><span class="kt">s</span>
</span><span class='line'>    <span class="na">animation</span><span class="o">:</span> <span class="n">fadeout</span> <span class="mi">0</span><span class="mf">.2</span><span class="kt">s</span>
</span><span class='line'>
</span><span class='line'><span class="k">@keyframes</span> <span class="nt">fadein</span>
</span><span class='line'>  <span class="nt">0</span><span class="err">%</span>
</span><span class='line'>    <span class="na">transform</span><span class="o">:</span> <span class="nf">scale</span><span class="p">(</span><span class="mi">0</span><span class="mf">.5</span><span class="p">)</span>
</span><span class='line'>    <span class="na">-webkit-transform</span><span class="o">:</span> <span class="nf">scale</span><span class="p">(</span><span class="mi">0</span><span class="mf">.5</span><span class="p">)</span>
</span><span class='line'>    <span class="na">opacity</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nt">50</span><span class="err">%</span>
</span><span class='line'>    <span class="na">transform</span><span class="o">:</span> <span class="nf">scale</span><span class="p">(</span><span class="mi">1</span><span class="mf">.2</span><span class="p">)</span>
</span><span class='line'>    <span class="na">-webkit-transform</span><span class="o">:</span> <span class="nf">scale</span><span class="p">(</span><span class="mi">1</span><span class="mf">.2</span><span class="p">)</span>
</span><span class='line'>    <span class="na">opacity</span><span class="o">:</span> <span class="mi">0</span><span class="mf">.7</span>
</span><span class='line'>  <span class="nt">100</span><span class="err">%</span>
</span><span class='line'>    <span class="na">transform</span><span class="o">:</span> <span class="nf">scale</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="na">-webkit-transform</span><span class="o">:</span> <span class="nf">scale</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="na">opacity</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">@keyframes</span> <span class="nt">fadeout</span>
</span><span class='line'>  <span class="nt">0</span><span class="err">%</span>
</span><span class='line'>    <span class="na">transform</span><span class="o">:</span> <span class="nf">scale</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="na">-webkit-transform</span><span class="o">:</span> <span class="nf">scale</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nt">100</span><span class="err">%</span>
</span><span class='line'>    <span class="na">transform</span><span class="o">:</span> <span class="nf">scale</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="na">-webkit-transform</span><span class="o">:</span> <span class="nf">scale</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>追記</h3>

<p>ちなみにネストしたViewの場合は色々な解決方法があると思うのですが、v-viewとv-refを組み合わせて実現することも出来ます</p>

<p>v-refを使うことで子のViewを参照することができるのでそれを使って同じようにv-componentを更新する感じです</p>

<p>サンプルはこんな感じ</p>

<p><a href="http://jsfiddle.net/koba04/WgSK9/1/">http://jsfiddle.net/koba04/WgSK9/1/</a></p>

<h2>more?</h2>

<p>本当はここにtestling + mocha + power-assertな組み合わせのテストも含めたかったのですが間に合わず・・。</p>

<p>Vue.js自体についても下記のメモをスライドにでもまとめようかなと思っています..そのうち..</p>

<ul>
<li><a href="https://gist.github.com/koba04/9776792">https://gist.github.com/koba04/9776792</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Marionette Behaivors (1.7 feature)]]></title>
    <link href="http://blog.koba04.com/post/2014/03/23/marionette-behaivors/"/>
    <updated>2014-03-23T21:10:30+09:00</updated>
    <id>http://blog.koba04.com/post/2014/03/23/marionette-behaivors</id>
    <content type="html"><![CDATA[<h2>Release 1.7</h2>

<p><a href="https://github.com/marionettejs/backbone.marionette/blob/master/changelog.md">https://github.com/marionettejs/backbone.marionette/blob/master/changelog.md</a></p>

<p>Marionette 1.7がリリースされましたね。今回の大きな変更はBehaivorsというのが追加されたことです。</p>

<h2>Behaivors</h2>

<p>BehaivorsというのはViewでのMixinみたいなもので、MarionetteでViewを作っていると共通の処理をまとめたいけど、継承関係にするのもなんか違うなぁということがあってそういうときに使うことが出来ます。</p>

<!-- more -->


<ul>
<li><a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.behavior.md">https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.behavior.md</a></li>
<li><a href="https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.behaviors.md">https://github.com/marionettejs/backbone.marionette/blob/master/docs/marionette.behaviors.md</a></li>
</ul>


<p>上のドキュメントを見るとだいたいわかるのですが、例にあるようにtooltipだったりViewを閉じるときにalertを出したりしたいときに便利です。</p>

<h2>How to use</h2>

<p>ここでは指定された秒数経過すると消えるviewを作ってみます</p>

<h3>Marionette.Behaviors.behaviorsLookup</h3>

<p>Behaivorsを使うには最低限、Marionette.Behaviors.behaviorsLookupを実装する必要があります。</p>

<p>behaviorsLookupで返した値を元にgetBehaviorClassというメソッドでBehaivorを取得するような処理になっていて、getBehaivorClassのデフォルトの実装は、<strong>Behaviors.behaviorsLookup[key]</strong>のようにbehaviorsLookupで返したオブジェクトにkeyを渡して取得するようになっています。</p>

<p>なのでここでは単純にオブジェクトを返してみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">Backbone.Marionette.Behaviors.behaviorsLookup = </span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">Close: </span><span class="nx">CloseBehavior</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Behaivor</h3>

<p>BehaivorではonShow、onRenderなどのイベント、$,$elがproxyされていて、Behaivorを使用しているviewもviewとして参照できるのでその辺りを使って処理を書いていきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">CloseBehavior</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Marionette</span><span class="p">.</span><span class="nx">Behavior</span>
</span><span class='line'>  <span class="nv">defaults:</span>
</span><span class='line'>    <span class="nv">seconds: </span><span class="mi">3</span>  <span class="c1"># 指定がない場合は3秒で閉じる</span>
</span><span class='line'>  <span class="nv">onShow: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">setTimeout</span> <span class="o">=&gt;</span>
</span><span class='line'>      <span class="nx">@view</span><span class="p">.</span><span class="nx">close</span><span class="p">()</span>
</span><span class='line'>    <span class="p">,</span><span class="nx">@options</span><span class="p">.</span><span class="nx">seconds</span> <span class="o">*</span> <span class="mi">1000</span>
</span></code></pre></td></tr></table></div></figure>


<h3>View</h3>

<p>Viewではbehaivorsとして使いたいBehaivorのkey(getBehaivorClassに渡される)とoptionを指定するだけです</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">SomeView</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Marionette</span><span class="p">.</span><span class="nx">ItemView</span>
</span><span class='line'>  <span class="nv">behaviors:</span>
</span><span class='line'>    <span class="nv">Close:</span>
</span><span class='line'>      <span class="nv">seconds: </span><span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>View周りの処理をまとめやすくなっていいですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[browserify in Backbone.Marionette project]]></title>
    <link href="http://blog.koba04.com/post/2014/03/23/browserify-in-backbone-marionette-project/"/>
    <updated>2014-03-23T21:05:46+09:00</updated>
    <id>http://blog.koba04.com/post/2014/03/23/browserify-in-backbone-marionette-project</id>
    <content type="html"><![CDATA[<h2>browserify</h2>

<ul>
<li><a href="http://browserify.org/">http://browserify.org/</a></li>
</ul>


<p>browserifyはbrowser環境でもnodeのようにrequire(&lsquo;xxx&rsquo;)というスタイルで依存しているライブラリを読み込むことが出来るようになるもので、最近盛り上がってますね。</p>

<p>(Backboneなど色々なプロジェクトでbrowserifyについて議論されていたり)</p>

<p>ここでは基本的な使い方は省略して、Backbone + Marionetteなサンプルプロジェクトをbrowserify対応してみたのでその構成についてを書きたいと思います。</p>

<!-- more -->


<p>(まだ全然理解出来てないので、もっといい方法があれば教えて欲しいです)</p>

<h2>Sample Project</h2>

<ul>
<li><a href="https://github.com/koba04/backbone-boilerplate">https://github.com/koba04/backbone-boilerplate</a></li>
</ul>


<p><img src="http://blog.koba04.com/images/last-fm-top-tracks.png" title="'Atrist Top Tracks by Last.FM'" ></p>

<ul>
<li><a href="http://koba04.com/last-fm-top-tracks/">http://koba04.com/last-fm-top-tracks/</a></li>
</ul>


<p>サンプルプロジェクト過ぎると役に立たないと思うので、テストも書きつつwebアプリっぽくLast.FMのAPI使ってアーティストの人気の曲一覧を表示するようなアプリにしてみました。</p>

<p>(testling対応はIssueにしているのでそのうちやります&hellip; <a href="https://ci.testling.com/">https://ci.testling.com/</a>)</p>

<h2>grunt-browserify</h2>

<ul>
<li>Gruntfile.coffee</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">browserify:</span>
</span><span class='line'>  <span class="nv">app:</span>
</span><span class='line'>    <span class="nv">files: </span><span class="s">&quot;public/js/app.js&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="s">&quot;coffee/**/*.coffee&quot;</span><span class="p">,</span> <span class="s">&quot;template/**/*.hbs&quot;</span> <span class="p">]</span>
</span><span class='line'>    <span class="nv">options:</span>
</span><span class='line'>      <span class="nv">ignore: </span><span class="p">[</span><span class="s">&quot;coffee/vendor.coffee&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">extensions: </span><span class="p">[</span><span class="s">&quot;.coffee&quot;</span><span class="p">,</span> <span class="s">&quot;.hbs&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">transform: </span><span class="p">[</span><span class="s">&quot;coffeeify&quot;</span><span class="p">,</span> <span class="s">&quot;hbsfy&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">aliasMappings: </span><span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nv">cwd: </span><span class="s">&#39;coffee&#39;</span>
</span><span class='line'>          <span class="nv">dest: </span><span class="s">&#39;myapp&#39;</span>
</span><span class='line'>          <span class="nv">src: </span><span class="p">[</span><span class="s">&#39;**/*.coffee&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nv">cwd: </span><span class="s">&#39;template&#39;</span>
</span><span class='line'>          <span class="nv">dest: </span><span class="s">&#39;template&#39;</span>
</span><span class='line'>          <span class="nv">src: </span><span class="p">[</span><span class="s">&#39;**/*.hbs&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>      <span class="nv">external: </span><span class="p">[</span>
</span><span class='line'>        <span class="s">&quot;jquery&quot;</span>
</span><span class='line'>        <span class="s">&quot;underscore&quot;</span>
</span><span class='line'>        <span class="s">&quot;backbone&quot;</span>
</span><span class='line'>        <span class="s">&quot;backbone.marionette&quot;</span>
</span><span class='line'>        <span class="s">&quot;handlebars&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>      <span class="nv">alias: </span><span class="p">[</span> <span class="s">&quot;hbsfy/runtime:handlebars&quot;</span> <span class="p">]</span>
</span><span class='line'>  <span class="nv">vendor:</span>
</span><span class='line'>    <span class="nv">files: </span><span class="s">&quot;public/js/vendor.js&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s">&quot;coffee/vendor.coffee&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="nv">options:</span>
</span><span class='line'>      <span class="nv">transform: </span><span class="p">[</span><span class="s">&quot;coffeeify&quot;</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">alias: </span><span class="p">[</span>
</span><span class='line'>        <span class="s">&quot;jquery&quot;</span>
</span><span class='line'>        <span class="s">&quot;underscore&quot;</span>
</span><span class='line'>        <span class="s">&quot;backbone&quot;</span>
</span><span class='line'>        <span class="s">&quot;backbone.marionette&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="nv">spec:</span>
</span><span class='line'>    <span class="nv">files: </span><span class="s">&quot;specs/spec.js&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="s">&quot;specs/**/*.coffee&quot;</span> <span class="p">]</span>
</span><span class='line'>    <span class="nv">options: </span><span class="s">&quot;&lt;%= browserify.app.options %&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>transform</h3>

<p>coffeescriptのcompileやhandlebarsのprecompileは、coffeeifyとhbsfyというtransformを使っています。</p>

<p>coffeescriptやhandlebarsのgrunt pluginを別途使用する必要がなくていいですね。</p>

<h3>separate files</h3>

<p>ライブラリ(vendor)とアプリ(app)のjsを分けているのは、vendor.jsはほとんど変更されることがないので毎回ビルドに含まれるのは無駄なためです。</p>

<h3>external</h3>

<p>vendor.jsのaliasで指定して、app.jsのexternalでそれを指定することでapp.js側にライブラリが含まれないようになります。</p>

<p>hbsfy/runtimeもそうしたかったのですが、どうしてもapp.js内で展開されてしまったのでapp.js内で指定しています&hellip;</p>

<h3>aliasMappings</h3>

<p>browserifyはそのファイルからの相対パスを指定する必要があるので階層が深くなってくると階層を意識するのが面倒になります。</p>

<p>そこで、aliasmappingsを使ってどこからでも同じパス指定(<strong>require &lsquo;myapp/collections/users&rsquo;</strong>)のように指定出来るようにしています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># coffee/view/items/hoge.coffee</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># before</span>
</span><span class='line'><span class="nv">users = </span><span class="nx">require</span> <span class="s">&#39;../../collections/users&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># after (anywhere!)</span>
</span><span class='line'><span class="nv">users = </span><span class="nx">require</span> <span class="s">&#39;myapp/collections/users&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>???</h3>

<p>テスト用のspec.jsにアプリのjsも含まれてしまっているので、ホントはspec.jsにはテストだけが含まれてapp.jsを別に読み込むようにしたいのですがその方法がわからず・・・</p>

<ul>
<li>aliasで全部のmodelとかviewを指定すれば出来そうな気もするけどそれは面倒なのでやりたくない・・・。</li>
</ul>


<h2>Sample</h2>

<ul>
<li>App(coffee/views/layouts/top.coffee)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="s">&#39;use strict&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Backbone          = </span><span class="nx">require</span> <span class="s">&#39;backbone&#39;</span>
</span><span class='line'><span class="nv">ArtistSearchView  = </span><span class="nx">require</span> <span class="s">&#39;myapp/views/items/artist_search&#39;</span>
</span><span class='line'><span class="nv">TracksView        = </span><span class="nx">require</span> <span class="s">&#39;myapp/views/collections/tracks&#39;</span>
</span><span class='line'><span class="nv">Artist            = </span><span class="nx">require</span> <span class="s">&#39;myapp/models/artist&#39;</span>
</span><span class='line'><span class="nv">tracks            = </span><span class="nx">require</span> <span class="s">&#39;myapp/collections/tracks&#39;</span>
</span><span class='line'><span class="nv">template          = </span><span class="nx">require</span> <span class="s">&#39;template/layouts/top&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">module.exports = </span><span class="k">class</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Marionette</span><span class="p">.</span><span class="nx">Layout</span>
</span><span class='line'>  <span class="nv">template: </span><span class="nx">template</span>
</span><span class='line'>  <span class="nv">regions:</span>
</span><span class='line'>    <span class="nv">artistSearch: </span><span class="s">&quot;.js-artist-search&quot;</span>
</span><span class='line'>    <span class="nv">topTracks: </span>   <span class="s">&quot;.js-top-tracks&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">onRender: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@artistSearch</span><span class="p">.</span><span class="nx">show</span> <span class="k">new</span> <span class="nx">ArtistSearchView</span> <span class="nv">model: </span><span class="k">new</span> <span class="nx">Artist</span>
</span><span class='line'>    <span class="nx">@listenTo</span> <span class="nx">tracks</span><span class="p">,</span> <span class="s">&#39;reset&#39;</span><span class="p">,</span> <span class="nx">@showTracks</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">showTracks: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@topTracks</span><span class="p">.</span><span class="nx">show</span> <span class="k">new</span> <span class="nx">TracksView</span> <span class="nv">collection: </span><span class="nx">tracks</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Spec(specs/views/layouts/top_spec.coffee)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&quot;views/layouts/top&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">expect            = </span><span class="nx">require</span> <span class="s">&#39;expect.js&#39;</span>
</span><span class='line'>  <span class="nv">sinon             = </span><span class="nx">require</span> <span class="s">&#39;sinon&#39;</span>
</span><span class='line'>  <span class="nv">Backbone          = </span><span class="nx">require</span> <span class="s">&#39;backbone&#39;</span>
</span><span class='line'>  <span class="nv">TopView           = </span><span class="nx">require</span> <span class="s">&#39;myapp/views/layouts/top&#39;</span>
</span><span class='line'>  <span class="nv">ArtistSearchView  = </span><span class="nx">require</span> <span class="s">&#39;myapp/views/items/artist_search&#39;</span>
</span><span class='line'>  <span class="nv">TracksView        = </span><span class="nx">require</span> <span class="s">&#39;myapp/views/collections/tracks&#39;</span>
</span><span class='line'>  <span class="nv">Artist            = </span><span class="nx">require</span> <span class="s">&#39;myapp/models/artist&#39;</span>
</span><span class='line'>  <span class="nv">tracks            = </span><span class="nx">require</span> <span class="s">&#39;myapp/collections/tracks&#39;</span>
</span><span class='line'>  <span class="nv">template          = </span><span class="nx">require</span> <span class="s">&#39;template/layouts/top&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">view = </span><span class="kc">null</span>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">view = </span><span class="k">new</span> <span class="nx">TopView</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&quot;extends Marionette.Layout&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">view</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Marionette</span><span class="p">.</span><span class="nx">Layout</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&quot;template is layouts/top&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">template</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span> <span class="nx">template</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span> <span class="s">&quot;onRender&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span> <span class="nx">view</span><span class="p">,</span> <span class="s">&quot;showTracks&quot;</span>
</span><span class='line'>      <span class="nx">view</span><span class="p">.</span><span class="nx">onRender</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&quot;artistSearch region has artist_search view&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">artistSearch</span><span class="p">.</span><span class="nx">currentView</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span> <span class="nx">ArtistSearchView</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&quot;artist_search view has models/artist&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">artistSearch</span><span class="p">.</span><span class="nx">currentView</span><span class="p">.</span><span class="nx">model</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span> <span class="nx">Artist</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&quot;listenTo tracks&#39;s reset event, trigger showTracks&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">tracks</span><span class="p">.</span><span class="nx">reset</span> <span class="p">[]</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">showTracks</span><span class="p">.</span><span class="nx">calledOnce</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">ok</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">describe</span> <span class="s">&quot;showTracks&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">view</span><span class="p">.</span><span class="nx">showTracks</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&quot;topTracks region has tracks view&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">topTracks</span><span class="p">.</span><span class="nx">currentView</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">.</span><span class="nx">a</span> <span class="nx">TracksView</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span> <span class="s">&quot;tracks view has collections/tracks&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">expect</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">topTracks</span><span class="p">.</span><span class="nx">currentView</span><span class="p">.</span><span class="nx">collection</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span> <span class="nx">tracks</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>まだまだ情報が少ない気がしますが、依存関係を意識せずrequireでライブラリを使えるのはわかりやすくてよさそうに感じました(実装を理解するともっと便利に使えそう)。</p>

<p>npmで提供されているライブラリだけ使うのであればbowerを使わなくてよくなるのもいいなと思いました。</p>

<p>repositoryはこちら</p>

<ul>
<li><a href="https://github.com/koba04/backbone-boilerplate">https://github.com/koba04/backbone-boilerplate</a></li>
</ul>


<h2>References</h2>

<ul>
<li><a href="http://aeflash.com/2014-03/a-year-with-browserify.html">http://aeflash.com/2014-03/a-year-with-browserify.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npmやbowerライブラリのバージョン管理]]></title>
    <link href="http://blog.koba04.com/post/2014/03/03/npm-and-bower-semantic-version/"/>
    <updated>2014-03-03T23:11:37+09:00</updated>
    <id>http://blog.koba04.com/post/2014/03/03/npm-and-bower-semantic-version</id>
    <content type="html"><![CDATA[<h2>npmとbowerライブラリのバージョン管理</h2>

<p>npmやbowerのライブラリをプロジェクトに導入するときは、&#8221;npm install &mdash;save xxx&#8221;や&#8221;bower install &mdash;save xxx&#8221;のような形で指定してインストールとpackage(bower).jsonへの記録をしたりします。</p>

<p>その場合、package(bower).jsonには&#8221;xxx&#8221;: &ldquo;~x.y.z&#8221;という形式で記録されます。</p>

<p>&ldquo;~x.y.z&#8221;という表記は、&rdquo;~1.2.3&#8221;だとすると1.2.3 &lt;= x.x.x &lt; 1.3.0 の間での最新バージョンがインストールされます。</p>

<!-- more -->


<ul>
<li><a href="https://www.npmjs.org/doc/misc/semver.html">https://www.npmjs.org/doc/misc/semver.html</a></li>
</ul>


<p>なので&#8221;~&ldquo;で指定していると、同じpackage(bower).jsonでもインストールするタイミングによって微妙に異なるバージョンがインストールされることになります。</p>

<p><del>npmやbowerにはGemのGemfile.lockやCartonのcpanfile.snapshotのように依存も含めたバージョンを固定するような仕組みはないと思います。</del></p>

<p><del>かと言ってnode_modulesとかbower_componentsをrepositoryの中にも入れたくないので今のプロジェクトでは&#8221;x.y.z&#8221;とバージョンを固定しています。</del></p>

<p><del>この辺りはみんなどうしてるんですかね？</del></p>

<p><strong>[追記:2013-03-04] yosuke_furukawaさんに教えていただきました!ありがとうございます！</strong></p>

<blockquote><p>npm shrinkwrapってコマンドがあって、それを使うとライブラリのバージョンを固定できる。bower shrinkwrapは実装待ち <a href="https://github.com/bower/bower/issues/505">https://github.com/bower/bower/issues/505</a></p></blockquote>

<p>というわけでnpmはnpm-shrinkwrapを使って管理することにしました yosuke_furukawa++</p>

<h2>npm-shrinkwrap</h2>

<p><a href="https://www.npmjs.org/doc/cli/npm-shrinkwrap.html">https://www.npmjs.org/doc/cli/npm-shrinkwrap.html</a></p>

<p>node_modulesにライブラリがインストールされている状態でnpm shrinkwrapするとnpm-shrinkwrap.jsonという依存しているライブラリのバージョンが記載されたファイルがつくられます。</p>

<p>devDependenciesも含めたい場合は、&mdash;devオプションを付ける必要があります</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% npm install
</span><span class='line'>:
</span><span class='line'>% npm shrinkwrap --dev
</span><span class='line'>wrote npm-shrinkwrap.json
</span><span class='line'>
</span><span class='line'>% cat npm-shrinkwrap.json
</span><span class='line'>{
</span><span class='line'>  "name": "myapp",
</span><span class='line'>  "version": "0.0.1",
</span><span class='line'>  "dependencies": {
</span><span class='line'>    "grunt-contrib-concat": {
</span><span class='line'>      "version": "0.3.0",
</span><span class='line'>      "from": "grunt-contrib-concat@"
</span><span class='line'>    },
</span><span class='line'>    "grunt-remove-logging": {
</span><span class='line'>      "version": "0.1.1",
</span><span class='line'>      "from": "grunt-remove-logging@",
</span><span class='line'>      "resolved": "https://registry.npmjs.org/grunt-remove-logging/-/grunt-remove-logging-0.1.1.tgz"
</span><span class='line'>    },
</span><span class='line'>    "grunt-contrib-coffee": {
</span><span class='line'>      "version": "0.7.0",
</span><span class='line'>      "from": "grunt-contrib-coffee@",
</span><span class='line'>      "dependencies": {
</span><span class='line'>        "coffee-script": {
</span><span class='line'>          "version": "1.6.3",
</span><span class='line'>          "from": "coffee-script@~1.6.2"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>    "grunt-contrib-compass": {
</span><span class='line'>      "version": "0.6.0",
</span><span class='line'>      "from": "grunt-contrib-compass@",
</span><span class='line'>      "resolved": "https://registry.npmjs.org/grunt-contrib-compass/-/grunt-contrib-compass-0.6.0.tgz",
</span><span class='line'>      "dependencies": {
</span><span class='line'>        "tmp": {
</span><span class='line'>          "version": "0.0.21",
</span><span class='line'>          "from": "tmp@0.0.21"
</span><span class='line'>        },
</span><span class='line'>        "dargs": {
</span><span class='line'>          "version": "0.1.0",
</span><span class='line'>          "from": "dargs@~0.1.0"
</span><span class='line'>        },
</span><span class='line'>        "async": {
</span><span class='line'>          "version": "0.2.9",
</span><span class='line'>          "from": "async@~0.2.0"
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    },
</span><span class='line'>:</span></code></pre></td></tr></table></div></figure>


<p>npm-shrinkwrap.jsonがある状態でnpm installするとnpm-shrinkwrap.json記載されてるバージョンでインストールされます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% npm install</span></code></pre></td></tr></table></div></figure>


<p>package.jsonで&#8221;x.y.z&#8221;指定でバージョン固定した場合でもそのライブラリが依存しているライブラリは&#8221;~x.y.z&#8221;で指定されているためバージョンがズレることがあったのですが、npm-shrinkwrapを使うと依存しているライブラリのバージョンも固定出来て素晴らしい！</p>

<h2>Semantic Versioning</h2>

<p>上の辺りを調べているときにSemantic Versioningというサイトがあるのをしりました。</p>

<ul>
<li><a href="http://semver.org/">http://semver.org/</a></li>
</ul>


<p>これによるとバージョンニングをMAJOR.MINOR.PATCHと定義していて、</p>

<ul>
<li>MAJORは互換性のない変更</li>
<li>MINORは後方互換性のある追加機能</li>
<li>PATCHは後方互換性のあるBugFix</li>
</ul>


<p>とされています。(1.0.0未満は開発版なので上の限りではない)</p>

<p>さきほどのnpmやbowerの&mdash;saveが&#8221;~x.y.z&#8221;となっているのも上のバージョニングだと考えると納得がいきます。</p>

<p>ただ、実際その通りになっているライブラリばかりではなく、PATCHバージョンあげたら動かなくなることもありますし、そもそも1.0.0未満だと対象外なので&#8221;~x.y.z&#8221;の指定で大丈夫というわけにはいきません。</p>

<p>BackboneにもSemantic Versioninigに従うべきというissueがあったりしますが、実際はなかなかむずかしそうです。(jashkenasもその通りにしていたらBackbone 43.0.0になってるとコメントしたりしています)</p>

<p><a href="https://github.com/jashkenas/backbone/issues/2888">https://github.com/jashkenas/backbone/issues/2888</a></p>

<p>普段使っているようなライブラリも依存関係を&#8221;~x.y.z&#8221;という形式で指定されていることが多いのですが、それによって依存ライブラリのPATCHレベルでの変更で壊れることもあったりして、なかなか難しい&hellip;</p>

<p>(結論なし..)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブログ移行しました]]></title>
    <link href="http://blog.koba04.com/post/2014/03/02/blog-renewal/"/>
    <updated>2014-03-02T03:07:09+09:00</updated>
    <id>http://blog.koba04.com/post/2014/03/02/blog-renewal</id>
    <content type="html"><![CDATA[<p>これまでははてなダイアリーでブログを書いていたのですが、ふと思い立ってブログを移行しました。</p>

<p>旧ブログ: <a href="http://d.hatena.ne.jp/koba04/">http://d.hatena.ne.jp/koba04/</a></p>

<!-- more -->


<p>ページのフッターにある通り、Octopressを使ってGithubPagesで公開しています。テーマは一覧から「Octoflat」を選んでいます。</p>

<ul>
<li><a href="http://octopress.org/">http://octopress.org/</a></li>
<li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a></li>
</ul>


<p>ドメインはblog.koba04.comにkoba04.github.ioをCNAMEとして割り当てています(設定するときに間違ってAレコード消しちゃってしばらくアクセス出来なくしてしまいましたが&hellip;)</p>

<h2>なぜ移行したのかとなぜOctopress？</h2>

<p>はてなダイアリーだったのではてなブログとかにそろそろ移行しないとなぁと思っていたのが主な理由です。はてなブログでもよかったのですがせっかくなので色々自分で設定したいなと思い既存のブログサービスは選択しませんでした。</p>

<p>Octopressにした理由はGithubと親和性が高いのとRuby触るきっかけになるかなと思ったくらいです。<a href="https://ghost.org/">Ghost</a>と少し悩みましたがインフラをGithubに任せられるのがいいなと思ってOctopressにしました。</p>

<p>Github上で管理出来るのでissueをTODOとして使えるので便利ですね。ブラウザでmarkdown編集してcommit hookでdeploy出来るようにするとさらに便利そうだなぁと思ったりしてます。</p>

<h2>やったこと</h2>

<p>基本的にはSocial系のアカウント設定したりちょっとスタイル修正したりした程度ですが、わからないことが多くて結構詰まってました&hellip;でも楽しいです。</p>

<p>特にOctopressの仕組みがわかってなくて、sourceブランチとmasterブランチの関係とか、sourceの_deployにmasterが入っていて、そこからmasterのブランチをpushしてるのとか。。</p>

<ul>
<li>Twitter, Facebook, HatenaBookmarkのリンクを設置</li>
<li>Google Analyticsの設定</li>
<li>Disqusの設定</li>
<li>styleの修正</li>
<li>headerにブログ名をリンクを移動</li>
<li>なぜか末尾の/なしのURLがcanonicalで指定されていたので削除</li>
</ul>


<h2>Octopressでの記事書く流れ</h2>

<ul>
<li>previewサーバー立ち上げる</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake preview</span></code></pre></td></tr></table></div></figure>


<ul>
<li>記事書く</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake new_post["my great post"]
</span><span class='line'>vi source/_posts/xxxx-xx-xx-my-great-post.markdown
</span><span class='line'># 記事編集する</span></code></pre></td></tr></table></div></figure>


<ul>
<li>問題なければdeployしてpushする</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake deploy
</span><span class='line'>git push</span></code></pre></td></tr></table></div></figure>


<p>見にくい部分とか色々あるのでこれから徐々に直していきたいと思います！</p>
]]></content>
  </entry>
  
</feed>
