<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react.js | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/react-dot-js/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2016-04-28T19:07:49+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.3 4/20〜4/28]]></title>
    <link href="http://blog.koba04.com/post/2016/04/28/reactjs-links-vol3/"/>
    <updated>2016-04-28T19:19:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/28/reactjs-links-vol3</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React core meeting notes April 21 (React)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-04/april-21.md">https://github.com/reactjs/core-notes/blob/master/2016-04/april-21.md</a></li>
</ul>


<p>ReactのCore Teamによるmeeting note(4/21)が公開されています。</p>

<p>特に大きな何かがあるわけではないですが、いくつかのbugをfixした<code>15.0.2</code>が今週にも出そうです。
その他では、v15のリリース時にバタバタしたのでリリースプロセスの見直しなどが検討されているようです。
あとは、ReactのコードベースをFlow化することも議題に挙がっていました。</p>

<p>次の大きなfeatureとしては下のNew Core AlgorithmのIssueです。
詳細はまだわかりませんが、現在一度にまとめて行っているDOMの更新を分割して行うような感じになるなのかなと思います。
最初に表示されている部分だけを更新して、その後に非表示エリアのDOMを非同期で更新するみたいな。</p>

<p>この内容はこの後で紹介するDan AbamovのQ&amp;Aでも言及されていたので興味のある人は見てみるといいと思います。</p>

<ul>
<li><a href="https://github.com/facebook/react/issues/6170">https://github.com/facebook/react/issues/6170</a></li>
</ul>


<h2>Disabled inputs should not respond to clicks in IE (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6215">https://github.com/facebook/react/pull/6215</a></li>
</ul>


<p>IE11でdisableだった場合にもonChageイベントが発行されるバグを修正するPRがmergeされました。</p>

<h2>Move React Core Integration and Injection to the Core Repo #6338 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6338">https://github.com/facebook/react/pull/6338</a></li>
</ul>


<p>React NativeのReactとの連携部分がReactのリポジトリの中に含まれるようになりました。
特に何か変わることはないと思いますが、よりReact Nativeはreact-domのようにただのrendererの1つであるという位置付けになっていく流れなのかなと思います。</p>

<p>(実際なかなかそこまでうまく分割できていないようですが&hellip;)</p>

<h2>Provide info about component tree to devtools #6549 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6549">https://github.com/facebook/react/pull/6549</a></li>
</ul>


<p>React Perfの再構築に伴って、React DevToolのようなものを作るための環境が整備されてきています。
ソースを見る感じ、EventHandlerを登録しておくことで、Reactの中で起こるイベントをlistenすることができるようになるのでthird partyのライブラリーも作りやすくなるのかなと思います。</p>

<h2>Add comments/attribute indicating which component was rendered #6559 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6559">https://github.com/facebook/react/issues/6559</a></li>
</ul>


<p>ChromeとFirefox以外のReactのDevToolsを持っていないブラウザーだと、どのComponentがrenderされたのかわからないので、<code>data-reactcomponent</code>のような属性をDOMに付与するのはどうかという提案です。
もちろん開発環境のみで、別のフラグでOn/Offできるような感じで。</p>

<p>いるのかな&hellip;。</p>

<h2>QA with Dan Abramov in Reactiflux (Link)</h2>

<ul>
<li><a href="https://github.com/reactiflux/q-and-a/blob/master/dan-abramov_react-core.md">https://github.com/reactiflux/q-and-a/blob/master/dan-abramov_react-core.md</a></li>
</ul>


<p>Dan AbramovがReactifluxのDiscordで行ったQ&amp;Aのまとめです。
Facebookで何をやってるとかRedux、Reactについての質問に答えています。</p>

<p>今後の予定は下記で確認できます。Ben Alpertの会が個人的に楽しみです。そして何気にJonathan Carterが。</p>

<ul>
<li><a href="https://paper.dropbox.com/doc/Reactiflux-QA-Schedule-7QAfGzEqfKjtN9UmhYYM9">https://paper.dropbox.com/doc/Reactiflux-QA-Schedule-7QAfGzEqfKjtN9UmhYYM9</a></li>
</ul>


<h2>AMA with Lee Byron (Link)</h2>

<ul>
<li><a href="https://hashnode.com/ama/with-lee-byron-cin0kpe8p0073rb53b19emcda">https://hashnode.com/ama/with-lee-byron-cin0kpe8p0073rb53b19emcda</a></li>
</ul>


<p>GraphQLやImmutable.jsのメンテナーであるLee Byronが色々質問に答えています。
GraphQLやImmutable.jsだけでなく、Facebook内での開発についてやReactについてやCSS modulesどう思うかなど色々答えているので面白いです。
GraphQLとFalcor比べてどう？TypeScriptがあるのになんでFlowを作っているのか？
Burnoutにどう対処すべきかなどなど。(FacebookにはHack-a-monthという仕組みがあるらしい)</p>

<h2>Add Redux Logo #1671 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1671">https://github.com/reactjs/redux/pull/1671</a></li>
<li><a href="https://github.com/reactjs/redux/issues/151">https://github.com/reactjs/redux/issues/151</a> (ロゴのアイデア)</li>
</ul>


<p>ようやくReduxのロゴが決まったようです。</p>

<h2>Redux FAQ (Redux documentation)</h2>

<ul>
<li><a href="http://redux.js.org/docs/FAQ.html">http://redux.js.org/docs/FAQ.html</a></li>
</ul>


<p>少し前に追加されたReduxのFAQページです。</p>

<p><strong>Do I have to put all my state into Redux? Should I ever use React’s setState()?</strong>や、<strong>How can I represent “side effects” such as AJAX calls? Why do we need things like “action creators”, “thunks”, and “middleware” to do async behavior?</strong>など、Reduxでアプリケーションを作る時に気になるような質問があるので、Reduxを使っている人は見てみることをオススメします。</p>

<h2>Remove unneeded code #1640 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1640">https://github.com/reactjs/redux/pull/1640</a></li>
</ul>


<p>Reduxのutils/warningがなぜ↓のようなことをしているのか。</p>

<p>```js
  try {</p>

<pre><code>// This error was thrown as a convenience so that if you enable
// "break on all exceptions" in your console,
// it would pause the execution at this line.
throw new Error(message)
</code></pre>

<p>  /<em> eslint-disable no-empty </em>/
  } catch (e) { }
```</p>

<p><a href="https://github.com/reactjs/redux/blob/master/src/utils/warning.js#L13-L19">https://github.com/reactjs/redux/blob/master/src/utils/warning.js#L13-L19</a></p>

<p>&ldquo;break on all exceptions"を有効にしている時にここで止まるようにしているんですね。なるほど。</p>

<h2>How to sync Redux state and url hash tag params (Redux Stackoverflow)</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/36722584/how-to-sync-redux-state-and-url-hash-tag-params/36749963#36749963">http://stackoverflow.com/questions/36722584/how-to-sync-redux-state-and-url-hash-tag-params/36749963#36749963</a></li>
</ul>


<p>ReduxでURLのqueryやhashで状態を管理したい時にStateとどう同期すればいいの？<code>react-router-redux</code>使えばいいの？という質問です。
それに対して作者のDan Abramovが解答しています。
Reduxの質問に解答しているのをよく見るのでわからないことがあったらstackoverflowで聞いてみるといいかもしれないですね。</p>

<p>Stateと管理する必要はなくて、必要となった時にURLから値を取得して使えばいいという答えです。
StateにすることでActionになるので、リプレイなどがやりやすくなるメリットはありますが、必要でない場合は複雑になるだけです。</p>

<h2>MobX (Library)</h2>

<ul>
<li><a href="https://github.com/mobxjs/mobx">https://github.com/mobxjs/mobx</a></li>
</ul>


<p>Observableを活用したReduxライクなState Managementのライブラリーです。
TypeScriptで書かれています。
Reactと組み合わせることが想定されているようで、Reactとbindingするためのライブラリーもあります。</p>

<p>10分でわかる説明</p>

<ul>
<li><a href="https://mobxjs.github.io/mobx/getting-started.html">https://mobxjs.github.io/mobx/getting-started.html</a></li>
</ul>


<p>ちゃんと中身見てないので、イマイチどのあたりが素晴らしいのかわからかなったので、気が向いたらまた見てみます。
<code>@observable decorator (ES2015)</code>って書いたのがとても気になりました&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.2 4/15〜4/19]]></title>
    <link href="http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2/"/>
    <updated>2016-04-19T19:19:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>Server-side Environments (React documentation)</h2>

<ul>
<li><a href="http://facebook.github.io/react/docs/environments.html">http://facebook.github.io/react/docs/environments.html</a></li>
</ul>


<p>あまり内容はありませんが、NashornとNode環境でReactを使った例を紹介するドキュメントが追加されました。</p>

<h2>Error reporting in production #2686 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/2686">https://github.com/facebook/react/issues/2686</a></li>
</ul>


<p>かなり前のIssueですが、最近また盛り上がっているので紹介します。</p>

<p>Reactでは、warningとerrorの2種類のログレベルがありますが、現在は<code>NODE_ENV</code>がproductionであるかどうかでログを有効にするか無効にするかを切り替えることしかできません。
このissueはその辺りの改善に関するものです。</p>

<p>前回紹介したリンクでも、developmentビルドとproductionビルドのパフォーマンスの違いについてありましたが、developmentビルドでは実行速度を気にせずにデバッグログを出力していて、productionビルドでは速度優先で不要なチェックは一切行われていません。
その結果、パフォーマンスに大きな違いがあります。</p>

<p>そのため、developmentビルドのままで本番に投入することも難しく、かといってproductionビルドのままでerrorのログを確認したいという場面に対応できていません。
現在作り直しが行われているPerf周りでもPROFILEフラグをという話もあるので、その辺りとあわせて<code>REACT_ENV</code>のような新しい仕組みが入るかもしれません。</p>

<h2>Two Weird Tricks with Redux (Blog)</h2>

<ul>
<li><a href="http://jlongster.com/Two-Weird-Tricks-with-Redux">http://jlongster.com/Two-Weird-Tricks-with-Redux</a></li>
</ul>


<p>Firefox Developer Toolの開発をしている<a href="https://twitter.com/jlongster">@jlongster</a>さんによるFirefox Developer Toolsの開発にReduxを使った時の話です。
非同期処理をどうやって扱ったかということが書かれています。</p>

<p>言及されているソースはこのあたりにあるので気になる人は見るといいと思います。</p>

<ul>
<li><a href="https://github.com/mozilla/gecko-dev/tree/master/devtools/client/debugger/content">https://github.com/mozilla/gecko-dev/tree/master/devtools/client/debugger/content</a></li>
</ul>


<h2>React Flip Move (Library)</h2>

<ul>
<li><a href="https://github.com/joshwcomeau/react-flip-move/">https://github.com/joshwcomeau/react-flip-move/</a></li>
</ul>


<p>React Componentをアニメーションさせるためのライブラリーです。
READMEを見る限り、シンプルで使いやすそうです。react-motionを使っているのかと思ったけど独自実装でした。</p>

<h2>What to use for React styling? (Blog)</h2>

<ul>
<li><a href="http://andrewhfarmer.com/how-to-style-react/">http://andrewhfarmer.com/how-to-style-react/</a></li>
</ul>


<p>ReactとCSSをどのように組み合わせるのかを解説したエントリーです。
MethodologiesとPreprocessorsとPostprocessorsとInline Style Helpersのアプローチに分けて、それぞれどんな特徴でどんなライブラリーがあるということが解説されています。
ReactとCSSの扱いに悩んでいる人は見てみるといいかもしれません。</p>

<h2>Proposal: Add support for observable spec interop point #1631 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/1631">https://github.com/reactjs/redux/issues/1631</a></li>
<li><a href="https://github.com/reactjs/redux/pull/1632">https://github.com/reactjs/redux/pull/1632</a></li>
</ul>


<p>ReduxのStoreを現在stage1のes-observableの<code>Symbol.observable</code>に対応させるIssueとPRです。
これにより、RxJS 5やその他のライブラリーとも組み合わせやすくなります。</p>

<p>PR出してるのはRxJS 5のメインの開発者である<a href="https://github.com/blesh">blesh</a>さんです。
<code>Symbol.observable</code>のponyfillには<a href="https://github.com/blesh/symbol-observable">blesh/symbol-observable</a>が使われています。</p>

<h2>eslint-config-airbnb 7,0 (Library)</h2>

<ul>
<li><a href="https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/CHANGELOG.md#700--2016-04-11">https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb/CHANGELOG.md#700--2016-04-11</a></li>
</ul>


<p>Reactに関するLintも含んでいるeslint-config-airbnbの7.0がリリースされています。
React Componentのaccessibilityを検査する<code>eslint-plugin-a11y</code>が依存に追加されたので、アップデートする際は追加でインストールする必要があります。</p>

<ul>
<li><a href="https://github.com/evcohen/eslint-plugin-jsx-a11y">https://github.com/evcohen/eslint-plugin-jsx-a11y</a></li>
</ul>


<h2>5 Open Source React Native Projects To Learn From (React Native Blog)</h2>

<ul>
<li><a href="https://medium.com/@bilalbudhani/5-open-source-react-native-projects-to-learn-from-fb7e5cfe29f2">https://medium.com/@bilalbudhani/5-open-source-react-native-projects-to-learn-from-fb7e5cfe29f2</a></li>
</ul>


<p>ソースが公開されている5つのReactNativeのアプリが紹介されています。</p>

<h2>React Hot Loader 3.0 alpha demo (Library)</h2>

<ul>
<li><a href="https://github.com/gaearon/react-hot-loader/pull/240">https://github.com/gaearon/react-hot-loader/pull/240</a></li>
</ul>


<p>React Hot Loaderの3.0のalpha版がリリースされています。2は飛ばして一気に3になったようです。
3.0のデモは下記で紹介されていますので使っている人は確認してみるといいと思います。</p>

<ul>
<li><a href="https://github.com/gaearon/react-hot-boilerplate/pull/61">https://github.com/gaearon/react-hot-boilerplate/pull/61</a></li>
</ul>


<p>個人的には使っていないので詳細はわからないですが、Stateless ComponentsやHOC辺りのサポートや設定周りが改善されたようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Links vol.1 4/6〜4/14]]></title>
    <link href="http://blog.koba04.com/post/2016/04/14/reactjs-links-vol1/"/>
    <updated>2016-04-14T13:17:31+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/14/reactjs-links-vol1</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<p>今週はF8があったのでReact Native関連の記事が多くありました。</p>

<!-- more -->


<h2>React v15</h2>

<ul>
<li><a href="http://facebook.github.io/react/blog/2016/04/07/react-v15.html">http://facebook.github.io/react/blog/2016/04/07/react-v15.html</a></li>
<li><a href="https://facebook.github.io/react/blog/2016/04/08/react-v15.0.1.html">https://facebook.github.io/react/blog/2016/04/08/react-v15.0.1.html</a></li>
</ul>


<p>React v15がリリースされました。バグがあったのですぐに15.0.1がリリースされています。インストールする際には15.0.1を使用してください。</p>

<p>細かいfeatureについてはブログ書いたのでそちらをみてください</p>

<ul>
<li><a href="http://blog.koba04.com/post/2016/03/09/react-js-v15-changes/">http://blog.koba04.com/post/2016/03/09/react-js-v15-changes/</a></li>
</ul>


<h2>React Native: A year in review</h2>

<ul>
<li><a href="https://code.facebook.com/posts/597378980427792/react-native-a-year-in-review/">https://code.facebook.com/posts/597378980427792/react-native-a-year-in-review/</a></li>
</ul>


<p>React Nativeが2013年の夏に社内の(?)hackathonで誕生してから、30,000以上のstarをgithubで得るようになるまでのStoryが書かれています。
&ldquo;The React Native team has grown from around 10 to around 20 engineers in the past year"や"we are 1 percent finished. "とあるように、今後も力を入れていくことがわかります。
Facebookのエンジニア以外からのcommitも30%くらいあって、Facebook以外でも使われていることがわかります。</p>

<p>また、facebookがreact-nativeのリポジトリをどのように管理しているのかや、たくさんのissueやPRを処理するために作ったmention-botなどについても書かれていて、巨大なOSSをgithubでどう管理するかという点でも面白いです。</p>

<p><a href="https://github.com/facebook/mention-bot">https://github.com/facebook/mention-bot</a></p>

<h2>Building the F8 2016 App</h2>

<ul>
<li><a href="http://makeitopen.com/">http://makeitopen.com/</a></li>
</ul>


<p>ReactNativeを使ってF8のiOSとAndroidのアプリを作った際のことを、チュートリアルとして紹介しています。
どのような構成にするのかを検討して、マルチプラットフォーム対応をどうするか、データ管理をどうするか、テストをどうするかなどが書かれていてとても参考になります。</p>

<p>React使っている人は一度見てみるといいんじゃないかと思います。</p>

<p>ReactNative + Flow + Redux + Jestな構成でサーバーサイドにはOSSのParse Serverを使っているようです。
エディターはNuclideだそうです。</p>

<p>アプリのソースコードもgithubで公開されています。</p>

<ul>
<li><a href="https://github.com/fbsamples/f8app">https://github.com/fbsamples/f8app</a></li>
</ul>


<h2>React Native on the Universal Windows Platform</h2>

<ul>
<li><a href="https://blogs.windows.com/buildingapps/2016/04/13/react-native-on-the-universal-windows-platform/">https://blogs.windows.com/buildingapps/2016/04/13/react-native-on-the-universal-windows-platform/</a></li>
</ul>


<p>MicroSoftがUniversal Windows Platform (UWP)対応をReactNativeに追加することが書かれています。
これにより、WindowsのPCがモバイルだけでなく、Xbox OneやHoloLensのためのアプリをReactNativeで作れるようになります。
記事では、F8のアプリをWindows 10 mobileとDesktop向けに作ったことが紹介されています。</p>

<p>JavaScriptのランタイムにはChakraが使われているみたいです。</p>

<p>また、VSCodeのReactNative拡張やReactNativeを使ったWindowsアプリに対するCodePush対応などを行っているようです。</p>

<ul>
<li><a href="http://microsoft.github.io/code-push/articles/ReactNativeWindows.html">http://microsoft.github.io/code-push/articles/ReactNativeWindows.html</a></li>
</ul>


<p>現在はforkしたrepositoryになっていますが、将来的にはReactNative本体と同期が取れるようにうまくやっていくようです。</p>

<p><a href="https://github.com/ReactWindows/react-native">https://github.com/ReactWindows/react-native</a></p>

<h2>core note 4/7</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-04/april-7.md">https://github.com/reactjs/core-notes/blob/master/2016-04/april-7.md</a></li>
</ul>


<p>Reactのcoreチームのmeeting noteが公開されています。
以前はあったものの途中で削除されたBrowser Testingについて言及されているのは注目です。</p>

<p>その他では、<em>ReactDOM.render() return value being <del>deprecated</del> legacy</em> (<a href="https://github.com/facebook/react/pull/6400">#6400</a>) も注目です。
内部的なアルゴリズムの見直しをするために、ReactDOM.renderが将来的に戻り値を返さなくなります。
戻り値を使いたい場合は、Refsを指定して取得することになりそうです。</p>

<p>また、<em>Sebastian is moving some files from React Native to React</em> (<a href="https://github.com/facebook/react/pull/6338">#6338</a>)としてReactNativeのrenderer周りをreactのrepositoryに持ってきて、<code>react-native-renderer</code>として別パッケージにすることも予定されています。
さらに<code>react-dom</code>から<code>react-dom-renderer</code>も切り離すことを検討されています。</p>

<p>これによってカスタムrendererを作る時のI/Fが整備されて、わかりやすくなるといいなと思います。
Windows対応もあったりでこの辺りを整理する優先度は高そうです。</p>

<h2>Improve React performance with Babel</h2>

<ul>
<li><a href="https://medium.com/doctolib-engineering/improve-react-performance-with-babel-16f1becfaa25">https://medium.com/doctolib-engineering/improve-react-performance-with-babel-16f1becfaa25</a></li>
</ul>


<p>productionビルドやBabelの最適化を使った場合のパフォーマンスについてのエントリーです。当たり前ですが、developmentビルドとproductionビルドのパフォーマンスの違いが目立っています。
Babelを使った最適化の場合でも数%の向上が見られますが、アプリケーションによるので利用する際は計測してみて導入することをおすすめします。</p>

<h2>unofficial React Router docs</h2>

<ul>
<li><a href="http://knowbody.github.io/react-router-docs/">http://knowbody.github.io/react-router-docs/</a></li>
</ul>


<p><a href="https://github.com/knowbody">knowbody</a>さんによる非公式なReact Routerのドキュメントです。WIPですが、公式を読んでよくわからなかった人は確認してみるといいかもしれません。</p>

<h2>React Router is dead. Long live rrtr.</h2>

<p><strong>下のエントリーは現在は削除されています。</strong></p>

<ul>
<li><del><a href="https://medium.com/@taion/react-router-is-dead-long-live-rrtr-d229ca30e318#.vd0qjkccc">https://medium.com/@taion/react-router-is-dead-long-live-rrtr-d229ca30e318#.vd0qjkccc</a></del></li>
</ul>


<p>React Routerでここ数ヶ月中心的にcontributeしていた<a href="https://github.com/taion">taion</a>さんがリリースのサイクルの遅さやプロセスに不満を抱いてforkして<a href="https://github.com/taion/rrtr">rrtr</a>を作ったことを表明したエントリーです。</p>

<p>それに対して、React Routerのオーナーである<a href="https://github.com/ryanflorence">ryanflorence</a>さんもgistでリアクションしています。</p>

<ul>
<li><del><a href="https://gist.github.com/ryanflorence/08a056374e24a7cda3c459e3d7d63e6e">https://gist.github.com/ryanflorence/08a056374e24a7cda3c459e3d7d63e6e</a></del> (<strong>これも削除済み</strong>)</li>
</ul>


<p>で下の通り、結局丸く収まりました。</p>

<ul>
<li><a href="https://medium.com/rackt-and-roll/rrtr-is-dead-long-live-react-router-ce982f6f1c10">https://medium.com/rackt-and-roll/rrtr-is-dead-long-live-react-router-ce982f6f1c10</a></li>
</ul>


<p>結果的に、PRをmergeするプロセスや定期的なリリースなど、プロジェクトの運営方針が行われました。</p>

<p>ちなみにtaionさんはhistoryと組み合わせてscroll位置の復元などをサポートするscroll-behaviorというライブラリーも公開しています。</p>

<ul>
<li><a href="https://github.com/taion/scroll-behavior">https://github.com/taion/scroll-behavior</a></li>
</ul>


<h2>crysislinux/chrome-react-perf</h2>

<ul>
<li><a href="https://github.com/crysislinux/chrome-react-perf">https://github.com/crysislinux/chrome-react-perf</a></li>
</ul>


<p>Perfによる計測をChrome Developer Toolsで行うことができるライブラリーです。
カジュアルに計測が出来そうなのでよさそうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js v15.0 changes]]></title>
    <link href="http://blog.koba04.com/post/2016/03/09/react-js-v15-changes/"/>
    <updated>2016-03-09T13:07:52+09:00</updated>
    <id>http://blog.koba04.com/post/2016/03/09/react-js-v15-changes</id>
    <content type="html"><![CDATA[<p><strong>v15.0.0がリリースされました(2016/04/08)</strong></p>

<hr />

<p><strong>RC2が出たので追記</strong></p>

<p><strong>RC2</strong> ではIE、Edgeでマークアップの構造によって一部のテキストが表示されないバグ(<a href="https://github.com/facebook/react/issues/6246">#6246</a>)とSVGに関する変更がrevertされました。</p>

<hr />

<p>React.js v15.0がリリースされたので変更内容などを整理したいと思います。</p>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/03/07/react-v15-rc1.html">https://facebook.github.io/react/blog/2016/03/07/react-v15-rc1.html</a></li>
<li><a href="http://facebook.github.io/react/blog/2016/03/16/react-v15-rc2.html">http://facebook.github.io/react/blog/2016/03/16/react-v15-rc2.html</a></li>
<li><a href="http://facebook.github.io/react/blog/2016/04/07/react-v15.html">http://facebook.github.io/react/blog/2016/04/07/react-v15.html</a></li>
</ul>


<p><code>
% npm install --save react@15.0.0 react-dom@15.0.0
</code></p>

<p>今回の一番大きな変更はバージョン番号かなと思います。</p>

<p>0.14から15.0に。</p>

<p>0.x系だとproduction readyではないと思われることから一気に15.0になりましたが0.がなくなっただけで大きな変化があるわけでもないです。
なぜ1.0ではないのかというと1.0というバージョン番号は特別意味のあるものとして扱われるので、そうではなくてすでにproduction readyでありsemverに従っているということを明確にするために0.を取って15.0になりました。</p>

<p><a href="https://facebook.github.io/react/blog/2016/02/19/new-versioning-scheme.html">https://facebook.github.io/react/blog/2016/02/19/new-versioning-scheme.html</a></p>

<p>ちなみにこれまでもminor version(0.13 &ndash;> 0.14)などでは破壊的な変更がありましたがpatch version(0.14.1 &ndash;> 0.14.2)などは基本的には破壊的な変更はなかったのでバージョンアップのサイクルなどが変わることはないと思います。
（patch versionの更新でUndocumentedなfeatureで破壊的な変更が入ることはありましたが&hellip;）</p>

<p>これまでも破壊的な変更をする際は基本的には前のバージョンでwarningを入れてから更新するので、今回もすでに0.14.7を使っていて特にwarningなどが出力されていないのであれば問題なく15.0にアップデートできると思います。</p>

<!-- more -->


<p>ちなみにIE8のサポートについてはまだIE8対応のコードは削除されていないので動作するはずですが、今後はIE8のためだけのバグFixなどは行わないというステータスです。</p>

<p><a href="https://facebook.github.io/react/blog/2016/01/12/discontinuing-ie8-support.html">https://facebook.github.io/react/blog/2016/01/12/discontinuing-ie8-support.html</a></p>

<h2>Major changes</h2>

<h3>document.createElement is in and data-reactid is out</h3>

<p>これまではReactで構築した全てのDOMに対して<code>data-reactid</code>という属性が付与されていましたがそれが付与されなくなりました。すっきりしていいですね。
ReactDOM.renderを行ったルートの要素には<code>data-reactroot</code>という属性が付与されます。</p>

<p>またこれまでは多くの場合で<code>document.createElement</code>を使うよりも高速であるという理由から初期マウント時にはHTML文字列を生成してinnerHTMLで流し込んでいましたが、ブラウザーの改善などにより必ずしもそうとも言えなくなってきたので<code>document.createElement</code>を使って作成するように変更されました。</p>

<p><code>data-reactid</code>がなぜ必要だったのかはReactのイベントの仕組みに関係しています。
ReactではイベントハンドリングはそれぞれのReactElementと対応付けられたDOM要素にイベントリスナーを登録してハンドリングするのではなく、<code>ReactDOM.render</code>で指定したルートのDOM要素だけにイベントリスナーを登録してそこで全てのイベントをハンドリングしています。
ルートで受け取ったイベントがどのReactElementと対応付けられたDOMで発生したのかを判定するために<code>data-reactid</code>が使用されていました。</p>

<p>イベントは頻繁に発生するため内部ではキャッシュなどを駆使して高速化が図られていたのですがそれによるバグも多く、今回HTML文字列ではなくDOM要素を作成するようになり、DOM要素を保持しておけばいいので<code>data-reactid</code>を使ったマッピング情報を保持しておく必要がなくなりました。</p>

<p>ちなみに<code>ReactDOM.renderToString</code>を使って生成したHTML文字列には変わらず<code>data-reactid</code>が付与されています。</p>

<h3>No more extra <code>&lt;span&gt;</code>s</h3>

<p><code>{name}</code>などのように変数を文字列として埋め込んだ際にこれまでは差分更新のために<code>span</code>タグで囲まれていたのがcomment nodeに変更されました。</p>

<ul>
<li>v0.14</li>
</ul>


<p>```html</p>

<div id="app">
<div data-reactid=".0">
<span data-reactid=".0.0">Hello </span>
<span data-reactid=".0.1">React</span>
</div>
</div>


<p>```</p>

<ul>
<li>v15</li>
</ul>


<p>```html</p>

<div id="app">
<div data-reactroot="">
<!-- react-text: 2 -->Hello <!-- /react-text -->
<!-- react-text: 3 -->React<!-- /react-text -->
</div>
</div>


<p>```</p>

<p>この変更はマークアップ構造の変更を生むので更新する際には注意が必要です。
特にCSS周りやテストでspanが挿入されることに依存したコードを書いていると壊れます。</p>

<p>元々が意図しないマークアップが挿入されていたのでそれがなくなってよかったんじゃないでしょうか。</p>

<h3>Rendering null now uses comment nodes</h3>

<p>renderメソッドでnullを返した場合に、これまでは<code>&lt;noscript&gt;</code>タグがrenderされていましたがcomment nodeに変更されました。
この変更もマークアップ構造の変更を生むので特に<code>:nth-child</code>などのセレクターを使っている場合には注意が必要です。</p>

<p>また下記のエントリーにもあるように無駄に<code>&lt;noscript&gt;</code>タグが更新されていたような場合に対するパフォーマンスの改善となります。</p>

<p><a href="http://benchling.engineering/deep-dive-react-perf-debugging/">http://benchling.engineering/deep-dive-react-perf-debugging/</a></p>

<h3>Improved SVG support</h3>

<p><strong>[更新]RC2でrevertされました</strong></p>

<p><del>全てのSVGタグがサポートされるようになりました。一般的ではないタグは<code>React.DOM</code>のヘルパーとしては提供されていませんが、<code>React.createElement</code>で全てのSVGタグを作成できます。</del>
<del>全てのSVGタグはキャメルケースやハイフンなどそのままの指定で作成できます。</del>
<del><code>gradientTransform</code>は<code>gradientTransform</code>のままで<code>clip-path</code>は<code>clip-path</code>のまま指定します。</del></p>

<p><del>ちなみにクラスを指定する場合は<code>className</code>ではなくて、<code>class</code>で指定します。custom elementsと同じです。</del>
<del>それに関するissueはこちら。</del></p>

<p><del> <a href="https://github.com/facebook/react/issues/6211">https://github.com/facebook/react/issues/6211</a> </del></p>

<p>このSVGに対する挙動の変更はcustom elementsの挙動と同様であったのですが、HTMLElementとの整合性(<code>class</code> &ndash;> <code>className</code>など)がなくなってしまうことが問題だということでrevertされました。
なのでサポートされていないsvgの要素や属性があれば引き続きPRして反映する必要があります。こんな感じで。(<a href="https://github.com/facebook/react/pull/6267">#6267</a>)</p>

<p>将来的にはSVGもHTMLも普段SVGやHTMLと同じようにclassはclassのままで指定できるようになるのではないかなと思います。具体的な予定は示されていませんが&hellip;。</p>

<h2>Breaking changes</h2>

<p>v15で最も大きなBreaking changeは上に書いたspanタグを使わなくなったことによるマークアップ構造の変化です。</p>

<p>その他では、v0.14でwaringsを出力していたDeprecatedなAPIが完全に削除されました。</p>

<ul>
<li><p>Reactのパッケージから<code>findDOMNode</code>, <code>render</code>, <code>renderToString</code>, <code>renderToStaticMarkup</code>, <code>unmountComponentAtNode</code>が削除されました。代わりにReactDOMのパッケージにある同名のAPIを使います。</p></li>
<li><p>Addonとして提供されていた<code>batchedUpdates</code>と<code>cloneWithProps</code>が削除されました。</p></li>
<li><p><code>setProps</code>, <code>replaceProps</code>, <code>getDOMNode</code>のAPIが削除されました。</p></li>
</ul>


<h2>New deprecations, introduced with a warning</h2>

<p><code>LinkedStateMixin</code>と<code>valueLink</code>はほとんど使われておらず、v16で廃止するためのwarningを追加されます。</p>

<p><a href="https://facebook.github.io/react/docs/two-way-binding-helpers.html">https://facebook.github.io/react/docs/two-way-binding-helpers.html</a></p>

<p>必要な場合は下記のパッケージを利用してください。</p>

<p><a href="https://www.npmjs.com/package/react-linked-input">https://www.npmjs.com/package/react-linked-input</a></p>

<h2>New helpful warnings</h2>

<ul>
<li>developmentビルド(<code>NODE_ENV</code>が<code>production</code>でない)にも関わらずminifiedされている場合はproductionビルドを使うようにwarningが出ます。

<ul>
<li>Reactの中のコードを見たことがある人であればproductionビルドにする必要性がわかるはず&hellip;。developmentビルドには大量のデバッグやwarning用のコードが含まれています。</li>
</ul>
</li>
<li>styleのwidthやmarginに数値を渡すと自動で単位(px)を付与してくれますが、その際に数値を文字列として渡しているとwarningが出ます。将来のバージョンでは文字列の場合は単位が自動で付与されなくなります。

<ul>
<li><code>&lt;div style={ {width: 10} }&gt;</code>はOK、<code>&lt;div style={ {width: "10"} }&gt;</code>はwarningが出ます。</li>
</ul>
</li>
<li>SyntheticEventに追加でpropertyをセットしようとしたり、すでに解放されているのにアクセスしようとするとwarningが出力されます。

<ul>
<li>追加でpropertyをセットした場合にwarningが出るのはES2015のProxiesがサポートされている環境のみです。ちなみに自分が実装しました。</li>
</ul>
</li>
<li>ReactElementの<code>ref</code>と<code>key</code>のPropにアクセスしようとするとwarningが出力されます。これらはReact自体が使うためのPropでkeyで使った値が必要な場合は別途Propとして設定する必要があります。</li>
<li>DOM ElementのPropに対して、<code>onClick</code>を<code>onclick</code>のように大文字・小文字の指定が間違っている場合にはwarningが出力されるようになりました。</li>
</ul>


<h2>Notable bug fixes</h2>

<ul>
<li>幾つかのメモリリークが修正されています。</li>
</ul>


<hr />

<p>SyntheticEventでのメモリリークについては自分が修正したので紹介しておくとSyntheticEventの<code>target</code>属性が正しく解放されるようになりました。</p>

<p>SyntheticEventはPoolingされており、イベントハンドラーの処理が終了すると初期化されPoolに戻るのですが一番よく使う<code>target</code>属性だけ解放されていませんでした。
したがって、下記のようなコードはv0.14では動作していましたがv15では動作しません。</p>

<p>```js
const Component = () => (</p>

<pre><code>&lt;div onClick={e =&gt; {
  setTimeout(() =&gt; console.log(e.target)); // &lt;div&gt;click&lt;/div&gt;
}}&gt;
  click
&lt;/div&gt;
</code></pre>

<p>);
```</p>

<p>これは<code>onClick</code>が実行された時点でSyntheticEvent(<code>e</code>)が初期化されており、setTimeoutのコールバック実行時にはすでにtargetの値が初期化(null)されているためです。
上記の場合、<code>target</code>をローカル変数として保持するか<code>e.persist()</code>を使って保持する必要があります。</p>

<p>SyntheticEventがPoolingされているのは大量のイベントオブジェクトを作成することで発生するGCを避けるなどパフォーマンス上の理由からなのですが、モダンなブラウザーではもう必要ないのではないかということでPoolingをやめることが検討されています。</p>

<p>SyntheticEvent周りは自分が追加したProxyを使ったコードなどかなり混沌としてきているのでPoolingやめてリファクタリングするのはとてもいいと思います。やりたい&hellip;。</p>

<p><a href="https://github.com/facebook/react/issues/6190">https://github.com/facebook/react/issues/6190</a></p>

<hr />

<ul>
<li>IE10, 11などでのイベントの扱いが改善されています。</li>
<li><code>cite</code>と<code>profile</code>の属性がサポートされました。</li>
<li><code>onAnimationStart</code>, <code>onAnimationEnd</code>, <code>onAnimationIteration</code>, <code>onTransitionEnd</code>, <code>onInvalid</code>のイベントがサポートされました。また<code>object</code>要素に<code>onLoad</code>イベントが追加されました。</li>
<li>shallowCompareなどのいくつかの場所で<code>Object.is</code>による比較が行われるようになりました(実際にはpolyfill)。これにより、<code>+0 !== -0</code>となったり<code>NaN === NaN</code>となります。

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is</a></li>
</ul>
</li>
<li><p>ReactDOMがデフォルトではpropertyとしてではなくattributeとして扱うようになります。これによるEdge caseなバグが修正されました。また属性値が<code>null</code>の場合に属性が完全に削除されるようになりました。これによりブラウザーがデフォルト値を設定しないようになります。</p></li>
<li><p>あとblogにはありませんでしたが、Stateless Componentsが<code>null</code>を返せるようになったのは地味に嬉しいですね！</p></li>
</ul>


<h2>Regression?</h2>

<ul>
<li>15.0.0-rc.1では<code>onTouchTap</code>が動作していないようなので使っている人は注意した方がよさそうです。

<ul>
<li><a href="https://github.com/facebook/react/issues/6221">https://github.com/facebook/react/issues/6221</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js meetup #3を開催しました]]></title>
    <link href="http://blog.koba04.com/post/2016/03/07/reactjs-meetup3/"/>
    <updated>2016-03-07T17:08:38+09:00</updated>
    <id>http://blog.koba04.com/post/2016/03/07/reactjs-meetup3</id>
    <content type="html"><![CDATA[<p>前回開催したのが9月だったみたいなので半年くらい経ちましたがReact.js meetup #3を開催しました。</p>

<ul>
<li><a href="http://reactjs-meetup.connpass.com/event/26229/">http://reactjs-meetup.connpass.com/event/26229/</a></li>
</ul>


<p>今回はサイボウズさんに会場を提供して頂き開催することができました。
サイボウズの皆様、参加者の皆様、発表者の皆様ありがとうございました！！</p>

<p>connpassの管理画面によると<strong>75/80人</strong>の方が参加してくださいました。感謝！</p>

<p>{% img /images/reactjs-meetup3.jpg &lsquo;React.js meetup #3&rsquo; %}</p>

<!-- more -->


<h2>開催の経緯</h2>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/koba04">@koba04</a> hey! I&#39;ll be in Tokyo in February. Are there any ReactJS or general JavaScript meetups happening during that time?</p>&mdash; Christoph Pojer (@cpojer) <a href="https://twitter.com/cpojer/status/691698537306796032">January 25, 2016</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>というmentionがきっかけで急遽の開催となりました。前回と全く同じような経緯です。</p>

<p><a href="http://blog.koba04.com/post/2015/09/09/reactjs-meetup2/">http://blog.koba04.com/post/2015/09/09/reactjs-meetup2/</a></p>

<h2>準備など</h2>

<p><a href="https://twitter.com/yosuke_furukawa">@yusuke_furukawa</a>会長と相談しつつ、サイボウズさんに会場が決まってからは当日の準備や受付、懇親会の手配までサイボウズの方々にお任せしてしまって本当に助かりました！
というわけで今回も自分はあまり何もしてないのですがイベントの構成を考えたりしていました。</p>

<p>募集に関しては募集開始日に埋まることは予想していたのですが、2分持たずに埋まることまでは想定していなかったので次回の募集方法については考えようかなと思っています。
（先着・抽選50%ずつなど）</p>

<h2>Talk</h2>

<p>Talkに関しては、<a href="https://twitter.com/cpojer">@cpojer</a>さんのTalkは事前に相談して得意分野であるというjscodeshitについてのTalkをお願いしてReactなどについてはQ&amp;Aでという形になりました。
Q&amp;Aについては<a href="https://twitter.com/yando">@yando</a>さんが通訳してくださったので本当に助かりました。ありがとうございました！！</p>

<p>今回のTalkはJSConf EU 2015でのTalkがベースになっているので興味のある方はそちらも参照してください。</p>

<p><a href="https://www.youtube.com/watch?v=d0pOgY8__JM">https://www.youtube.com/watch?v=d0pOgY8__JM</a></p>

<p>その他のTalkについても自分が聞きたいなぁと思った内容について個別にTalkをお願いしました。
どのTalkも15分では短いくらいで面白かったです。</p>

<p>LTもどれも面白かったですね。</p>

<p>全部のTalkの資料が公開されているわけではないですが、下記のブログやtogetterによるまとめを見てください！</p>

<ul>
<li><a href="http://blog.cybozu.io/entry/2016/03/04/080000">http://blog.cybozu.io/entry/2016/03/04/080000</a></li>
<li><a href="http://togetter.com/li/942145">http://togetter.com/li/942145</a></li>
</ul>


<h2>参加者</h2>

<p>挙手でアンケートを取ったのですが、</p>

<ul>
<li>Reactを使っている人 &hellip; ほとんど全員</li>
<li>仕事でReact使っているという人 &hellip; 半分くらい</li>
<li>Redux使っている人 &hellip; 半分くらい</li>
<li>Facebook Flux使っている人 &hellip; 1割くらい</li>
<li>GraphQL、Relay使っている人 &hellip; 1人？</li>
<li>ReactNative使っている人 &hellip; 1人？</li>
</ul>


<p>みたいな感じでした。
GraphQL、Relay、ReactNativeなんかは英語の記事ではそこそこ見るのですがやはり導入のハードルが高いので実際に踏み込んでいる人はそんなに多くなさそうです。</p>

<p>ReactNativeはGitHubを見てる限り今も活発にメンテナンスされていて、React.js Conf 2016でもTalkが多かったので今後どうなるのかは注目しています。</p>

<h2>次回&hellip;?</h2>

<p>次回はなんとなく6月の頭にあるReact Europe後くらいがいいかなと思っていますが、何か話したいネタがあったり聞きたいテーマなどあれば教えてもらえるとそれまでに開催するかもしれないのでよろしくお願いします！</p>

<p>Reactの勉強会が少ない気がするという声も聞いたのでやりたい人がいたら是非やるといいんじゃないかなと思います！</p>
]]></content>
  </entry>
  
</feed>
