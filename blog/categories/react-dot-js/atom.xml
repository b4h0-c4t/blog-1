<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react.js | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/react-dot-js/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2016-08-10T14:09:30+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.10]]></title>
    <link href="http://blog.koba04.com/post/2016/08/10/react-dot-js-links-vol-dot-10/"/>
    <updated>2016-08-10T14:09:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/08/10/react-dot-js-links-vol-dot-10</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。
10回目!!!</p>

<!-- more -->


<h2>React v15.3.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.3.0">https://github.com/facebook/react/releases/tag/v15.3.0</a></li>
</ul>


<p>Reactのv15.3.0がリリースされました。</p>

<p>今回の大きな変更点は、<code>React.PureComponent</code>の追加です。
これは、PureRenderMixinのES Classes版というような実装で、自動的に<code>shouldComponentUpdate</code>にshallowEqualが適用されるというものです。
最初このPRが出された時には、内部のStateless Functional Componentにも最適化が適用されるという実装も含まれていましたが、PR内での議論で問題点などが見えたため、今回はただのPureRenderMixin for ES Claseesとして入りました。</p>

<p>今後、v16のタイミングなどでさらなる最適化が追加される可能性はあります。</p>

<p>もう一つ、大きな点は<code>react-test-render</code>というパッケージのリリースです。
これは、TestUtilsのShallowRenderと似ていますが、Shallowではなく子孫までrenderして結果をReactElementのJSONとして返します。
refやライフサイクルメソッドなどが呼ばれる点もShallowRenderとは異なります。</p>

<p>```js
import renderer from &lsquo;react-test-renderer&rsquo;;</p>

<p>const json = renderer.create(<App />).toJSON();
```</p>

<p>Jestにはこれを使ったsnapshottestが追加されました。</p>

<h2>Create Apps with No Configuration</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html">https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html</a></li>
<li><a href="https://github.com/facebookincubator/create-react-app">https://github.com/facebookincubator/create-react-app</a></li>
</ul>


<p>Reactを使ったSingle Page Applicationのひな形を作成している公式のcliがリリースされました。
これまでFacebookは自分たちが実際にプロダクトで使っているものだけをOSSにする方針でしたが、今回はコミュニティーの声に応えて作成したものです。</p>

<p>インストールして、<code>create-react-app hello-world</code>として、<code>npm start</code>すればもう開発できるのは手軽でいいですね。
また、<code>npm run eject</code>すると<code>react-scripts</code>というパッケージの内部に隠れていたwebpackの設定などが全部展開されてカスタマイズ出来るようになるのも面白いですね。</p>

<p>まだ公開されてすぐなので、<code>facebookincubator/create-react-app</code>のリポジトリが、Reactを使ったプロジェクトの構成について多くの人が意見を交わしていてなかなか混沌としています。</p>

<h2>Jest 14.0: React Tree Snapshot Testing</h2>

<ul>
<li><a href="http://facebook.github.io/jest/blog/2016/07/27/jest-14.html">http://facebook.github.io/jest/blog/2016/07/27/jest-14.html</a></li>
</ul>


<p>Jestが密かに追加されている新しいテスト用のrendererを使って、snapshot testをサポートしたという話です。
snapshot testなので、一度テストを実行するとスナップショットのファイルが作成されて、次回からはそのスナップショットとテストが一致するかどうかを判定する感じです。</p>

<p>その他にもReactNativeのサポートや、今後の予定(Jasmine捨てる)などが書かれています。</p>

<h2>React.js in patterns</h2>

<ul>
<li><a href="http://krasimirtsonev.com/blog/article/react-js-in-design-patterns">http://krasimirtsonev.com/blog/article/react-js-in-design-patterns</a></li>
</ul>


<p>High Order ComponentsやContextをDIなど、Reactのパターン集です。</p>

<h2>Function as Child Components</h2>

<ul>
<li><a href="https://medium.com/@iammerrick/function-as-child-components-5f3920a9ace9#.bnfwsk5un">https://medium.com/@iammerrick/function-as-child-components-5f3920a9ace9#.bnfwsk5un</a></li>
</ul>


<p>公式のブログでも言及されて、広く使われるようになったHigh Order Components(HOC)ですが、HOCではなくてchildrenに関数を渡すFunction as Child Componentsのパターンの方が有効ではないかとエントリーです。</p>

<p>Function as Child Componentsにすることで、不要なComponentのラッピングをなくすことが出来たり、Propsの衝突を避けることも容易だとしています。</p>

<h2>Use RxJS with React</h2>

<ul>
<li><a href="http://michalzalecki.com/use-rxjs-with-react/">http://michalzalecki.com/use-rxjs-with-react/</a></li>
</ul>


<p>RxJSを使ってReduxライクな状態管理を行う方法についてのエントリーです。</p>

<h2>How to handle state in React. The missing FAQ.</h2>

<ul>
<li><a href="https://medium.com/react-ecosystem/how-to-handle-state-in-react-6f2d3cd73a0c">https://medium.com/react-ecosystem/how-to-handle-state-in-react-6f2d3cd73a0c</a></li>
</ul>


<p>Reactを学ぶ時に最初からReduxなどを使うのではなくて、ReactのStateから始めようってことで、Stateを扱う方法についてエントリーです。</p>

<h2>Redux vs MobX vs Flux vs&hellip; Do you even need that?</h2>

<ul>
<li><a href="http://goshakkk.name/redux-vs-mobx-vs-flux-etoomanychoices/">http://goshakkk.name/redux-vs-mobx-vs-flux-etoomanychoices/</a></li>
</ul>


<p>上記のエントリーと同じように、まずはReactだけで始めて必要になったらReduxやMobXについて検討しましょうというエントリーです。
Reactだけだと何が辛くて、何を解決するためにReduxなどのライブラリーを使うのかを理解してないと、ただ覚えることが増えたみたいに感じるということはありそうです。</p>

<h2>A STEP-BY-STEP TDD APPROACH ON TESTING REACT COMPONENTS USING ENZYME</h2>

<ul>
<li><a href="http://thereignn.ghost.io/a-step-by-step-tdd-approach-on-testing-react-components-using-enzyme/">http://thereignn.ghost.io/a-step-by-step-tdd-approach-on-testing-react-components-using-enzyme/</a></li>
</ul>


<p>Enzymeを使って、React ComponentをTDDでテストを書いていく方法についてのエントリーです。
TDDの流れに沿って順番にテストを書いていく方法が丁寧に解説されています。</p>

<h2>The Problem with CSS-In-JS, circa Mid-2016</h2>

<ul>
<li><a href="https://medium.com/@taion/the-problem-with-css-in-js-circa-mid-2016-14060e69bf68#.ndfajua3p">https://medium.com/@taion/the-problem-with-css-in-js-circa-mid-2016-14060e69bf68#.ndfajua3p</a></li>
</ul>


<p>CSS in JSやCSS ModulesのようなComponentに閉じたCSSを使う場合の問題点についてのエントリーです。
コンテキストによるスタイルの違いを、CSSがそれぞれ独立している中でどのようにComponentとして表現するかという内容です。</p>

<h2>React Native at SoundCloud</h2>

<ul>
<li><a href="https://developers.soundcloud.com/blog/react-native-at-soundcloud">https://developers.soundcloud.com/blog/react-native-at-soundcloud</a></li>
</ul>


<p>SoundCloudがReactNativeでSoundCloud Purseのアプリを作った時の話です。
なぜReactNativeを使ったのか、実際使ってみてどうだったのかが書かれています。</p>

<h2>A Glimpse Into The Future With React Native For Web</h2>

<ul>
<li><a href="https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/">https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/</a></li>
</ul>


<p><code>react-native-web</code>の現状についてのエントリーです。
基本的には、まだプロダクションで使うレベルにはなっていないけど今後に期待という感じです。</p>

<h2>React Fiber Architecture</h2>

<ul>
<li><a href="https://github.com/acdlite/react-fiber-architecture">https://github.com/acdlite/react-fiber-architecture</a></li>
</ul>


<p>現在実装が進められているReact内部のアルゴリズムであるReact Fiberについてのエントリーです。
詳細については書かれていませんが、導入としては良さそうです。</p>

<p>ちなみにacdliteさんは、今setStateのReact Fiber対応をやっています。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/7344">https://github.com/facebook/react/pull/7344</a></li>
</ul>


<h2>Internationalization in React</h2>

<ul>
<li><a href="https://medium.freecodecamp.com/internationalization-in-react-7264738274a0#.33osi3w58">https://medium.freecodecamp.com/internationalization-in-react-7264738274a0#.33osi3w58</a></li>
</ul>


<p><code>react-intl</code>を使ったReactを使ったアプリケーションでのi18n対応についてのエントリーです。</p>

<h2>Flow: Mapping an object</h2>

<ul>
<li><a href="https://medium.com/@thejameskyle/flow-mapping-an-object-373d64c44592#.xm62m8pic">https://medium.com/@thejameskyle/flow-mapping-an-object-373d64c44592#.xm62m8pic</a></li>
</ul>


<p>Flowでどのように型付けをしていけばいいのかということを、<code>map-obj</code>に型付けしていきながら解説しているエントリーです。
わかりやすいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.9]]></title>
    <link href="http://blog.koba04.com/post/2016/07/21/react-dot-js-links-vol-dot-9/"/>
    <updated>2016-07-21T19:38:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/07/21/react-dot-js-links-vol-dot-9</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.2.1</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.2.1">https://github.com/facebook/react/releases/tag/v15.2.1</a></li>
</ul>


<p>Bug Fixやwarningの追加などが中心です。</p>

<h2>Introducing React&rsquo;s Error Code System</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/11/introducing-reacts-error-code-system.html">https://facebook.github.io/react/blog/2016/07/11/introducing-reacts-error-code-system.html</a></li>
</ul>


<p>React v15.2.0で導入されたエラーコードシステムの解説です。
これにより、プロダクションビルドでもエラーの詳細を確認することができるようになります。</p>

<h2>Design Principles</h2>

<ul>
<li><a href="https://facebook.github.io/react/contributing/design-principles.html">https://facebook.github.io/react/contributing/design-principles.html</a></li>
</ul>


<p>Reactのドキュメントに新しく「Contributing」というセクションが追加されて、Design Principlesというドキュメントが追加されました。
今後、実装のOverviewなどが追加される予定で楽しみです。</p>

<p>Design Principlesでは、Reactが何を重要に考えていてどのように開発をされているかということを「Composition」「Common Abstraction」「Escape Hatches」「Stability」「Interoperability」「Scheduling」「Developer Experience」「Debugging」「Configuration」「Beyond the DOM」「Implementation」「Optimized for Tooling」「Driven by Facebook」という分類で解説されています。</p>

<p>Reactを始める時に最初に読む必要はないですが、Reactについてもっと知りたい人や、Reactを使うかどうか判断する場合に、とてもドキュメントになっています。</p>

<h2>Mixins Considered Harmful</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html">https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html</a></li>
</ul>


<p>Facebook内のコードからMixinを削除しているという話をCore Noteで何度か紹介していましたが、その際の知見も含めた形で、Mixinからの移行を促すエントリーです。
（Mixin自体は、<code>React.createClass</code>に残されます）</p>

<p>Facebook内でMixinが利用されていたケースを取り上げ、High Order Componentsなどのパターンで置き換える方法が丁寧に説明されています。</p>

<p>Design Principlesのドキュメントもそうですが、Dan AbramovがReact Teamに加わってから色々整備されて、よくなってきてるのを感じます。</p>

<h2>Core Team meeting note</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-07/july-07.md">https://github.com/reactjs/core-notes/blob/master/2016-07/july-07.md</a></li>
</ul>


<p>ReactComponentは複数のReactElementを返すことができないので、<code>&lt;div&gt;</code>などで囲む必要があるのですが、これをFragmentsのようなものを導入してどうにかするという話が出ています。
2016年中には入れたいという感じのようです。</p>

<p>Rollupを使ったUMD Bundleのサイズ削減も取り上げられています。
ReactはCommonJSで書かれているのでCommonJSからES Moudlesに変換してRollupに渡す形になっていて、将来的にはES Modulesに移行したいけど、Facebook内部のビルドシステムでES Modulesを使えないのでそうせざるを得ないということのようです。</p>

<p>ファイルサイズについて考えた時に、Reactのイベントシステムの部分が大きな割合を占めていて、これはブラウザー間のAPIや挙動の違いを吸収するレイヤーになっているけど、必要なのかということも取り上げられています。</p>

<h2>Optimizing Compiler: Component Folding #7323</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/7323">https://github.com/facebook/react/issues/7323</a></li>
</ul>


<p>Reactでの新たな最適化についてのIssueです。
<a href="https://en.wikipedia.org/wiki/Constant_folding">Constant folding</a>や<a href="https://en.wikipedia.org/wiki/Inline_expansion">Inline expansion</a>や<a href="https://en.wikipedia.org/wiki/Dead_code_elimination">Dead code elimination</a>を使って最適化を行いたいようです。
一部はRollupがやっていることですね。</p>

<p>ただ、JSはデフォルトがMutableであったり、依存関係をどのように解決するのかなど検討すべき点は多そうです。</p>

<h2>Codemod tests from createClass to ES2015 classes #7321</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7321">https://github.com/facebook/react/pull/7321</a></li>
</ul>


<p>Codemodを使って、<code>React.createClass</code>で書かれたComponentをES2015 classesに変換するPRです。
Codemodのテストのようですが。</p>

<h2>Has Redux&rsquo;s Time Come and Gone #775</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/775">https://github.com/reactjs/redux/issues/775</a></li>
</ul>


<p>ReduxとRelayやGraphQLを組み合わせることについての議論です。
この辺りの組み合わせについて興味がある人は読んでみるといいと思います。</p>

<h2>[META] v3.0.0 (ReactRouter)</h2>

<ul>
<li><a href="https://github.com/reactjs/react-router/issues/3611">https://github.com/reactjs/react-router/issues/3611</a></li>
</ul>


<p>ReactRouter v3.0.0についてのIssueです。
alpha.1から結構経ってますがそろそろ出そうですね。</p>

<h2>You might not need React Router</h2>

<ul>
<li><a href="https://medium.com/@tarkus/you-might-not-need-react-router-38673620f3d#.3ech54krr">https://medium.com/@tarkus/you-might-not-need-react-router-38673620f3d#.3ech54krr</a></li>
</ul>


<p>ReactRouterを使わずに、ReactRouterが内部で使っている<code>history</code>を直接使えばいいのではというエントリーです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A brief note of ReactEurope2016 sessions]]></title>
    <link href="http://blog.koba04.com/post/2016/07/15/a-brief-note-of-reacteurope2016-sessions/"/>
    <updated>2016-07-15T14:56:46+09:00</updated>
    <id>http://blog.koba04.com/post/2016/07/15/a-brief-note-of-reacteurope2016-sessions</id>
    <content type="html"><![CDATA[<p>ReactEurope 2016に行ってきて、改めてメインのTalkの動画を一通り見たので、一言解説を。</p>

<p><a href="https://www.react-europe.org/">https://www.react-europe.org/</a></p>

<!-- more -->


<h2>Day 1</h2>

<p><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa">https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa</a></p>

<h2>Dan Abramov &ndash; The Redux Journey</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/uvAXVMwHJXU" frameborder="0" allowfullscreen></iframe>


<p>去年のReactEuropeでのTalkで一躍有名になり、Reactの中の人になったDan AbramovによるKeynoteです。
Reduxを発表してから何が起きたのか、何を大事にしているのかについて話しています。</p>

<p>改めてReduxのパターンを説明しつつ、ConstraintsとしてReduxが大事に考えていることについて話しています。
全体を通して、Reduxの考え方や現状がわかりやすく説明されています。</p>

<p>また、Talkの最後には新しいReduxのegghead.ioのビデオが公開されました。
これは、前回のものに比べて、より実践的な内容になっています(まだ見てないけど&hellip;)。</p>

<ul>
<li><a href="https://egghead.io/courses/building-react-applications-with-idiomatic-redux">https://egghead.io/courses/building-react-applications-with-idiomatic-redux</a></li>
</ul>


<h2>Eric Vicenti &ndash; Native Navigation for Every Platform</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/dOSwHABLvdM" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeでiOS、Android、Webの各Platform共通で使えるNavigationExperimentalについてのTalkです。</p>

<ul>
<li><a href="https://github.com/ericvicenti/navigation-rfc">https://github.com/ericvicenti/navigation-rfc</a></li>
</ul>


<p>DeeplinkやAndroidのバックボタンなど様々なActionを、ReduxのようにStateをReducerを使って宣言的に処理するアプローチです。
また、アプリの中の1機能としてNavigationを持った機能を埋め込む方法についても解説されています。</p>

<p>Navigator、NavigatorIOSと比べて、NavigationのComponentの外に状態が持てるのはよさそうです。
Reduxを使ったアプリケーションとも親和性が高そうです。</p>

<p>ReactNativeのNavigationについては下にまとまっています。</p>

<ul>
<li><a href="http://facebook.github.io/react-native/docs/navigator-comparison.html">http://facebook.github.io/react-native/docs/navigator-comparison.html</a></li>
</ul>


<h2>Lin Clark &ndash; A cartoon guide to performance in React</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-t8eOoRsJ7M" frameborder="0" allowfullscreen></iframe>


<p>Code CartoonsでおなじみのLin ClarkによるReactアプリケーションのパフォーマンスについてのTalkです。</p>

<p><a href="https://code-cartoons.com/">https://code-cartoons.com/</a></p>

<p>Reactをガッツリ使っている人は知っていることが多いと思いますが、Reactでのパフォーマンスのポイントをブラウザーのレンダリングの仕組みからReactでのレンダリングの流れまで通してわかりやすく説明しています。</p>

<h2>Krzysztof Magiera &ndash; React Native ❤ 60FPS &mdash; Improving React Native</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/qgSMjYWqBk4" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeでのアニメーションについてのTalkです。
Platform固有のNativeComponentを使ったAnimationと、LayoutAnimationとAnimated.jsを使った場合のそれぞれCons,Prosについて、パフォーマンスチューニングついてのポイントについて解説しています。</p>

<ul>
<li><a href="https://facebook.github.io/react-native/docs/animations.html">https://facebook.github.io/react-native/docs/animations.html</a></li>
<li><a href="http://facebook.github.io/react-native/docs/interactionmanager.html">http://facebook.github.io/react-native/docs/interactionmanager.html</a></li>
</ul>


<h2>Christopher Chedeau &ndash; Being Successful at Open Source</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/nRF0OVQL9Nw" frameborder="0" allowfullscreen></iframe>


<p>CSS in JSのプレゼンでもおなじみで、ReactやReactNative、css-layoutをやっているvjeuxによる、OSSを成功に導くために必要なことについてのTalkです。
テクニカルな内容ではなく、ReactをどのようにOSSとして成功させたのかということについて解説しています。
OSSのプロジェクトをやっていたり、参加したいと思っている人にとっては面白いTalkだと思います。
GitHubのIssueスタイルなプレゼンも面白いです。</p>

<p>Demo Driven Developmentという言葉も飛び出していました。</p>

<h2>Dan Schafer &ndash; GraphQL at Facebook</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/etax3aEe2dA" frameborder="0" allowfullscreen></iframe>


<p>GraphQLの基本的な概念の説明と、認証はどのように実装するのか、効果的なデータの取得方法などを実際のコードを出しながら解説したTalkです。
GraphQLには含まれていない部分で、データソースから効率的にデータを取得する方法については、Dataloaderを紹介しています。
Dataloaderを使うことで、N+1問題やオーバーフェッチングを回避しています。</p>

<ul>
<li><a href="https://github.com/facebook/dataloader">https://github.com/facebook/dataloader</a></li>
</ul>


<p>最後に、GraphQL概念として下の3つを紹介していました。</p>

<ul>
<li>Think Graphs, not Endpoints</li>
<li>Single Source of Truth</li>
<li>Thin API layer</li>
</ul>


<p>Talkの後の休憩でQ&amp;Aが盛り上がってたことが印象的でした。</p>

<h2>Jeff Morrison &ndash; A Deepdive Into Flow</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/VEaDsKyDxkY" frameborder="0" allowfullscreen></iframe>


<p>Flowの内部についてのTalkです。
FlowがどのようにJavaScriptのコードを解析しているのか、Parse(AST) 後の InferのフェーズでTypeHeapやOpenTを使ってどのように型情報を保持しているのかなど、かなりテクニカルな情報です。</p>

<p>ただ、内容自体は難しいというわけでもなく丁寧に説明されているので、面白いと思います。</p>

<p>Flowの使い方を知るのではなく、Flowがどのように型チェックを行っているのかを知りたい人にとっては面白いTalkだと思います。
OpenTを利用して複数ファイルを並列にチェックしてる話とか面白いなぁと思いました。
また、FlowGraphはDead Code Eliminationなど様々なことにも利用できるとしています。</p>

<p>個人的にはベストトークかなーという思うくらい面白かったです。Flowの内部に興味が湧きました。</p>

<h2>Mihail Diordiev &ndash; Debugging flux applications in production</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cbXLohVbzNI" frameborder="0" allowfullscreen></iframe>


<p>昨年のDan AbramovのReact Europeでのタイムトラベルのデモをさらに発展させたようなデモ中心のTalkです。</p>

<p>Redux DevTool Extensionを使ったActionとStateのexport、importやテストケースの作成の他、Remote Redux DevToolsを使い、本番でエラーや特定のActionが発生した時にActionとStateのhistoryを送信して手元で再現できるようにしています。</p>

<p>バグが起きるActionとStateをファイルに記録しておいて、記録したActionとStateを再生しながら修正するのはよさそうです。</p>

<p>また、ReduxだけでなくRxJSなどとも組み合わせて使ったり、ReactNativeやElectron環境でも使えるようです。</p>

<h2>Cheng Lou &ndash; On the Spectrum of Abstraction</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/mVVNJKv9esE" frameborder="0" allowfullscreen></iframe>


<p>ReactMotionやAnimationの話をするのかと思っていたら、ライブラリーやフレームワークなどの抽象化についてのTalkでした。</p>

<p>抽象化によるコスト、ライブラリーとフレームワークの違い、抽象化のレイヤーの違いによってどんな影響があるのか、Reactはなぜ今のようなアーキテクチャになっているのかといったことについて熱く話されています。</p>

<p>Grunt vs Gulp、React vs Templates、Immutability vs Mutability、CSS in JS vs Traditional CSSなどのわかりやすい例を用いた説明もあって面白いです。</p>

<ul>
<li>Don&rsquo;t Cover Every Use-case</li>
<li>Not DRY is Fine</li>
<li>Don&rsquo;t Be Swayed by Elegance</li>
<li>When in Doubt, Use Examples</li>
</ul>


<h2>Bertrand Karerangabo &amp; Evan Schultz &ndash; React Redux Analytics</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/MBTgiMLujek" frameborder="0" allowfullscreen></iframe>


<p>Lean Analyticsを回すにあたり、Reduxでどのように計測するのかというTalkです。
後半はSegment.ioと組み合わせて使うためのredux-segmentというライブラリーの紹介やデモです。</p>

<hr />

<h2>Day 2</h2>

<p><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof">https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof</a></p>

<h2>Jonas Gebhardt &ndash; Evolving the Visual Programming Environment with React</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/WjJdaDXN5Vs" frameborder="0" allowfullscreen></iframe>


<p>ブラウザー上でのビジュアルプログラミングについてのデモと解説によるTalkです。
React、Flow、Redux、Immutable.js、RxJSなどを使い、データの流れをコードとビジュアルプログラミングをうまく連携させていて、とても面白いです。Flowの型情報を使って接続できる要素を可視化しているところとか。</p>

<p>ビジュアルプログラミングもただのデータの入力と出力であることがよくわかります。</p>

<h2>Bonnie Eisenman &ndash; React Native Retrospective</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-vl57brMWNg" frameborder="0" allowfullscreen></iframe>


<p>オライリーから出ている「Learning ReactNative」の作者の人のTalkです。</p>

<ul>
<li><a href="http://shop.oreilly.com/product/0636920041511.do">http://shop.oreilly.com/product/0636920041511.do</a></li>
</ul>


<p>ReactNativeが発表されてから、今までの流れを時系列にわかりやすく説明しています。
具体的な使い方などではなくて、モバイルアプリ開発の状況やReactNativeの状況など、どのようにReactNativeが捉えられているのかがよくわかります。</p>

<p>ReactNativeに手を出してみようかと思っている人にとっては参考になると思います。</p>

<h2>Max Stoiber &amp; Nik Graf &ndash; The Evolution of React UI Development</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/0IkWuXeKPV0" frameborder="0" allowfullscreen></iframe>


<p>Hot Reloadingを使って、Componentをインタラクティブに開発していくことについてのTalkです。
紹介していたCarte Blancheというライブラリーでは、PropTypes or FlowtypeからPropデータをランダムに生成してComponentの表示を確認できるようになっています。</p>

<ul>
<li><a href="https://github.com/carteb/carte-blanche">https://github.com/carteb/carte-blanche</a></li>
</ul>


<p>また、データはファイルとして書き出されて、それを編集することでHot Reloadingで反映されるようになっています。
今は、React用でwebpackに依存していますが、様々な環境やライブラリーに対応する予定があるそうです。</p>

<p>react-storybookと似ていますが、こちらはデータをランダムに生成してくれる点などが違う点なのかなと思います。
どちらも使っていないので間違っているかもですが&hellip;。</p>

<ul>
<li><a href="https://github.com/kadirahq/react-storybook">https://github.com/kadirahq/react-storybook</a></li>
</ul>


<h2>Andrew Clark &ndash; Recomposing your React application</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/zD_judE-bXk" frameborder="0" allowfullscreen></iframe>


<p>ReactEuropeの中で数少ない、Reactに関するTalkです。
High Order Componentsとは何か、どんなユースケースがあるのか、パフォーマンスについてはどうなのかについて話されています。</p>

<p><code>
// High Order Components
(...args) =&gt; Component =&gt; EnhancedComponent
</code></p>

<p>Reduxなどを使う中で、HOCを使っている人も多いと思いますが、実際どうなっているのかやどんなことができるのかを知りたい人にとっては面白いTalkです。
また、HOCを多用した場合にComponentが深くネストした構造になり、パフォーマンスに影響を与えることについても、<code>compose</code>を使った方法やStateless Functional Componentsの場合にはその場でReactElementに展開するようにするといった方法を紹介しています。</p>

<p>実際のHigh Order Componentsの例については、本人が作っている<code>recompose</code>をみるといいと思います。</p>

<p>いかにPresentational Componentにロジックを入れないようにするかのヒントとなるTalkだと思います。</p>

<ul>
<li><a href="https://github.com/acdlite/recompose">https://github.com/acdlite/recompose</a></li>
</ul>


<h2>Tadeu Zagallo &ndash; JavaScript, React Native and Performance</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/1oL_OJ3UePU" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeが起動時にJavaScriptの部分で内部でどのように高速化しているのかという話です。</p>

<p>初期化をマルチスレッド化やモジュール初期化の遅延の他、プラットフォーム固有のコードのDead Code Eliminationなど。</p>

<p>またiOSではJITが使えず、AndroidではJITが使えたけど結果的に遅いという中で、ProfileをとってParse結果をバイトコードでキャッシュして改善していく流れが解説されています。
この最適化は今のところAndroidだけでまた有効化されているわけではないようです。</p>

<p>ReactNativeの内部的な話とか、JavaScriptの最適化に興味がある人にとっては面白いTalkだと思います。</p>

<h2>Jafar Husain &ndash; Falcor: One Model Everywhere</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/nxQweyTUj5s" frameborder="0" allowfullscreen></iframe>


<p>NetflixのTechnical LeadであるJafar HusainさんによるFalcorについてのTalkです。
話すペースは速いですが、さすが話し慣れているだけあってわかりやすいです。</p>

<p><a href="https://twitter.com/jhusain">https://twitter.com/jhusain</a></p>

<p>なぜNetflixがFalcorを作ったのか、Falcorの基本的な説明から、
ReactEuropeなのでGraphQLと比較しつつ、Falcorの方がシンプルで小さく簡単に始められることを強調しています。
GraphQLのように型が必要な場合は、JSONSchemaやTypeScriptと組み合わせることも可能だと説明しています。
また、GraphQLのQueriesのアプローチとFalcorのPathsの違いについても解説しています。</p>

<p>ベタに書いたJSONデータからFalcorを使うように変えていく説明もわかりやすいです。</p>

<p>Falcorの基本を知るにはとてもいいTalkです。JSON Graphをどのように実現しているのかなど。</p>

<h2>Brent Vatne &ndash; Building li.st for Android with Exponent and React Native</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cI9bDvDEsYE" frameborder="0" allowfullscreen></iframe>


<p>ExponentでReactNativeを使ってAndroidのアプリを作った時の話です。
Nativeのカスタムビューを作成することなくできる、かなり実践的な快適なUIを実現する方法が解説されています。</p>

<ul>
<li>UIをブロックしないスムーズなListViewを、IncrementalなRenderingにより実現した話</li>
<li>アニメーションを処理の前後で行うのではなく、同時にバックグラウンドの処理を実行することにより快適なアニメーションの実現する方法</li>
<li><code>ex-navigation</code>を使ったNavigationについて</li>
<li>ユーザーインプットについて。キーボードイベントをどのようにハンドリングするか</li>
<li>タッチやジェスチャーをどのようにハンドリングするのか</li>
</ul>


<p>ReactNativeのAndroidでの事例として貴重なTalkだと感じました。</p>

<ul>
<li><a href="https://github.com/exponentjs/">https://github.com/exponentjs/</a></li>
</ul>


<h2>Laney Kuenzel &amp; Lee Byron &ndash; GraphQL Future</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ViXL0YQnioU" frameborder="0" allowfullscreen></iframe>


<p>GraphQL TeamのメンバーによるGraphQLがオープンソースになってから起きたことと、GraphQLのこれからについてのTalkです。Keynoteっ
ぽい感じもあり、GraphQL使ってない人でも面白いTalkです。</p>

<blockquote><p>We only open source what we use</p>

<p>We release what is generally useful</p></blockquote>

<p>というFacebookの考えの中で、Facebook内で試していることをあくまでExperimentalとして紹介されています。</p>

<ul>
<li>少しでも早く最初のコンテンツを返すための工夫としての<code>@defer</code>や<code>@stream</code>ディレクティブ</li>
<li>リアルタイムアップデートを行うための<code>@live</code>ディレクティブ（プロダクションではまだ使われていない）</li>
<li>現時点ではReactiveなバックエンドを持っていないFacebookでは<code>@live</code>ディレクティブの導入も難しく、さらに複雑な依存関係の中で全ての変更を追従することが難しく、そのような状況の中でイベントベースのSubscriptionをGraphQLで実現するGraphQL Subscriptionsについて

<ul>
<li>Facebookでは、GraphQL SubscriptionsをMQTTを使って実現しているようです。</li>
<li><code>subscription</code>のキーワード自体はgraphql-jsでもサポートされているようです。pubsubの処理は自身で実装する必要がありますが。このあたりはもっと一般化された際にはオープンソースになるかも？</li>
<li>Facebooで実際に使われている規模としては、<code>150B daily subscribes</code>、<code>35B daily payload deliveries</code>、<code>〜30 subscriptions in schema</code>だそうです。</li>
<li>GraphQL Subscriptionsによって、「xxx is writing a comment&hellip;」の表示や、live video上でのlive reactionの機能など多くのことが可能になったそうです。</li>
</ul>
</li>
</ul>


<h2>Martijn Walraven &ndash; Building native mobile apps with GraphQL</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/z5rz3saDPJ8" frameborder="0" allowfullscreen></iframe>


<p>Facebookの外ではまだまだGraphQL導入の敷居が高く、その中でiOSやAndroidアプリからどのようにGraphQLを使えばいいのかというTalkです。
GraphQL Schemaを使ってクライアントでどのように型付けをするのか、RelayのようにGraphQLから取得したデータをどのように一元管理するかという内容です。
ちょっと消化不良感がありました。</p>

<ul>
<li><a href="https://medium.com/apollo-stack">https://medium.com/apollo-stack</a></li>
</ul>


<h2>Question and Answers with core team members</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/5pMDd1t2thc" frameborder="0" allowfullscreen></iframe>


<p>Sessionに登壇していたFacebookのエンジニアによるQ&amp;Aです。
ざっくりまとめると前半がGraphQLについて、後半がアーキテクチャについての話が多い印象です。</p>

<p>GraphQLについては、どのようにSQLに変換すればいいか、本編のTalkにあったGraphQL Subscriptionsについて、GraphQL Fragmentをどうやってテストするのか、バージョニングについてなどの質問がありました。</p>

<p>Reactについては、DevTool APIがそのうち公開されるという話がありました。内部的にはReactPerfで使われているものです。
あとはHigh Order Componentsについての質問もありました。
このあたりは「Andrew Clark &ndash; Recomposing your React application」や下記のブログで詳しく解説されています。</p>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html">https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html</a></li>
</ul>


<p>後半はImmutable.jsについての質問や、1からFacebookを作り直すならどういうアーキテクチャで作るかという質問から、アーキテクチャの話になっています。
JavaScriptにImmutableなデータ型があれば何が変わるのかと言ったことや、Immutabilityとパフォーマンスについてなど。
JavaScriptではMutablityがデフォルトなので、Immutablityが複雑なものとして捉えられますがそれはコンテキストによるもので、デフォルトがImmutableで例外としてMutableを扱う言語もあり、Immutabilityの方がローレベルでシンプルなだという話など。</p>

<p>途中で紹介されるImmutable App Architectureについては別でブログ書いたのでそちらを。</p>

<ul>
<li><a href="http://blog.koba04.com/post/2016/06/21/immutable-app-architecture/">http://blog.koba04.com/post/2016/06/21/immutable-app-architecture/</a></li>
</ul>


<p>その他には、TypeScriptではなくFlowを採用するメリットについての質問やTypeScriptとFlowを組み合わせることについてなど、Flowについての質問もありました。</p>

<p>全体的には、Lee Byron劇場な感じですが、とても面白いQ&amp;Aになっています。</p>

<hr />

<p>そういえば、ReactEurope行ったことについてのエントリー書いてなかったので別途書こう&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.8]]></title>
    <link href="http://blog.koba04.com/post/2016/06/23/react-dot-js-links-vol-dot-8/"/>
    <updated>2016-06-23T13:33:36+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/23/react-dot-js-links-vol-dot-8</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.2.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.2.0">https://github.com/facebook/react/releases/tag/v15.2.0</a></li>
</ul>


<p>15.2.0がリリースされました。</p>

<p>プロダクションビルドでエラーコードが付加されるようになりエラーの調査がしやすくなったことや、PropTypesやkeyのwarning時のスタックトレースがComponentのツリーで表示されるようになりました。
開発をサポートするための機能です。</p>

<p>その他はちょっとしたバグ修正などが中心です。</p>

<h2>Core Notes June 23</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-23.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-23.md</a></li>
</ul>


<p>恒例のCore TeamのMeeting Noteです。</p>

<p>Facebook内での<code>React.createClass</code>からClassによるComponent定義への移行作業は引き続き行われているようです。</p>

<h2>Core Notes June 30</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-30.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-30.md</a></li>
</ul>


<p>こちらもMeeting Noteです。
新しいReconcilerが徐々に動き始めているようです。
また、<code>React.createClass</code>からClassによるComponentによる移行についても進んでいるようです。
下のcodemodを使って、ClassによるComponent定義&amp;property initializer&amp;Flowに変換を行っているようです。</p>

<ul>
<li><a href="https://github.com/reactjs/react-codemod/pull/54">https://github.com/reactjs/react-codemod/pull/54</a></li>
</ul>


<p>React Teamとしては、Class + property initializer + Flowの組み合わせについては、ドッグフーディング中なので現時点では推奨しているわけでないという立場です。</p>

<p>また、Facebook内部ではPureRenderMixinがたくさん使われていて、それを置き換えるためのものとして<code>React.PureComponent</code>が考えられているようです。</p>

<p><code>React.PureComponent</code>に関しては、最初のProposalでは内部のStateless Functional Componentsにも最適化が適用される予定でしたが、混乱や問題点があることから、新しく出されたPRではただのClass版のPureRenderMixinとなっています。そしてmergeされました。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/7195">https://github.com/facebook/react/pull/7195</a></li>
<li><a href="https://github.com/facebook/react/issues/6914">https://github.com/facebook/react/issues/6914</a></li>
</ul>


<p>また、<code>React.createClass</code>をAddonにして、さらに<code>Perf</code>と<code>TestUtils</code>以外のAddonsについては、React Team外にownershipを移して管理するも考えているようです。</p>

<h2>Resolve refs in the order of the children #7101</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7101">https://github.com/facebook/react/pull/7101</a></li>
</ul>


<p>更新時の新しくマウントされるReactElementに対するRefの解決する順番を変更するPRです。
詳しくはPRにある画像を見るとわかると思います。</p>

<h2>Added jsx-self babel transform plugin #3540</h2>

<ul>
<li><a href="https://github.com/babel/babel/pull/3540">https://github.com/babel/babel/pull/3540</a></li>
</ul>


<p>warning目的でReactElementに<code>__self</code>のPropを追加するBabelのtransfomerです。
developmentの時だけ有効にすることが推奨されています。</p>

<h2>Spec proposal: extending the language to allow spreading children #57</h2>

<ul>
<li><a href="https://github.com/facebook/jsx/issues/57">https://github.com/facebook/jsx/issues/57</a></li>
</ul>


<p>JSXでのchildrenの仕様に対するProposalです。
JSXChildを拡張して<code>{...children}</code>を許容するようにするものです。</p>

<h2>RFC: Flat bundle using Rollup</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7178">https://github.com/facebook/react/pull/7178</a></li>
</ul>


<p>現在CommonJSベースで書かれているReactのコードをRollupでバンドルしてTree ShakingやDead Code Eliminationによりファイルサイズを削減するPRです。React Teamのインターンの人ですね。</p>

<p>まずはトップレベルでない<code>require</code>を全てトップレベルにしてES Modulesに変換できるようにして、BabelでCommonJSをES Modulesに変換してRollupでバンドルするという方法を採っているようです。
(RollupのCommonJSプラグインを使う方法よりサイズが小さくなるらしいです)</p>

<h2>Flow v0.28.0</h2>

<ul>
<li><a href="https://github.com/facebook/flow/releases/tag/v0.28.0">https://github.com/facebook/flow/releases/tag/v0.28.0</a></li>
</ul>


<p>Flowの0.28.0がリリースされています。
変更内容については、下記のブログでも書かれています。</p>

<ul>
<li><a href="https://flowtype.org/blog/2016/07/01/New-Unions-Intersections.html">https://flowtype.org/blog/2016/07/01/New-Unions-Intersections.html</a></li>
</ul>


<h2>ReactNative v0.29.0</h2>

<ul>
<li><a href="https://github.com/facebook/react-native/releases/tag/v0.29.0">https://github.com/facebook/react-native/releases/tag/v0.29.0</a></li>
</ul>


<p>ReactNativeの0.29.0がリリースされています。</p>

<h2>Don&rsquo;t Use Bind When Passing Props</h2>

<ul>
<li><a href="https://daveceddia.com/avoid-bind-when-passing-props/">https://daveceddia.com/avoid-bind-when-passing-props/</a></li>
</ul>


<p>PureComponentなんかとも関連しますが、なぜrenderメソッドの中でFunction.prototype.bindしたりArrow Function使うのがダメなのかについて書いたエントリーです。
過去にもあったような気もしますが。
上記を使って書かれているサンプルも多いので、使うときは何が起きているのか意識して使った方がいいと思います。
（Function.prototype.bindやArrow Functionsを使うと当たり前ですが新しい関数が都度生成されるので）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.7]]></title>
    <link href="http://blog.koba04.com/post/2016/06/16/reactjs-links-vol7/"/>
    <updated>2016-06-16T13:33:36+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/16/reactjs-links-vol7</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Team meeting notes</h2>

<p>恒例のCore Teamのmeeting noteです。</p>

<h3>May 26</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-26.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-26.md</a></li>
</ul>


<p>主にES classesによるComponent定義で<code>React.createClass</code>による定義を置き換えることについて書かれています。
ドキュメントやMixinをどうするか、Class Property Initializerについてのスタンスなど。</p>

<p>その他では、Incremental Reconcilerが入った時にTestUtilsのrenderIntoDocumentが同期的なことについてどうするかについても触れられています。</p>

<h3>June 2</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-02.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-02.md</a></li>
</ul>


<p>PureComponentによるStateless Functional Componentsの最適化について多く触れられています。
また、Facebookのコードベースを<code>React.createClass</code>からES classesに移行する計画があるようです。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/6914">https://github.com/facebook/react/pull/6914</a></li>
</ul>


<h3>June 9</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-09.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-09.md</a></li>
</ul>


<p>主に新しいReconcilerの状況についてや、問題となる点について話されています。</p>

<p>あとは、Facebook内の<code>React.createClass</code>からES classesに移行する方法についてが引き続き触れられています。</p>

<p>新しいトピックでいうと、大きなfeatureについてはTC39のようにchampionを立てて進めていくプロセスを採用するかどうかが検討されているようです。</p>

<h2>RFC: Make Refs Opt-in #6974</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6974">https://github.com/facebook/react/issues/6974</a></li>
</ul>


<p>Refsをopt-inの機能にするという提案(discussion)です。</p>

<h2>React ContextTypes, PropTypes when using an already static typed language like TypeScript #6525</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6525">https://github.com/facebook/react/issues/6525</a></li>
</ul>


<p>PropTypesのFlowやTypeScriptで置き換えた場合でもContextTypesを使う必要があることについてのIssue(?)です。</p>

<h2>New marketing copy on homepage #7012</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7012">https://github.com/facebook/react/pull/7012</a></li>
</ul>


<p>Reactのトップページに、特徴として書かれていた「JUST THE UI」、「VIRTUAL DOM」、「DATA FLOW」が「Declarative」、「Component-Based」、「Learn Once, Write Anywhere」に更新されました。</p>

<p>この変更は、Reactは「JUST THE UI」でありMVCのVだという記述が、Reactを使う時にReduxなどのFlux系のライブラリーが必ず必要であるかのように捉えられてしまっている現状なんかも踏まえたもののようです。</p>

<h2>ReactEurope</h2>

<p>ReactEuropeの動画が公開されています。</p>

<ul>
<li><a href="https://www.react-europe.org/">https://www.react-europe.org/</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa">https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa</a> (Day1)</li>
<li><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof">https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof</a> (Day2)</li>
</ul>


<p>別途、まとめを書ければ書くかも。</p>

<h2>Experimenting with React Native at Khan Academy</h2>

<ul>
<li><a href="https://docs.google.com/document/d/1PU51njrUweehKFgSu69C7OAEdyp6rHmsvQ7KIcLaHqw/edit#">https://docs.google.com/document/d/1PU51njrUweehKFgSu69C7OAEdyp6rHmsvQ7KIcLaHqw/edit#</a></li>
</ul>


<p>Khan AcademyでのReactNativeについてのレポートです。実際に取り入れようとした時に何が問題になったかなど触れられていて参考になります。</p>

<h2>Q&amp;A with Ben Alpert</h2>

<ul>
<li><a href="https://github.com/reactiflux/q-and-a/blob/master/ben-alpert_react-core.md">https://github.com/reactiflux/q-and-a/blob/master/ben-alpert_react-core.md</a></li>
</ul>


<p>Reactのcore memberであるBen Alpertに対するQ&amp;Aです。
New renconcilerについてのトピックが多くて興味深いです。</p>

<h2>State Streams and React</h2>

<ul>
<li><a href="https://medium.com/@markusctz/state-streams-and-react-7921e3c376a4#.39bp3z2fa">https://medium.com/@markusctz/state-streams-and-react-7921e3c376a4#.39bp3z2fa</a></li>
</ul>


<p>RxJSでRedux風なアーキテクチャを構築し、Reactと組み合わせて作るというエントリーです。わかりやすいです。
後半は作者が実際に作った<code>udeo</code>というライブラリーについての説明です。</p>

<ul>
<li><a href="https://github.com/mcoetzee/udeo">https://github.com/mcoetzee/udeo</a></li>
</ul>


<h2>react-enroute</h2>

<ul>
<li><a href="https://github.com/tj/react-enroute">https://github.com/tj/react-enroute</a></li>
</ul>


<p>TJが開発しているreact-router風なlightweightなルーティングライブラリーです。
ルーティングにはenrouteというライブラリーを使っていて、react-enrouteはReactとの繋ぎこみだけをやっているような感じです。</p>

<ul>
<li><a href="https://github.com/lapwinglabs/enroute">https://github.com/lapwinglabs/enroute</a></li>
</ul>


<h2>3 Reasons why I stopped using React.setState</h2>

<ul>
<li><a href="https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.umnvins0y">https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.umnvins0y</a></li>
</ul>


<p>ReactのsetStateのハマリどころなどについて解説したエントリーです。
MobXの作者なので、後半はMobX最高という感じになっています。</p>

<h2>Feature Request: Allow reducers to consult global state #1768</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1768">https://github.com/reactjs/redux/pull/1768</a></li>
</ul>


<p>Reduxのreducerで各ReducerでグローバルなStateも受け取れるようにしようというfeature requestです。
mergeされそうな雰囲気?</p>
]]></content>
  </entry>
  
</feed>
