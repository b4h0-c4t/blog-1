<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react.js | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/react-dot-js/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2016-07-15T15:01:28+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A brief note of ReactEurope2016 sessions]]></title>
    <link href="http://blog.koba04.com/post/2016/07/15/a-brief-note-of-reacteurope2016-sessions/"/>
    <updated>2016-07-15T14:56:46+09:00</updated>
    <id>http://blog.koba04.com/post/2016/07/15/a-brief-note-of-reacteurope2016-sessions</id>
    <content type="html"><![CDATA[<p>ReactEurope 2016に行ってきて、改めてメインのTalkの動画を一通り見たので、一言解説を。</p>

<p><a href="https://www.react-europe.org/">https://www.react-europe.org/</a></p>

<!-- more -->


<h2>Day 1</h2>

<p><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa">https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa</a></p>

<h2>Dan Abramov &ndash; The Redux Journey</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/uvAXVMwHJXU" frameborder="0" allowfullscreen></iframe>


<p>去年のReactEuropeでのTalkで一躍有名になり、Reactの中の人になったDan AbramovによるKeynoteです。
Reduxを発表してから何が起きたのか、何を大事にしているのかについて話しています。</p>

<p>改めてReduxのパターンを説明しつつ、ConstraintsとしてReduxが大事に考えていることについて話しています。
全体を通して、Reduxの考え方や現状がわかりやすく説明されています。</p>

<p>また、Talkの最後には新しいReduxのegghead.ioのビデオが公開されました。
これは、前回のものに比べて、より実践的な内容になっています(まだ見てないけど&hellip;)。</p>

<ul>
<li><a href="https://egghead.io/courses/building-react-applications-with-idiomatic-redux">https://egghead.io/courses/building-react-applications-with-idiomatic-redux</a></li>
</ul>


<h2>Eric Vicenti &ndash; Native Navigation for Every Platform</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/dOSwHABLvdM" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeでiOS、Android、Webの各Platform共通で使えるNavigationExperimentalについてのTalkです。</p>

<ul>
<li><a href="https://github.com/ericvicenti/navigation-rfc">https://github.com/ericvicenti/navigation-rfc</a></li>
</ul>


<p>DeeplinkやAndroidのバックボタンなど様々なActionを、ReduxのようにStateをReducerを使って宣言的に処理するアプローチです。
また、アプリの中の1機能としてNavigationを持った機能を埋め込む方法についても解説されています。</p>

<p>Navigator、NavigatorIOSと比べて、NavigationのComponentの外に状態が持てるのはよさそうです。
Reduxを使ったアプリケーションとも親和性が高そうです。</p>

<p>ReactNativeのNavigationについては下にまとまっています。</p>

<ul>
<li><a href="http://facebook.github.io/react-native/docs/navigator-comparison.html">http://facebook.github.io/react-native/docs/navigator-comparison.html</a></li>
</ul>


<h2>Lin Clark &ndash; A cartoon guide to performance in React</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-t8eOoRsJ7M" frameborder="0" allowfullscreen></iframe>


<p>Code CartoonsでおなじみのLin ClarkによるReactアプリケーションのパフォーマンスについてのTalkです。</p>

<p><a href="https://code-cartoons.com/">https://code-cartoons.com/</a></p>

<p>Reactをガッツリ使っている人は知っていることが多いと思いますが、Reactでのパフォーマンスのポイントをブラウザーのレンダリングの仕組みからReactでのレンダリングの流れまで通してわかりやすく説明しています。</p>

<h2>Krzysztof Magiera &ndash; React Native ❤ 60FPS &mdash; Improving React Native</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/qgSMjYWqBk4" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeでのアニメーションについてのTalkです。
Platform固有のNativeComponentを使ったAnimationと、LayoutAnimationとAnimated.jsを使った場合のそれぞれCons,Prosについて、パフォーマンスチューニングついてのポイントについて解説しています。</p>

<ul>
<li><a href="https://facebook.github.io/react-native/docs/animations.html">https://facebook.github.io/react-native/docs/animations.html</a></li>
<li><a href="http://facebook.github.io/react-native/docs/interactionmanager.html">http://facebook.github.io/react-native/docs/interactionmanager.html</a></li>
</ul>


<h2>Christopher Chedeau &ndash; Being Successful at Open Source</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/nRF0OVQL9Nw" frameborder="0" allowfullscreen></iframe>


<p>CSS in JSのプレゼンでもおなじみで、ReactやReactNative、css-layoutをやっているvjeuxによる、OSSを成功に導くために必要なことについてのTalkです。
テクニカルな内容ではなく、ReactをどのようにOSSとして成功させたのかということについて解説しています。
OSSのプロジェクトをやっていたり、参加したいと思っている人にとっては面白いTalkだと思います。
GitHubのIssueスタイルなプレゼンも面白いです。</p>

<p>Demo Driven Developmentという言葉も飛び出していました。</p>

<h2>Dan Schafer &ndash; GraphQL at Facebook</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/etax3aEe2dA" frameborder="0" allowfullscreen></iframe>


<p>GraphQLの基本的な概念の説明と、認証はどのように実装するのか、効果的なデータの取得方法などを実際のコードを出しながら解説したTalkです。
GraphQLには含まれていない部分で、データソースから効率的にデータを取得する方法については、Dataloaderを紹介しています。
Dataloaderを使うことで、N+1問題やオーバーフェッチングを回避しています。</p>

<ul>
<li><a href="https://github.com/facebook/dataloader">https://github.com/facebook/dataloader</a></li>
</ul>


<p>最後に、GraphQL概念として下の3つを紹介していました。</p>

<ul>
<li>Think Graphs, not Endpoints</li>
<li>Single Source of Truth</li>
<li>Thin API layer</li>
</ul>


<p>Talkの後の休憩でQ&amp;Aが盛り上がってたことが印象的でした。</p>

<h2>Jeff Morrison &ndash; A Deepdive Into Flow</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/VEaDsKyDxkY" frameborder="0" allowfullscreen></iframe>


<p>Flowの内部についてのTalkです。
FlowがどのようにJavaScriptのコードを解析しているのか、Parse(AST) 後の InferのフェーズでTypeHeapやOpenTを使ってどのように型情報を保持しているのかなど、かなりテクニカルな情報です。</p>

<p>ただ、内容自体は難しいというわけでもなく丁寧に説明されているので、面白いと思います。</p>

<p>Flowの使い方を知るのではなく、Flowがどのように型チェックを行っているのかを知りたい人にとっては面白いTalkだと思います。
OpenTを利用して複数ファイルを並列にチェックしてる話とか面白いなぁと思いました。
また、FlowGraphはDead Code Eliminationなど様々なことにも利用できるとしています。</p>

<p>個人的にはベストトークかなーという思うくらい面白かったです。Flowの内部に興味が湧きました。</p>

<h2>Mihail Diordiev &ndash; Debugging flux applications in production</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cbXLohVbzNI" frameborder="0" allowfullscreen></iframe>


<p>昨年のDan AbramovのReact Europeでのタイムトラベルのデモをさらに発展させたようなデモ中心のTalkです。</p>

<p>Redux DevTool Extensionを使ったActionとStateのexport、importやテストケースの作成の他、Remote Redux DevToolsを使い、本番でエラーや特定のActionが発生した時にActionとStateのhistoryを送信して手元で再現できるようにしています。</p>

<p>バグが起きるActionとStateをファイルに記録しておいて、記録したActionとStateを再生しながら修正するのはよさそうです。</p>

<p>また、ReduxだけでなくRxJSなどとも組み合わせて使ったり、ReactNativeやElectron環境でも使えるようです。</p>

<h2>Cheng Lou &ndash; On the Spectrum of Abstraction</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/mVVNJKv9esE" frameborder="0" allowfullscreen></iframe>


<p>ReactMotionやAnimationの話をするのかと思っていたら、ライブラリーやフレームワークなどの抽象化についてのTalkでした。</p>

<p>抽象化によるコスト、ライブラリーとフレームワークの違い、抽象化のレイヤーの違いによってどんな影響があるのか、Reactはなぜ今のようなアーキテクチャになっているのかといったことについて熱く話されています。</p>

<p>Grunt vs Gulp、React vs Templates、Immutability vs Mutability、CSS in JS vs Traditional CSSなどのわかりやすい例を用いた説明もあって面白いです。</p>

<ul>
<li>Don&rsquo;t Cover Every Use-case</li>
<li>Not DRY is Fine</li>
<li>Don&rsquo;t Be Swayed by Elegance</li>
<li>When in Doubt, Use Examples</li>
</ul>


<h2>Bertrand Karerangabo &amp; Evan Schultz &ndash; React Redux Analytics</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/MBTgiMLujek" frameborder="0" allowfullscreen></iframe>


<p>Lean Analyticsを回すにあたり、Reduxでどのように計測するのかというTalkです。
後半はSegment.ioと組み合わせて使うためのredux-segmentというライブラリーの紹介やデモです。</p>

<hr />

<h2>Day 2</h2>

<p><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof">https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof</a></p>

<h2>Jonas Gebhardt &ndash; Evolving the Visual Programming Environment with React</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/WjJdaDXN5Vs" frameborder="0" allowfullscreen></iframe>


<p>ブラウザー上でのビジュアルプログラミングについてのデモと解説によるTalkです。
React、Flow、Redux、Immutable.js、RxJSなどを使い、データの流れをコードとビジュアルプログラミングをうまく連携させていて、とても面白いです。Flowの型情報を使って接続できる要素を可視化しているところとか。</p>

<p>ビジュアルプログラミングもただのデータの入力と出力であることがよくわかります。</p>

<h2>Bonnie Eisenman &ndash; React Native Retrospective</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-vl57brMWNg" frameborder="0" allowfullscreen></iframe>


<p>オライリーから出ている「Learning ReactNative」の作者の人のTalkです。</p>

<ul>
<li><a href="http://shop.oreilly.com/product/0636920041511.do">http://shop.oreilly.com/product/0636920041511.do</a></li>
</ul>


<p>ReactNativeが発表されてから、今までの流れを時系列にわかりやすく説明しています。
具体的な使い方などではなくて、モバイルアプリ開発の状況やReactNativeの状況など、どのようにReactNativeが捉えられているのかがよくわかります。</p>

<p>ReactNativeに手を出してみようかと思っている人にとっては参考になると思います。</p>

<h2>Max Stoiber &amp; Nik Graf &ndash; The Evolution of React UI Development</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/0IkWuXeKPV0" frameborder="0" allowfullscreen></iframe>


<p>Hot Reloadingを使って、Componentをインタラクティブに開発していくことについてのTalkです。
紹介していたCarte Blancheというライブラリーでは、PropTypes or FlowtypeからPropデータをランダムに生成してComponentの表示を確認できるようになっています。</p>

<ul>
<li><a href="https://github.com/carteb/carte-blanche">https://github.com/carteb/carte-blanche</a></li>
</ul>


<p>また、データはファイルとして書き出されて、それを編集することでHot Reloadingで反映されるようになっています。
今は、React用でwebpackに依存していますが、様々な環境やライブラリーに対応する予定があるそうです。</p>

<p>react-storybookと似ていますが、こちらはデータをランダムに生成してくれる点などが違う点なのかなと思います。
どちらも使っていないので間違っているかもですが&hellip;。</p>

<ul>
<li><a href="https://github.com/kadirahq/react-storybook">https://github.com/kadirahq/react-storybook</a></li>
</ul>


<h2>Andrew Clark &ndash; Recomposing your React application</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/zD_judE-bXk" frameborder="0" allowfullscreen></iframe>


<p>ReactEuropeの中で数少ない、Reactに関するTalkです。
High Order Componentsとは何か、どんなユースケースがあるのか、パフォーマンスについてはどうなのかについて話されています。</p>

<p><code>
// High Order Components
(...args) =&gt; Component =&gt; EnhancedComponent
</code></p>

<p>Reduxなどを使う中で、HOCを使っている人も多いと思いますが、実際どうなっているのかやどんなことができるのかを知りたい人にとっては面白いTalkです。
また、HOCを多用した場合にComponentが深くネストした構造になり、パフォーマンスに影響を与えることについても、<code>compose</code>を使った方法やStateless Functional Componentsの場合にはその場でReactElementに展開するようにするといった方法を紹介しています。</p>

<p>実際のHigh Order Componentsの例については、本人が作っている<code>recompose</code>をみるといいと思います。</p>

<p>いかにPresentational Componentにロジックを入れないようにするかのヒントとなるTalkだと思います。</p>

<ul>
<li><a href="https://github.com/acdlite/recompose">https://github.com/acdlite/recompose</a></li>
</ul>


<h2>Tadeu Zagallo &ndash; JavaScript, React Native and Performance</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/1oL_OJ3UePU" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeが起動時にJavaScriptの部分で内部でどのように高速化しているのかという話です。</p>

<p>初期化をマルチスレッド化やモジュール初期化の遅延の他、プラットフォーム固有のコードのDead Code Eliminationなど。</p>

<p>またiOSではJITが使えず、AndroidではJITが使えたけど結果的に遅いという中で、ProfileをとってParse結果をバイトコードでキャッシュして改善していく流れが解説されています。
この最適化は今のところAndroidだけでまた有効化されているわけではないようです。</p>

<p>ReactNativeの内部的な話とか、JavaScriptの最適化に興味がある人にとっては面白いTalkだと思います。</p>

<h2>Jafar Husain &ndash; Falcor: One Model Everywhere</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/nxQweyTUj5s" frameborder="0" allowfullscreen></iframe>


<p>NetflixのTechnical LeadであるJafar HusainさんによるFalcorについてのTalkです。
話すペースは速いですが、さすが話し慣れているだけあってわかりやすいです。</p>

<p><a href="https://twitter.com/jhusain">https://twitter.com/jhusain</a></p>

<p>なぜNetflixがFalcorを作ったのか、Falcorの基本的な説明から、
ReactEuropeなのでGraphQLと比較しつつ、Falcorの方がシンプルで小さく簡単に始められることを強調しています。
GraphQLのように型が必要な場合は、JSONSchemaやTypeScriptと組み合わせることも可能だと説明しています。
また、GraphQLのQueriesのアプローチとFalcorのPathsの違いについても解説しています。</p>

<p>ベタに書いたJSONデータからFalcorを使うように変えていく説明もわかりやすいです。</p>

<p>Falcorの基本を知るにはとてもいいTalkです。JSON Graphをどのように実現しているのかなど。</p>

<h2>Brent Vatne &ndash; Building li.st for Android with Exponent and React Native</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cI9bDvDEsYE" frameborder="0" allowfullscreen></iframe>


<p>ExponentでReactNativeを使ってAndroidのアプリを作った時の話です。
Nativeのカスタムビューを作成することなくできる、かなり実践的な快適なUIを実現する方法が解説されています。</p>

<ul>
<li>UIをブロックしないスムーズなListViewを、IncrementalなRenderingにより実現した話</li>
<li>アニメーションを処理の前後で行うのではなく、同時にバックグラウンドの処理を実行することにより快適なアニメーションの実現する方法</li>
<li><code>ex-navigation</code>を使ったNavigationについて</li>
<li>ユーザーインプットについて。キーボードイベントをどのようにハンドリングするか</li>
<li>タッチやジェスチャーをどのようにハンドリングするのか</li>
</ul>


<p>ReactNativeのAndroidでの事例として貴重なTalkだと感じました。</p>

<ul>
<li><a href="https://github.com/exponentjs/">https://github.com/exponentjs/</a></li>
</ul>


<h2>Laney Kuenzel &amp; Lee Byron &ndash; GraphQL Future</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ViXL0YQnioU" frameborder="0" allowfullscreen></iframe>


<p>GraphQL TeamのメンバーによるGraphQLがオープンソースになってから起きたことと、GraphQLのこれからについてのTalkです。Keynoteっ
ぽい感じもあり、GraphQL使ってない人でも面白いTalkです。</p>

<blockquote><p>We only open source what we use</p>

<p>We release what is generally useful</p></blockquote>

<p>というFacebookの考えの中で、Facebook内で試していることをあくまでExperimentalとして紹介されています。</p>

<ul>
<li>少しでも早く最初のコンテンツを返すための工夫としての<code>@defer</code>や<code>@stream</code>ディレクティブ</li>
<li>リアルタイムアップデートを行うための<code>@live</code>ディレクティブ（プロダクションではまだ使われていない）</li>
<li>現時点ではReactiveなバックエンドを持っていないFacebookでは<code>@live</code>ディレクティブの導入も難しく、さらに複雑な依存関係の中で全ての変更を追従することが難しく、そのような状況の中でイベントベースのSubscriptionをGraphQLで実現するGraphQL Subscriptionsについて

<ul>
<li>Facebookでは、GraphQL SubscriptionsをMQTTを使って実現しているようです。</li>
<li><code>subscription</code>のキーワード自体はgraphql-jsでもサポートされているようです。pubsubの処理は自身で実装する必要がありますが。このあたりはもっと一般化された際にはオープンソースになるかも？</li>
<li>Facebooで実際に使われている規模としては、<code>150B daily subscribes</code>、<code>35B daily payload deliveries</code>、<code>〜30 subscriptions in schema</code>だそうです。</li>
<li>GraphQL Subscriptionsによって、「xxx is writing a comment&hellip;」の表示や、live video上でのlive reactionの機能など多くのことが可能になったそうです。</li>
</ul>
</li>
</ul>


<h2>Martijn Walraven &ndash; Building native mobile apps with GraphQL</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/z5rz3saDPJ8" frameborder="0" allowfullscreen></iframe>


<p>Facebookの外ではまだまだGraphQL導入の敷居が高く、その中でiOSやAndroidアプリからどのようにGraphQLを使えばいいのかというTalkです。
GraphQL Schemaを使ってクライアントでどのように型付けをするのか、RelayのようにGraphQLから取得したデータをどのように一元管理するかという内容です。
ちょっと消化不良感がありました。</p>

<ul>
<li><a href="https://medium.com/apollo-stack">https://medium.com/apollo-stack</a></li>
</ul>


<h2>Question and Answers with core team members</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/5pMDd1t2thc" frameborder="0" allowfullscreen></iframe>


<p>Sessionに登壇していたFacebookのエンジニアによるQ&amp;Aです。
ざっくりまとめると前半がGraphQLについて、後半がアーキテクチャについての話が多い印象です。</p>

<p>GraphQLについては、どのようにSQLに変換すればいいか、本編のTalkにあったGraphQL Subscriptionsについて、GraphQL Fragmentをどうやってテストするのか、バージョニングについてなどの質問がありました。</p>

<p>Reactについては、DevTool APIがそのうち公開されるという話がありました。内部的にはReactPerfで使われているものです。
あとはHigh Order Componentsについての質問もありました。
このあたりは「Andrew Clark &ndash; Recomposing your React application」や下記のブログで詳しく解説されています。</p>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html">https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html</a></li>
</ul>


<p>後半はImmutable.jsについての質問や、1からFacebookを作り直すならどういうアーキテクチャで作るかという質問から、アーキテクチャの話になっています。
JavaScriptにImmutableなデータ型があれば何が変わるのかと言ったことや、Immutabilityとパフォーマンスについてなど。
JavaScriptではMutablityがデフォルトなので、Immutablityが複雑なものとして捉えられますがそれはコンテキストによるもので、デフォルトがImmutableで例外としてMutableを扱う言語もあり、Immutabilityの方がローレベルでシンプルなだという話など。</p>

<p>途中で紹介されるImmutable App Architectureについては別でブログ書いたのでそちらを。</p>

<ul>
<li><a href="http://blog.koba04.com/post/2016/06/21/immutable-app-architecture/">http://blog.koba04.com/post/2016/06/21/immutable-app-architecture/</a></li>
</ul>


<p>その他には、TypeScriptではなくFlowを採用するメリットについての質問やTypeScriptとFlowを組み合わせることについてなど、Flowについての質問もありました。</p>

<p>全体的には、Lee Byron劇場な感じですが、とても面白いQ&amp;Aになっています。</p>

<hr />

<p>そういえば、ReactEurope行ったことについてのエントリー書いてなかったので別途書こう&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.8]]></title>
    <link href="http://blog.koba04.com/post/2016/06/23/react-dot-js-links-vol-dot-8/"/>
    <updated>2016-06-23T13:33:36+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/23/react-dot-js-links-vol-dot-8</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.2.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.2.0">https://github.com/facebook/react/releases/tag/v15.2.0</a></li>
</ul>


<p>15.2.0がリリースされました。</p>

<p>プロダクションビルドでエラーコードが付加されるようになりエラーの調査がしやすくなったことや、PropTypesやkeyのwarning時のスタックトレースがComponentのツリーで表示されるようになりました。
開発をサポートするための機能です。</p>

<p>その他はちょっとしたバグ修正などが中心です。</p>

<h2>Core Notes June 23</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-23.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-23.md</a></li>
</ul>


<p>恒例のCore TeamのMeeting Noteです。</p>

<p>Facebook内での<code>React.createClass</code>からClassによるComponent定義への移行作業は引き続き行われているようです。</p>

<h2>Core Notes June 30</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-30.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-30.md</a></li>
</ul>


<p>こちらもMeeting Noteです。
新しいReconcilerが徐々に動き始めているようです。
また、<code>React.createClass</code>からClassによるComponentによる移行についても進んでいるようです。
下のcodemodを使って、ClassによるComponent定義&amp;property initializer&amp;Flowに変換を行っているようです。</p>

<ul>
<li><a href="https://github.com/reactjs/react-codemod/pull/54">https://github.com/reactjs/react-codemod/pull/54</a></li>
</ul>


<p>React Teamとしては、Class + property initializer + Flowの組み合わせについては、ドッグフーディング中なので現時点では推奨しているわけでないという立場です。</p>

<p>また、Facebook内部ではPureRenderMixinがたくさん使われていて、それを置き換えるためのものとして<code>React.PureComponent</code>が考えられているようです。</p>

<p><code>React.PureComponent</code>に関しては、最初のProposalでは内部のStateless Functional Componentsにも最適化が適用される予定でしたが、混乱や問題点があることから、新しく出されたPRではただのClass版のPureRenderMixinとなっています。そしてmergeされました。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/7195">https://github.com/facebook/react/pull/7195</a></li>
<li><a href="https://github.com/facebook/react/issues/6914">https://github.com/facebook/react/issues/6914</a></li>
</ul>


<p>また、<code>React.createClass</code>をAddonにして、さらに<code>Perf</code>と<code>TestUtils</code>以外のAddonsについては、React Team外にownershipを移して管理するも考えているようです。</p>

<h2>Resolve refs in the order of the children #7101</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7101">https://github.com/facebook/react/pull/7101</a></li>
</ul>


<p>更新時の新しくマウントされるReactElementに対するRefの解決する順番を変更するPRです。
詳しくはPRにある画像を見るとわかると思います。</p>

<h2>Added jsx-self babel transform plugin #3540</h2>

<ul>
<li><a href="https://github.com/babel/babel/pull/3540">https://github.com/babel/babel/pull/3540</a></li>
</ul>


<p>warning目的でReactElementに<code>__self</code>のPropを追加するBabelのtransfomerです。
developmentの時だけ有効にすることが推奨されています。</p>

<h2>Spec proposal: extending the language to allow spreading children #57</h2>

<ul>
<li><a href="https://github.com/facebook/jsx/issues/57">https://github.com/facebook/jsx/issues/57</a></li>
</ul>


<p>JSXでのchildrenの仕様に対するProposalです。
JSXChildを拡張して<code>{...children}</code>を許容するようにするものです。</p>

<h2>RFC: Flat bundle using Rollup</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7178">https://github.com/facebook/react/pull/7178</a></li>
</ul>


<p>現在CommonJSベースで書かれているReactのコードをRollupでバンドルしてTree ShakingやDead Code Eliminationによりファイルサイズを削減するPRです。React Teamのインターンの人ですね。</p>

<p>まずはトップレベルでない<code>require</code>を全てトップレベルにしてES Modulesに変換できるようにして、BabelでCommonJSをES Modulesに変換してRollupでバンドルするという方法を採っているようです。
(RollupのCommonJSプラグインを使う方法よりサイズが小さくなるらしいです)</p>

<h2>Flow v0.28.0</h2>

<ul>
<li><a href="https://github.com/facebook/flow/releases/tag/v0.28.0">https://github.com/facebook/flow/releases/tag/v0.28.0</a></li>
</ul>


<p>Flowの0.28.0がリリースされています。
変更内容については、下記のブログでも書かれています。</p>

<ul>
<li><a href="https://flowtype.org/blog/2016/07/01/New-Unions-Intersections.html">https://flowtype.org/blog/2016/07/01/New-Unions-Intersections.html</a></li>
</ul>


<h2>ReactNative v0.29.0</h2>

<ul>
<li><a href="https://github.com/facebook/react-native/releases/tag/v0.29.0">https://github.com/facebook/react-native/releases/tag/v0.29.0</a></li>
</ul>


<p>ReactNativeの0.29.0がリリースされています。</p>

<h2>Don&rsquo;t Use Bind When Passing Props</h2>

<ul>
<li><a href="https://daveceddia.com/avoid-bind-when-passing-props/">https://daveceddia.com/avoid-bind-when-passing-props/</a></li>
</ul>


<p>PureComponentなんかとも関連しますが、なぜrenderメソッドの中でFunction.prototype.bindしたりArrow Function使うのがダメなのかについて書いたエントリーです。
過去にもあったような気もしますが。
上記を使って書かれているサンプルも多いので、使うときは何が起きているのか意識して使った方がいいと思います。
（Function.prototype.bindやArrow Functionsを使うと当たり前ですが新しい関数が都度生成されるので）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.7]]></title>
    <link href="http://blog.koba04.com/post/2016/06/16/reactjs-links-vol7/"/>
    <updated>2016-06-16T13:33:36+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/16/reactjs-links-vol7</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Team meeting notes</h2>

<p>恒例のCore Teamのmeeting noteです。</p>

<h3>May 26</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-26.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-26.md</a></li>
</ul>


<p>主にES classesによるComponent定義で<code>React.createClass</code>による定義を置き換えることについて書かれています。
ドキュメントやMixinをどうするか、Class Property Initializerについてのスタンスなど。</p>

<p>その他では、Incremental Reconcilerが入った時にTestUtilsのrenderIntoDocumentが同期的なことについてどうするかについても触れられています。</p>

<h3>June 2</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-02.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-02.md</a></li>
</ul>


<p>PureComponentによるStateless Functional Componentsの最適化について多く触れられています。
また、Facebookのコードベースを<code>React.createClass</code>からES classesに移行する計画があるようです。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/6914">https://github.com/facebook/react/pull/6914</a></li>
</ul>


<h3>June 9</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-09.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-09.md</a></li>
</ul>


<p>主に新しいReconcilerの状況についてや、問題となる点について話されています。</p>

<p>あとは、Facebook内の<code>React.createClass</code>からES classesに移行する方法についてが引き続き触れられています。</p>

<p>新しいトピックでいうと、大きなfeatureについてはTC39のようにchampionを立てて進めていくプロセスを採用するかどうかが検討されているようです。</p>

<h2>RFC: Make Refs Opt-in #6974</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6974">https://github.com/facebook/react/issues/6974</a></li>
</ul>


<p>Refsをopt-inの機能にするという提案(discussion)です。</p>

<h2>React ContextTypes, PropTypes when using an already static typed language like TypeScript #6525</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6525">https://github.com/facebook/react/issues/6525</a></li>
</ul>


<p>PropTypesのFlowやTypeScriptで置き換えた場合でもContextTypesを使う必要があることについてのIssue(?)です。</p>

<h2>New marketing copy on homepage #7012</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7012">https://github.com/facebook/react/pull/7012</a></li>
</ul>


<p>Reactのトップページに、特徴として書かれていた「JUST THE UI」、「VIRTUAL DOM」、「DATA FLOW」が「Declarative」、「Component-Based」、「Learn Once, Write Anywhere」に更新されました。</p>

<p>この変更は、Reactは「JUST THE UI」でありMVCのVだという記述が、Reactを使う時にReduxなどのFlux系のライブラリーが必ず必要であるかのように捉えられてしまっている現状なんかも踏まえたもののようです。</p>

<h2>ReactEurope</h2>

<p>ReactEuropeの動画が公開されています。</p>

<ul>
<li><a href="https://www.react-europe.org/">https://www.react-europe.org/</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa">https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa</a> (Day1)</li>
<li><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof">https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof</a> (Day2)</li>
</ul>


<p>別途、まとめを書ければ書くかも。</p>

<h2>Experimenting with React Native at Khan Academy</h2>

<ul>
<li><a href="https://docs.google.com/document/d/1PU51njrUweehKFgSu69C7OAEdyp6rHmsvQ7KIcLaHqw/edit#">https://docs.google.com/document/d/1PU51njrUweehKFgSu69C7OAEdyp6rHmsvQ7KIcLaHqw/edit#</a></li>
</ul>


<p>Khan AcademyでのReactNativeについてのレポートです。実際に取り入れようとした時に何が問題になったかなど触れられていて参考になります。</p>

<h2>Q&amp;A with Ben Alpert</h2>

<ul>
<li><a href="https://github.com/reactiflux/q-and-a/blob/master/ben-alpert_react-core.md">https://github.com/reactiflux/q-and-a/blob/master/ben-alpert_react-core.md</a></li>
</ul>


<p>Reactのcore memberであるBen Alpertに対するQ&amp;Aです。
New renconcilerについてのトピックが多くて興味深いです。</p>

<h2>State Streams and React</h2>

<ul>
<li><a href="https://medium.com/@markusctz/state-streams-and-react-7921e3c376a4#.39bp3z2fa">https://medium.com/@markusctz/state-streams-and-react-7921e3c376a4#.39bp3z2fa</a></li>
</ul>


<p>RxJSでRedux風なアーキテクチャを構築し、Reactと組み合わせて作るというエントリーです。わかりやすいです。
後半は作者が実際に作った<code>udeo</code>というライブラリーについての説明です。</p>

<ul>
<li><a href="https://github.com/mcoetzee/udeo">https://github.com/mcoetzee/udeo</a></li>
</ul>


<h2>react-enroute</h2>

<ul>
<li><a href="https://github.com/tj/react-enroute">https://github.com/tj/react-enroute</a></li>
</ul>


<p>TJが開発しているreact-router風なlightweightなルーティングライブラリーです。
ルーティングにはenrouteというライブラリーを使っていて、react-enrouteはReactとの繋ぎこみだけをやっているような感じです。</p>

<ul>
<li><a href="https://github.com/lapwinglabs/enroute">https://github.com/lapwinglabs/enroute</a></li>
</ul>


<h2>3 Reasons why I stopped using React.setState</h2>

<ul>
<li><a href="https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.umnvins0y">https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.umnvins0y</a></li>
</ul>


<p>ReactのsetStateのハマリどころなどについて解説したエントリーです。
MobXの作者なので、後半はMobX最高という感じになっています。</p>

<h2>Feature Request: Allow reducers to consult global state #1768</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1768">https://github.com/reactjs/redux/pull/1768</a></li>
</ul>


<p>Reduxのreducerで各ReducerでグローバルなStateも受け取れるようにしようというfeature requestです。
mergeされそうな雰囲気?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.6 5/19〜5/27]]></title>
    <link href="http://blog.koba04.com/post/2016/05/27/reactjs-links-vol6/"/>
    <updated>2016-05-27T19:04:55+09:00</updated>
    <id>http://blog.koba04.com/post/2016/05/27/reactjs-links-vol6</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.1.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.1.0">https://github.com/facebook/react/releases/tag/v15.1.0</a></li>
</ul>


<p>React v15.1.0がリリースされています。
基本的にはbug fixなどですが、Perfが書き直されています。その際、<code>printDOM</code>はdeprecatedになり、代わりに<code>printOperations</code>を使うようになりました。</p>

<h2>React Core Team meeting notes</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-19.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-19.md</a></li>
</ul>


<p>恒例のmeeting noteです。
今回のものは、<code>React.createClass</code>のAPIについてや、<code>PropTypes</code>の扱いなどについて触れられており、今後どうなっていくかに関わる重要なポイントに触れられています。</p>

<p>Stateless Functional ComponentsとES2015 ClassesによるComponent定義が中心であり、PropTypesについてはFlowやTypeScriptなどで置き換えていきたいという流れです。
まだ先の話になると思いますが。</p>

<p>その他にも、パッチ、マイナーリリースを2週間ごとに行う計画や、複数パッケージの管理に<a href="https://lernajs.io/">Lerna</a>を使う計画などについても言及されています。</p>

<h2>RFC: Should createClass be considered legacy? (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6811">https://github.com/facebook/react/pull/6811</a></li>
</ul>


<p>上記のmeeting notesにも関わる内容で、<code>React.createClass</code>をlegacyとして扱うためのブログポストのPRです。
結局、まだその時ではないということでmergeされませんでしたが、meeting note以上に詳しく書かれているので興味のある人はみるといいと思います。</p>

<h2>Support Server Rendering of <code>amp</code> Attribute #6798 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6798">https://github.com/facebook/react/issues/6798</a></li>
</ul>


<p><code>amp</code>のタグをSSRでサポートするかどうかについてのIssueです。</p>

<h2>Copy React ART tests and add hacks to fix them #6775 (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6775">https://github.com/facebook/react/pull/6775</a></li>
</ul>


<p>ReactARTのrendererがReactNativeと同様に、メンテナンス上の理由から<code>facebook/react</code>のリポジトリに入りました。</p>

<h2>RFC: Error code system #6874</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6874">https://github.com/facebook/react/pull/6874</a></li>
</ul>


<p>Core Meeting Notesにあったエラーシステム周りの作業が始まっています。</p>

<h2>Redux 4.0 ?</h2>

<p>Reduxで4.0に向けた議論が始まっています。</p>

<h3>RFC: Simplify middleware signature</h3>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/1744">https://github.com/reactjs/redux/issues/1744</a></li>
</ul>


<p>これは結局入らないみたいですね。</p>

<h3>Proof of Concept: Enhancer Overhaul</h3>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1702">https://github.com/reactjs/redux/pull/1702</a></li>
</ul>


<p><code>store base</code>と呼ばれているこちらのStore enhancerのAPI変更については議論中です。
Storeを直接拡張するのではなく、今MiddlewareのAPIとして渡している<code>{getState, dispatch}</code>の形式を<code>store base</code>として抽象化して、それを拡張できるようにする感じなのかな？</p>

<h2>Understanding MobX and when to use it. #199 (MobX Issue)</h2>

<ul>
<li><a href="https://github.com/mobxjs/mobx/issues/199">https://github.com/mobxjs/mobx/issues/199</a></li>
</ul>


<p>MobXとReduxでのアプローチの違いについての議論です。</p>

<h2>Spectacle</h2>

<ul>
<li><a href="http://formidable.com/open-source/spectacle/">http://formidable.com/open-source/spectacle/</a></li>
</ul>


<p>Reactを使い、JSXでスライドを作成するライブラリーです。
Markdownなんかも使えるようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.5 5/12〜5/18]]></title>
    <link href="http://blog.koba04.com/post/2016/05/18/reactjs-links-vol5/"/>
    <updated>2016-05-18T23:27:34+09:00</updated>
    <id>http://blog.koba04.com/post/2016/05/18/reactjs-links-vol5</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Meeting Note May 12 (React Meeting Note)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-12.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-12.md</a></li>
</ul>


<p>恒例のCore TeamのMeeting Noteです。
現在だと、production build時のエラーがわかりにくいものであったりとエラー周りの仕組みに不便なところがあるのでそれを改善することをReact Teamに来たインターンの人がやるそうです。すごい環境のインターンだ&hellip;。</p>

<p>RustやEmber参考にしたRFCのプロセスを構築することが検討されているようです。
また、ShallowRenderingとは別のテスト用にrendererのプロトタイプが作られていたりとこちらも興味深いです。</p>

<h2>Docs need one or more diagrams #653 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/653#issuecomment-216844781">https://github.com/reactjs/redux/issues/653#issuecomment-216844781</a></li>
</ul>


<p>Reduxでのデータの流れがダイアグラムで示されていてわかりやすいので、はじめて触る人は見ておくといいかもしれません。</p>

<h2>Tiny React Renderer (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/iamdustan/tiny-react-renderer">https://github.com/iamdustan/tiny-react-renderer</a></li>
</ul>


<p>ReactのRendererを理解するための小さな実装です。カスタムRendererを作りたかったり、Reactの内部を知りたい人はソースをみるといいんじゃないかと思います。</p>

<h2>react-router-scroll (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/taion/react-router-scroll">https://github.com/taion/react-router-scroll</a></li>
</ul>


<p>ReactRouterでスクロールマネージメントを行うためのライブラリーです。
scroll-behaviorをラップする感じになっているようです。</p>

<h2>flow-typed (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/flowtype/flow-typed">https://github.com/flowtype/flow-typed</a></li>
</ul>


<p>Flowの型定義を管理するリポジトリーです。前に公開されたリポジトリーですが、最近型定義が集まり出しています。</p>

<h2>Why did you update (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/garbles/why-did-you-update">https://github.com/garbles/why-did-you-update</a></li>
</ul>


<p>Reactにモンキーパッチを当てて、PropやStateが変わってないのにrerenderが行われたことを教えてくれるライブラリーです。
パフォーマンスチューニングしたい場合に便利かもしれません。</p>

<h2>Higher Order Components: Theory and Practice</h2>

<ul>
<li><a href="http://engineering.blogfoster.com/higher-order-components-theory-and-practice/">http://engineering.blogfoster.com/higher-order-components-theory-and-practice/</a></li>
</ul>


<p>ReactでMixinの代わりとしてよく使われるHigh Order Componentsのパターンについてのエントリーです。</p>

<h2>redux-observable (Redux Middleware)</h2>

<ul>
<li><a href="https://medium.com/@benlesh/redux-observable-ec0b00d2eb52">https://medium.com/@benlesh/redux-observable-ec0b00d2eb52</a></li>
</ul>


<p>ReduxとRxJS v5を組み合わせるためのライブラリーについてのエントリーです。
Ben LeshさんはRxJS v5のメインの開発者であり、以前に紹介した通りReduxに<code>es-observable</code>のspecに対応させるPRを送っていましたがここで結びつきました。このライブラリーはNetflixでも使っているようです。</p>

<p><a href="http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2/">http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2/</a></p>

<h2>React Elements vs React Components vs Component Backing Instances (React)</h2>

<ul>
<li><a href="https://medium.com/@fay_jai/react-elements-vs-react-components-vs-component-backing-instances-14d42729f62">https://medium.com/@fay_jai/react-elements-vs-react-components-vs-component-backing-instances-14d42729f62</a></li>
</ul>


<p>ReactElementとReact ComponentとComponentのinstanceの違いについてのエントリーです。</p>

<h2>Getting Started with React Native Development on Windows</h2>

<ul>
<li><a href="https://shift.infinite.red/getting-started-with-react-native-development-on-windows-90d85a72ae65">https://shift.infinite.red/getting-started-with-react-native-development-on-windows-90d85a72ae65</a></li>
</ul>


<p>ReactNativeの開発をWindows上で行う方法について解説したエントリーです。</p>

<h2>UI Testing in React</h2>

<ul>
<li><a href="https://voice.kadira.io/ui-testing-in-react-74fd90a5d58b#.tr0046jgs">https://voice.kadira.io/ui-testing-in-react-74fd90a5d58b#.tr0046jgs</a></li>
</ul>


<p>ReactでのUIテストについてのエントリーです。
テストをFunctional TestingとVisual Testingに分類して、Functional Testingはenzymeを、Visual TestingはReact
Storybookをそれぞれ使う方法が紹介されています。</p>

<h2>React Amsterdam</h2>

<ul>
<li><a href="https://speakerdeck.com/reactamsterdam">https://speakerdeck.com/reactamsterdam</a></li>
<li><a href="https://www.youtube.com/channel/UCsFrt8oKNYXGspSlX9u6uXw">https://www.youtube.com/channel/UCsFrt8oKNYXGspSlX9u6uXw</a></li>
</ul>


<p>React Amsterdamのスライドと動画が公開されています。
ReactNativeのinternalやJSSの話もあったりして色々面白そうです。</p>

<ul>
<li><a href="https://speakerdeck.com/reactamsterdam/tadeu-zagallo-facebook-london-react-native-architecture-overview">https://speakerdeck.com/reactamsterdam/tadeu-zagallo-facebook-london-react-native-architecture-overview</a></li>
<li><a href="https://speakerdeck.com/reactamsterdam/oleg-slobodskoi-chatgrape-berlin-javascript-style-sheets">https://speakerdeck.com/reactamsterdam/oleg-slobodskoi-chatgrape-berlin-javascript-style-sheets</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
