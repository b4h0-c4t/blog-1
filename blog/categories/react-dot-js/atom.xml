<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react.js | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/react-dot-js/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2016-06-21T00:53:19+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.7]]></title>
    <link href="http://blog.koba04.com/post/2016/06/16/reactjs-links-vol7/"/>
    <updated>2016-06-16T13:33:36+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/16/reactjs-links-vol7</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Team meeting notes</h2>

<p>恒例のCore Teamのmeeting noteです。</p>

<h3>May 26</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-26.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-26.md</a></li>
</ul>


<p>主にES classesによるComponent定義で<code>React.createClass</code>による定義を置き換えることについて書かれています。
ドキュメントやMixinをどうするか、Class Property Initializerについてのスタンスなど。</p>

<p>その他では、Incremental Reconcilerが入った時にTestUtilsのrenderIntoDocumentが同期的なことについてどうするかについても触れられています。</p>

<h3>June 2</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-02.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-02.md</a></li>
</ul>


<p>PureComponentによるStateless Functional Componentsの最適化について多く触れられています。
また、Facebookのコードベースを<code>React.createClass</code>からES classesに移行する計画があるようです。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/6914">https://github.com/facebook/react/pull/6914</a></li>
</ul>


<h3>June 9</h3>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-09.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-09.md</a></li>
</ul>


<p>主に新しいReconcilerの状況についてや、問題となる点について話されています。</p>

<p>あとは、Facebook内の<code>React.createClass</code>からES classesに移行する方法についてが引き続き触れられています。</p>

<p>新しいトピックでいうと、大きなfeatureについてはTC39のようにchampionを立てて進めていくプロセスを採用するかどうかが検討されているようです。</p>

<h2>RFC: Make Refs Opt-in #6974</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6974">https://github.com/facebook/react/issues/6974</a></li>
</ul>


<p>Refsをopt-inの機能にするという提案(discussion)です。</p>

<h2>React ContextTypes, PropTypes when using an already static typed language like TypeScript #6525</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6525">https://github.com/facebook/react/issues/6525</a></li>
</ul>


<p>PropTypesのFlowやTypeScriptで置き換えた場合でもContextTypesを使う必要があることについてのIssue(?)です。</p>

<h2>New marketing copy on homepage #7012</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7012">https://github.com/facebook/react/pull/7012</a></li>
</ul>


<p>Reactのトップページに、特徴として書かれていた「JUST THE UI」、「VIRTUAL DOM」、「DATA FLOW」が「Declarative」、「Component-Based」、「Learn Once, Write Anywhere」に更新されました。</p>

<p>この変更は、Reactは「JUST THE UI」でありMVCのVだという記述が、Reactを使う時にReduxなどのFlux系のライブラリーが必ず必要であるかのように捉えられてしまっている現状なんかも踏まえたもののようです。</p>

<h2>ReactEurope</h2>

<p>ReactEuropeの動画が公開されています。</p>

<ul>
<li><a href="https://www.react-europe.org/">https://www.react-europe.org/</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa">https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa</a> (Day1)</li>
<li><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof">https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof</a> (Day2)</li>
</ul>


<p>別途、まとめを書ければ書くかも。</p>

<h2>Experimenting with React Native at Khan Academy</h2>

<ul>
<li><a href="https://docs.google.com/document/d/1PU51njrUweehKFgSu69C7OAEdyp6rHmsvQ7KIcLaHqw/edit#">https://docs.google.com/document/d/1PU51njrUweehKFgSu69C7OAEdyp6rHmsvQ7KIcLaHqw/edit#</a></li>
</ul>


<p>Khan AcademyでのReactNativeについてのレポートです。実際に取り入れようとした時に何が問題になったかなど触れられていて参考になります。</p>

<h2>Q&amp;A with Ben Alpert</h2>

<ul>
<li><a href="https://github.com/reactiflux/q-and-a/blob/master/ben-alpert_react-core.md">https://github.com/reactiflux/q-and-a/blob/master/ben-alpert_react-core.md</a></li>
</ul>


<p>Reactのcore memberであるBen Alpertに対するQ&amp;Aです。
New renconcilerについてのトピックが多くて興味深いです。</p>

<h2>State Streams and React</h2>

<ul>
<li><a href="https://medium.com/@markusctz/state-streams-and-react-7921e3c376a4#.39bp3z2fa">https://medium.com/@markusctz/state-streams-and-react-7921e3c376a4#.39bp3z2fa</a></li>
</ul>


<p>RxJSでRedux風なアーキテクチャを構築し、Reactと組み合わせて作るというエントリーです。わかりやすいです。
後半は作者が実際に作った<code>udeo</code>というライブラリーについての説明です。</p>

<ul>
<li><a href="https://github.com/mcoetzee/udeo">https://github.com/mcoetzee/udeo</a></li>
</ul>


<h2>react-enroute</h2>

<ul>
<li><a href="https://github.com/tj/react-enroute">https://github.com/tj/react-enroute</a></li>
</ul>


<p>TJが開発しているreact-router風なlightweightなルーティングライブラリーです。
ルーティングにはenrouteというライブラリーを使っていて、react-enrouteはReactとの繋ぎこみだけをやっているような感じです。</p>

<ul>
<li><a href="https://github.com/lapwinglabs/enroute">https://github.com/lapwinglabs/enroute</a></li>
</ul>


<h2>3 Reasons why I stopped using React.setState</h2>

<ul>
<li><a href="https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.umnvins0y">https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.umnvins0y</a></li>
</ul>


<p>ReactのsetStateのハマリどころなどについて解説したエントリーです。
MobXの作者なので、後半はMobX最高という感じになっています。</p>

<h2>Feature Request: Allow reducers to consult global state #1768</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1768">https://github.com/reactjs/redux/pull/1768</a></li>
</ul>


<p>Reduxのreducerで各ReducerでグローバルなStateも受け取れるようにしようというfeature requestです。
mergeされそうな雰囲気?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.6 5/19〜5/27]]></title>
    <link href="http://blog.koba04.com/post/2016/05/27/reactjs-links-vol6/"/>
    <updated>2016-05-27T19:04:55+09:00</updated>
    <id>http://blog.koba04.com/post/2016/05/27/reactjs-links-vol6</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.1.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.1.0">https://github.com/facebook/react/releases/tag/v15.1.0</a></li>
</ul>


<p>React v15.1.0がリリースされています。
基本的にはbug fixなどですが、Perfが書き直されています。その際、<code>printDOM</code>はdeprecatedになり、代わりに<code>printOperations</code>を使うようになりました。</p>

<h2>React Core Team meeting notes</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-19.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-19.md</a></li>
</ul>


<p>恒例のmeeting noteです。
今回のものは、<code>React.createClass</code>のAPIについてや、<code>PropTypes</code>の扱いなどについて触れられており、今後どうなっていくかに関わる重要なポイントに触れられています。</p>

<p>Stateless Functional ComponentsとES2015 ClassesによるComponent定義が中心であり、PropTypesについてはFlowやTypeScriptなどで置き換えていきたいという流れです。
まだ先の話になると思いますが。</p>

<p>その他にも、パッチ、マイナーリリースを2週間ごとに行う計画や、複数パッケージの管理に<a href="https://lernajs.io/">Lerna</a>を使う計画などについても言及されています。</p>

<h2>RFC: Should createClass be considered legacy? (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6811">https://github.com/facebook/react/pull/6811</a></li>
</ul>


<p>上記のmeeting notesにも関わる内容で、<code>React.createClass</code>をlegacyとして扱うためのブログポストのPRです。
結局、まだその時ではないということでmergeされませんでしたが、meeting note以上に詳しく書かれているので興味のある人はみるといいと思います。</p>

<h2>Support Server Rendering of <code>amp</code> Attribute #6798 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6798">https://github.com/facebook/react/issues/6798</a></li>
</ul>


<p><code>amp</code>のタグをSSRでサポートするかどうかについてのIssueです。</p>

<h2>Copy React ART tests and add hacks to fix them #6775 (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6775">https://github.com/facebook/react/pull/6775</a></li>
</ul>


<p>ReactARTのrendererがReactNativeと同様に、メンテナンス上の理由から<code>facebook/react</code>のリポジトリに入りました。</p>

<h2>RFC: Error code system #6874</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6874">https://github.com/facebook/react/pull/6874</a></li>
</ul>


<p>Core Meeting Notesにあったエラーシステム周りの作業が始まっています。</p>

<h2>Redux 4.0 ?</h2>

<p>Reduxで4.0に向けた議論が始まっています。</p>

<h3>RFC: Simplify middleware signature</h3>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/1744">https://github.com/reactjs/redux/issues/1744</a></li>
</ul>


<p>これは結局入らないみたいですね。</p>

<h3>Proof of Concept: Enhancer Overhaul</h3>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1702">https://github.com/reactjs/redux/pull/1702</a></li>
</ul>


<p><code>store base</code>と呼ばれているこちらのStore enhancerのAPI変更については議論中です。
Storeを直接拡張するのではなく、今MiddlewareのAPIとして渡している<code>{getState, dispatch}</code>の形式を<code>store base</code>として抽象化して、それを拡張できるようにする感じなのかな？</p>

<h2>Understanding MobX and when to use it. #199 (MobX Issue)</h2>

<ul>
<li><a href="https://github.com/mobxjs/mobx/issues/199">https://github.com/mobxjs/mobx/issues/199</a></li>
</ul>


<p>MobXとReduxでのアプローチの違いについての議論です。</p>

<h2>Spectacle</h2>

<ul>
<li><a href="http://formidable.com/open-source/spectacle/">http://formidable.com/open-source/spectacle/</a></li>
</ul>


<p>Reactを使い、JSXでスライドを作成するライブラリーです。
Markdownなんかも使えるようです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.5 5/12〜5/18]]></title>
    <link href="http://blog.koba04.com/post/2016/05/18/reactjs-links-vol5/"/>
    <updated>2016-05-18T23:27:34+09:00</updated>
    <id>http://blog.koba04.com/post/2016/05/18/reactjs-links-vol5</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Meeting Note May 12 (React Meeting Note)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-12.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-12.md</a></li>
</ul>


<p>恒例のCore TeamのMeeting Noteです。
現在だと、production build時のエラーがわかりにくいものであったりとエラー周りの仕組みに不便なところがあるのでそれを改善することをReact Teamに来たインターンの人がやるそうです。すごい環境のインターンだ&hellip;。</p>

<p>RustやEmber参考にしたRFCのプロセスを構築することが検討されているようです。
また、ShallowRenderingとは別のテスト用にrendererのプロトタイプが作られていたりとこちらも興味深いです。</p>

<h2>Docs need one or more diagrams #653 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/653#issuecomment-216844781">https://github.com/reactjs/redux/issues/653#issuecomment-216844781</a></li>
</ul>


<p>Reduxでのデータの流れがダイアグラムで示されていてわかりやすいので、はじめて触る人は見ておくといいかもしれません。</p>

<h2>Tiny React Renderer (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/iamdustan/tiny-react-renderer">https://github.com/iamdustan/tiny-react-renderer</a></li>
</ul>


<p>ReactのRendererを理解するための小さな実装です。カスタムRendererを作りたかったり、Reactの内部を知りたい人はソースをみるといいんじゃないかと思います。</p>

<h2>react-router-scroll (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/taion/react-router-scroll">https://github.com/taion/react-router-scroll</a></li>
</ul>


<p>ReactRouterでスクロールマネージメントを行うためのライブラリーです。
scroll-behaviorをラップする感じになっているようです。</p>

<h2>flow-typed (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/flowtype/flow-typed">https://github.com/flowtype/flow-typed</a></li>
</ul>


<p>Flowの型定義を管理するリポジトリーです。前に公開されたリポジトリーですが、最近型定義が集まり出しています。</p>

<h2>Why did you update (GitHub Repository)</h2>

<ul>
<li><a href="https://github.com/garbles/why-did-you-update">https://github.com/garbles/why-did-you-update</a></li>
</ul>


<p>Reactにモンキーパッチを当てて、PropやStateが変わってないのにrerenderが行われたことを教えてくれるライブラリーです。
パフォーマンスチューニングしたい場合に便利かもしれません。</p>

<h2>Higher Order Components: Theory and Practice</h2>

<ul>
<li><a href="http://engineering.blogfoster.com/higher-order-components-theory-and-practice/">http://engineering.blogfoster.com/higher-order-components-theory-and-practice/</a></li>
</ul>


<p>ReactでMixinの代わりとしてよく使われるHigh Order Componentsのパターンについてのエントリーです。</p>

<h2>redux-observable (Redux Middleware)</h2>

<ul>
<li><a href="https://medium.com/@benlesh/redux-observable-ec0b00d2eb52">https://medium.com/@benlesh/redux-observable-ec0b00d2eb52</a></li>
</ul>


<p>ReduxとRxJS v5を組み合わせるためのライブラリーについてのエントリーです。
Ben LeshさんはRxJS v5のメインの開発者であり、以前に紹介した通りReduxに<code>es-observable</code>のspecに対応させるPRを送っていましたがここで結びつきました。このライブラリーはNetflixでも使っているようです。</p>

<p><a href="http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2/">http://blog.koba04.com/post/2016/04/19/reactjs-links-vol2/</a></p>

<h2>React Elements vs React Components vs Component Backing Instances (React)</h2>

<ul>
<li><a href="https://medium.com/@fay_jai/react-elements-vs-react-components-vs-component-backing-instances-14d42729f62">https://medium.com/@fay_jai/react-elements-vs-react-components-vs-component-backing-instances-14d42729f62</a></li>
</ul>


<p>ReactElementとReact ComponentとComponentのinstanceの違いについてのエントリーです。</p>

<h2>Getting Started with React Native Development on Windows</h2>

<ul>
<li><a href="https://shift.infinite.red/getting-started-with-react-native-development-on-windows-90d85a72ae65">https://shift.infinite.red/getting-started-with-react-native-development-on-windows-90d85a72ae65</a></li>
</ul>


<p>ReactNativeの開発をWindows上で行う方法について解説したエントリーです。</p>

<h2>UI Testing in React</h2>

<ul>
<li><a href="https://voice.kadira.io/ui-testing-in-react-74fd90a5d58b#.tr0046jgs">https://voice.kadira.io/ui-testing-in-react-74fd90a5d58b#.tr0046jgs</a></li>
</ul>


<p>ReactでのUIテストについてのエントリーです。
テストをFunctional TestingとVisual Testingに分類して、Functional Testingはenzymeを、Visual TestingはReact
Storybookをそれぞれ使う方法が紹介されています。</p>

<h2>React Amsterdam</h2>

<ul>
<li><a href="https://speakerdeck.com/reactamsterdam">https://speakerdeck.com/reactamsterdam</a></li>
<li><a href="https://www.youtube.com/channel/UCsFrt8oKNYXGspSlX9u6uXw">https://www.youtube.com/channel/UCsFrt8oKNYXGspSlX9u6uXw</a></li>
</ul>


<p>React Amsterdamのスライドと動画が公開されています。
ReactNativeのinternalやJSSの話もあったりして色々面白そうです。</p>

<ul>
<li><a href="https://speakerdeck.com/reactamsterdam/tadeu-zagallo-facebook-london-react-native-architecture-overview">https://speakerdeck.com/reactamsterdam/tadeu-zagallo-facebook-london-react-native-architecture-overview</a></li>
<li><a href="https://speakerdeck.com/reactamsterdam/oleg-slobodskoi-chatgrape-berlin-javascript-style-sheets">https://speakerdeck.com/reactamsterdam/oleg-slobodskoi-chatgrape-berlin-javascript-style-sheets</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.4 4/29〜5/11]]></title>
    <link href="http://blog.koba04.com/post/2016/05/11/reactjs-links-vol4/"/>
    <updated>2016-05-11T18:41:13+09:00</updated>
    <id>http://blog.koba04.com/post/2016/05/11/reactjs-links-vol4</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.0.2 (React Release)</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.0.2">https://github.com/facebook/react/releases/tag/v15.0.2</a></li>
</ul>


<p>Reactのv15.0.2がリリースされています。Bug fixが中心です。</p>

<h2>React Core Meeting Note April 28 (React Meeting Note)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-04/april-28.md">https://github.com/reactjs/core-notes/blob/master/2016-04/april-28.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/pull/10">https://github.com/reactjs/core-notes/pull/10</a></li>
</ul>


<p>React Coreチームのmeeting noteです。
v15になったこともあり、リリースサイクルについての議論が行われているようです。</p>

<p>また、<code>Experimenting with StyleSheet.create() on the web</code>のようなトピックもあり、こちらも興味深いです。</p>

<h2>React Core Meeting Note May 5 (React Meeting Note)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-05/may-05.md">https://github.com/reactjs/core-notes/blob/master/2016-05/may-05.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/pull/13">https://github.com/reactjs/core-notes/pull/13</a></li>
</ul>


<p>React Coreチームのmeeting noteです。</p>

<p>また、<code>airbnb/enzyme</code>をofficialのTestUtilsに？みたいな話もあってこちらも注目です。</p>

<p>あとは、Server Side RenderingやCSSのvendor prefixについての議論もされています。</p>

<h2>Add new ReactPerf #6046 (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6046">https://github.com/facebook/react/pull/6046</a></li>
</ul>


<p>Dan Abramovが作業していたReactPerfのrewriteされたものがmergeされました。
<code>react@15.1.0-alpha.1</code>で試すことができます。</p>

<h2>RFC: New Reconciler Infra (React PR)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6690">https://github.com/facebook/react/pull/6690</a></li>
</ul>


<p>Reactのコア部分であるReconcilerと呼ばれているComponentの更新処理を管理する部分の新しいアウトラインとなる実装がmergeされました。まだ初期という感じですが。。
通常、Reactを使う場合にこのReconcilerは使われないので、コンセプトを共有するための実装という感じです。</p>

<p>後、コードベースがFlowになっていますね。ReactNativeのコードはFlowが使われていたりするので、今後Reactの本体のコードにもFlowが使われていくようになるかもしれません。</p>

<h2>React Native 0.25.1 (React Native Release)</h2>

<ul>
<li><a href="https://github.com/facebook/react-native/releases/tag/v0.25.1">https://github.com/facebook/react-native/releases/tag/v0.25.1</a></li>
</ul>


<p>これまでは、</p>

<p><code>js
import React, { Component, View } from 'react-native';
</code></p>

<p>と<code>react-native</code>からReactもComponentもimportする必要あったのが、</p>

<p><code>js
import React, { Component } from 'react';
import { View } from 'react-native';
</code></p>

<p>のようにView部分だけを<code>react-native</code>からimportする形になり、rendererの1つとしてのReact Nativeという形に近づきました。</p>

<h2>Flux 3.0 (Flux Release)</h2>

<ul>
<li><a href="https://github.com/facebook/flux/blob/master/CHANGELOG.md#300">https://github.com/facebook/flux/blob/master/CHANGELOG.md#300</a></li>
</ul>


<p>大きなところでは、Immutable.jsのMapをStateとして使うためのMapStoreが削除されました。</p>

<h2>React Native Express (React Native Tutorial)</h2>

<ul>
<li><a href="http://www.reactnativeexpress.com/">http://www.reactnativeexpress.com/</a></li>
</ul>


<p>ReactNativeのためのチュートリアル的なサイトです。サンプルが<code>react-native-web</code>を使って確認できるのは面白いですね。</p>

<h2>Proof of Concept: Enhancer Overhaul #1702 (Redux PR)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1702">https://github.com/reactjs/redux/pull/1702</a></li>
</ul>


<p>Storeを拡張する辺りについての新しいコンセプトについて議論されています。</p>

<h2>Mobile Twitter Web(React Users)</h2>

<ul>
<li><a href="https://mobile.twitter.com/">https://mobile.twitter.com/</a></li>
</ul>


<p>TwitterのモバイルWeb版がいつの間にかリニューアルされていて、Reactが使われています。
React Developer Toolsで見る限り、<code>react-router</code>と<code>redux</code>も使われているようです。</p>

<h2>State management is easy &ndash; Introduction to MobX (Slide)</h2>

<ul>
<li><a href="https://speakerdeck.com/mweststrate/state-management-is-easy-introduction-to-mobx">https://speakerdeck.com/mweststrate/state-management-is-easy-introduction-to-mobx</a></li>
</ul>


<p>Mendixというところが作ったMobXの紹介スライドです。
Storeとなるクラスの値をobservableにして、Compnentがobserveとなるような感じです。
これだとデータの流れが不明確になって大規模だと辛そうですが&hellip;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.3 4/20〜4/28]]></title>
    <link href="http://blog.koba04.com/post/2016/04/28/reactjs-links-vol3/"/>
    <updated>2016-04-28T19:19:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/04/28/reactjs-links-vol3</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React core meeting notes April 21 (React)</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-04/april-21.md">https://github.com/reactjs/core-notes/blob/master/2016-04/april-21.md</a></li>
</ul>


<p>ReactのCore Teamによるmeeting note(4/21)が公開されています。</p>

<p>特に大きな何かがあるわけではないですが、いくつかのbugをfixした<code>15.0.2</code>が今週にも出そうです。
その他では、v15のリリース時にバタバタしたのでリリースプロセスの見直しなどが検討されているようです。
あとは、ReactのコードベースをFlow化することも議題に挙がっていました。</p>

<p>次の大きなfeatureとしては下のNew Core AlgorithmのIssueです。
詳細はまだわかりませんが、現在一度にまとめて行っているDOMの更新を分割して行うような感じになるなのかなと思います。
最初に表示されている部分だけを更新して、その後に非表示エリアのDOMを非同期で更新するみたいな。</p>

<p>この内容はこの後で紹介するDan AbamovのQ&amp;Aでも言及されていたので興味のある人は見てみるといいと思います。</p>

<ul>
<li><a href="https://github.com/facebook/react/issues/6170">https://github.com/facebook/react/issues/6170</a></li>
</ul>


<h2>Disabled inputs should not respond to clicks in IE (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6215">https://github.com/facebook/react/pull/6215</a></li>
</ul>


<p>IE11でdisableだった場合にもonChageイベントが発行されるバグを修正するPRがmergeされました。</p>

<h2>Move React Core Integration and Injection to the Core Repo #6338 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6338">https://github.com/facebook/react/pull/6338</a></li>
</ul>


<p>React NativeのReactとの連携部分がReactのリポジトリの中に含まれるようになりました。
特に何か変わることはないと思いますが、よりReact Nativeはreact-domのようにただのrendererの1つであるという位置付けになっていく流れなのかなと思います。</p>

<p>(実際なかなかそこまでうまく分割できていないようですが&hellip;)</p>

<h2>Provide info about component tree to devtools #6549 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/6549">https://github.com/facebook/react/pull/6549</a></li>
</ul>


<p>React Perfの再構築に伴って、React DevToolのようなものを作るための環境が整備されてきています。
ソースを見る感じ、EventHandlerを登録しておくことで、Reactの中で起こるイベントをlistenすることができるようになるのでthird partyのライブラリーも作りやすくなるのかなと思います。</p>

<h2>Add comments/attribute indicating which component was rendered #6559 (React Issue)</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/6559">https://github.com/facebook/react/issues/6559</a></li>
</ul>


<p>ChromeとFirefox以外のReactのDevToolsを持っていないブラウザーだと、どのComponentがrenderされたのかわからないので、<code>data-reactcomponent</code>のような属性をDOMに付与するのはどうかという提案です。
もちろん開発環境のみで、別のフラグでOn/Offできるような感じで。</p>

<p>いるのかな&hellip;。</p>

<h2>QA with Dan Abramov in Reactiflux (Link)</h2>

<ul>
<li><a href="https://github.com/reactiflux/q-and-a/blob/master/dan-abramov_react-core.md">https://github.com/reactiflux/q-and-a/blob/master/dan-abramov_react-core.md</a></li>
</ul>


<p>Dan AbramovがReactifluxのDiscordで行ったQ&amp;Aのまとめです。
Facebookで何をやってるとかRedux、Reactについての質問に答えています。</p>

<p>今後の予定は下記で確認できます。Ben Alpertの会が個人的に楽しみです。そして何気にJonathan Carterが。</p>

<ul>
<li><a href="https://paper.dropbox.com/doc/Reactiflux-QA-Schedule-7QAfGzEqfKjtN9UmhYYM9">https://paper.dropbox.com/doc/Reactiflux-QA-Schedule-7QAfGzEqfKjtN9UmhYYM9</a></li>
</ul>


<h2>AMA with Lee Byron (Link)</h2>

<ul>
<li><a href="https://hashnode.com/ama/with-lee-byron-cin0kpe8p0073rb53b19emcda">https://hashnode.com/ama/with-lee-byron-cin0kpe8p0073rb53b19emcda</a></li>
</ul>


<p>GraphQLやImmutable.jsのメンテナーであるLee Byronが色々質問に答えています。
GraphQLやImmutable.jsだけでなく、Facebook内での開発についてやReactについてやCSS modulesどう思うかなど色々答えているので面白いです。
GraphQLとFalcor比べてどう？TypeScriptがあるのになんでFlowを作っているのか？
Burnoutにどう対処すべきかなどなど。(FacebookにはHack-a-monthという仕組みがあるらしい)</p>

<h2>Add Redux Logo #1671 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1671">https://github.com/reactjs/redux/pull/1671</a></li>
<li><a href="https://github.com/reactjs/redux/issues/151">https://github.com/reactjs/redux/issues/151</a> (ロゴのアイデア)</li>
</ul>


<p>ようやくReduxのロゴが決まったようです。</p>

<h2>Redux FAQ (Redux documentation)</h2>

<ul>
<li><a href="http://redux.js.org/docs/FAQ.html">http://redux.js.org/docs/FAQ.html</a></li>
</ul>


<p>少し前に追加されたReduxのFAQページです。</p>

<p><strong>Do I have to put all my state into Redux? Should I ever use React’s setState()?</strong>や、<strong>How can I represent “side effects” such as AJAX calls? Why do we need things like “action creators”, “thunks”, and “middleware” to do async behavior?</strong>など、Reduxでアプリケーションを作る時に気になるような質問があるので、Reduxを使っている人は見てみることをオススメします。</p>

<h2>Remove unneeded code #1640 (Redux Issue)</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/pull/1640">https://github.com/reactjs/redux/pull/1640</a></li>
</ul>


<p>Reduxのutils/warningがなぜ↓のようなことをしているのか。</p>

<p>```js
  try {</p>

<pre><code>// This error was thrown as a convenience so that if you enable
// "break on all exceptions" in your console,
// it would pause the execution at this line.
throw new Error(message)
</code></pre>

<p>  /<em> eslint-disable no-empty </em>/
  } catch (e) { }
```</p>

<p><a href="https://github.com/reactjs/redux/blob/master/src/utils/warning.js#L13-L19">https://github.com/reactjs/redux/blob/master/src/utils/warning.js#L13-L19</a></p>

<p>&ldquo;break on all exceptions"を有効にしている時にここで止まるようにしているんですね。なるほど。</p>

<h2>How to sync Redux state and url hash tag params (Redux Stackoverflow)</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/36722584/how-to-sync-redux-state-and-url-hash-tag-params/36749963#36749963">http://stackoverflow.com/questions/36722584/how-to-sync-redux-state-and-url-hash-tag-params/36749963#36749963</a></li>
</ul>


<p>ReduxでURLのqueryやhashで状態を管理したい時にStateとどう同期すればいいの？<code>react-router-redux</code>使えばいいの？という質問です。
それに対して作者のDan Abramovが解答しています。
Reduxの質問に解答しているのをよく見るのでわからないことがあったらstackoverflowで聞いてみるといいかもしれないですね。</p>

<p>Stateと管理する必要はなくて、必要となった時にURLから値を取得して使えばいいという答えです。
StateにすることでActionになるので、リプレイなどがやりやすくなるメリットはありますが、必要でない場合は複雑になるだけです。</p>

<h2>MobX (Library)</h2>

<ul>
<li><a href="https://github.com/mobxjs/mobx">https://github.com/mobxjs/mobx</a></li>
</ul>


<p>Observableを活用したReduxライクなState Managementのライブラリーです。
TypeScriptで書かれています。
Reactと組み合わせることが想定されているようで、Reactとbindingするためのライブラリーもあります。</p>

<p>10分でわかる説明</p>

<ul>
<li><a href="https://mobxjs.github.io/mobx/getting-started.html">https://mobxjs.github.io/mobx/getting-started.html</a></li>
</ul>


<p>ちゃんと中身見てないので、イマイチどのあたりが素晴らしいのかわからかなったので、気が向いたらまた見てみます。
<code>@observable decorator (ES2015)</code>って書いたのがとても気になりました&hellip;。</p>
]]></content>
  </entry>
  
</feed>
