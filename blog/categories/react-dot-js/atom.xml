<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react.js | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/react-dot-js/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2017-04-14T15:50:51+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React v15.5(6) and v16]]></title>
    <link href="http://blog.koba04.com/post/2017/04/14/react-dot-js-v155-and-v16/"/>
    <updated>2017-04-14T14:00:05+09:00</updated>
    <id>http://blog.koba04.com/post/2017/04/14/react-dot-js-v155-and-v16</id>
    <content type="html"><![CDATA[<p>Reactのv15.5がリリースされたので、v15.5での変更点とv16についてのまとめです。</p>

<ul>
<li><a href="https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html">https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html</a></li>
</ul>


<p>v15.5はバグフィックスとv16での変更点に対する準備なので、可能ならあげておいた方がスムーズにv16がリリースされた時に対応できると思います。</p>

<p>基本的には、v16で色々と廃止するための警告が主になります。
最近のバージョンと同様に、コアから必要なもの以外をどんどん削ぎ落としていく流れです。</p>

<p>この警告に対応するために、Enzymeなどでは利用するために必要なライブラリーが変更されているので更新する際には注意が必要です。</p>

<p>また、当初の予定ではv15.5がv15系の最後のリリースになる予定でしたが、上記のような混乱もあったためフォローアップとしてv15.6もリリースされることになりました。
なので、v15.6がリリースされてから対応するのもアリだと思います。</p>

<p>廃止されるものは色々ありますが、基本的に全てのものに対してマイグレーションのパスは提供されているので対応可能だと思います。
ただ、アクティブにメンテされていないくて15.5対応版をリリースしていないライブラリーを使っていると色々警告が出ると思います。
場合によっては、その警告によってテストが壊れることがあるかもしれません。</p>

<!-- more -->


<h2>Deprecated React.createClass</h2>

<p>廃止されること自体は前から言われていたので、使わないようにしていた人も多いと思いますが、<code>create-react-class</code>として別パッケージとなり、v16では<code>react</code>から削除されます。</p>

<p><code>js
import createReactClass from 'create-react-class';
</code></p>

<p>そのためv15.5では、<code>React.createClass</code>を使おうとすると警告が出ます。</p>

<p>自分の書いたコードで<code>React.createClass</code>を使っている場合は、<code>React.Component</code>を使ったComponent定義かStateless Functional Componentsに書き換える必要があります。</p>

<p>mixinを使っているなど、どうしても<code>React.createClass</code>を使いたい場合は<code>create-react-class</code>を使うこともできますが、可能な限りReact本体が提供する方法を利用する方がいいと思います。</p>

<p><code>React.createClass</code>から<code>React.Component</code>の定義に書き換えるcodemodも提供されているので、使ってみるのもいいかもしれません。</p>

<ul>
<li><a href="https://github.com/reactjs/react-codemod">https://github.com/reactjs/react-codemod</a></li>
</ul>


<p>このcodemodでは、<code>React.createClass</code>が提供するautobindを実現するために、property initializerのシンタックスを利用します。そのため、変換後は<code>babel-plugin-transform-class-properties</code>を使用する必要があります。(Stage 2)</p>

<ul>
<li><a href="http://babeljs.io/docs/plugins/transform-class-properties/">http://babeljs.io/docs/plugins/transform-class-properties/</a></li>
</ul>


<p>v16になった時点で<code>React.createClass</code>を使っているライブラリーを利用している場合には、PR送って対応してもらうか、<code>React.createClass</code>に<code>create-react-class</code>を代入するなどの対応が必要になるかもしれません。
(v15.5では、警告を出すために<code>React.createClass</code>には<code>Object.defineProperty</code>でgetterが設定されており、<code>configurable</code>でないので置き換えることはできません)</p>

<h2>Deprecated React.PropTypes</h2>

<p>これも、<code>React.createClass</code>と同様にずっと言われていましたが、<code>prop-types</code>として別パッケージとなり、v16では<code>react</code>から削除されます。</p>

<p><code>js
import PropTypes from 'prop-types';
</code></p>

<p>そのためv15.5では、<code>React.PropTypes</code>を使おうとすると警告が出るようになりました。</p>

<p>これもcodemodが提供されているので、それを使って一括で変換することができます。</p>

<ul>
<li><a href="https://github.com/reactjs/react-codemod#react-proptypes-to-prop-types">https://github.com/reactjs/react-codemod#react-proptypes-to-prop-types</a></li>
</ul>


<p>PropTypesに関しては、FlowやTypeScriptへの移行が勧められているもののハードルもあるので、別パッケージ化された<code>prop-types</code>をしばらく使い続けるのは選択肢としてあるのかなと思います。
今回別パッケージとなったのは組み込みのPropTypesのvalidationロジックであり、PropTypesのチェック機構自体がなくなることは、まだ予定されていないので。</p>

<p>ちなみに、将来的にAPIの変更が予定されているContextを使う場合にも、変わらず<code>prop-types</code>を使って指定します。
（実際には<code>contextTypes</code>の定義でマスクしているだけなので、<code>prop-types</code>を使う必要はないのですが）</p>

<h2>Deprecated Addons</h2>

<p>React本体がアドオンとして提供していた諸々が、廃止されたり別パッケージ化したり、移動したりしています。
v16では、<code>react-with-addons</code>のUMDビルドも提供されなくなります。</p>

<ul>
<li><code>react-addons-create-fragment</code>は、v16のFiber化により配列を返すことができるようになるため、多くの場面で不要となるので削除されます。</li>
<li><code>react-addons-css-transition-group</code>と<code>react-addons-transition-group</code>は、<code>react-transition-group</code>の別パッケージになりました。<code>CSSTransitionGroup</code>と<code>TransitionGroup</code>して利用できます。ただし、全く実装が一緒というわけではないので移行する際には注意が必要です。すでに修正済みですが下記のようなバグとかもあったりするので&hellip;。

<ul>
<li><a href="https://github.com/reactjs/react-transition-group">https://github.com/reactjs/react-transition-group</a></li>
<li><a href="https://github.com/reactjs/react-transition-group/pull/13">https://github.com/reactjs/react-transition-group/pull/13</a></li>
</ul>
</li>
<li><code>react-addons-linked-state-mixin</code>と<code>react-linked-input</code>は、明示的に<code>value</code>と<code>onChange</code>を指定すればいいので削除されます。</li>
<li><code>react-addons-pure-render-mixin</code>と<code>react-addons-shallow-compare</code>は、<code>React.PureComponent</code>を代わりに利用できます。</li>
<li><code>react-addons-update</code>は<code>immutability-helper</code>が代わりに利用できます。

<ul>
<li><a href="https://github.com/kolodny/immutability-helper">https://github.com/kolodny/immutability-helper</a></li>
</ul>
</li>
</ul>


<p><code>react-addons-test-utils</code>は、<code>react-dom</code>のrendererに依存している部分が多いため、<code>react-dom/test-utils</code>に移動されました。</p>

<p><code>js
import TestUtils from 'react-dom/test-utils';
</code></p>

<p>ShallowRenderに関しては<code>react-dom</code>に依存していないため、<code>react-test-renderer/shallow</code>に移動されました。
ちなみに<code>react-test-renderer</code>はJestがsnapshot testingで使っていたりする、ReactElementをJSONとして返すrendererです。
ShallowRenderは、これのトップレベルのComponentまでしかrenderしない版として考えることができます。</p>

<p><code>js
import {createRenderer} from 'react-test-renderer/shallow';
</code></p>

<p><del><code>react-addons-perf</code>だけは、特に何もなくこのままですが、<code>react-addons-perf</code>は同期的なrenderが前提となっているため、将来的にFiberで非同期的なrenderをする場合には正しく計測できません。</del></p>

<p><strong>[修正]</strong> <code>react-addons-perf</code>は同期的なrenderが前提となっていてFiberへの対応が難しいため、v16(Fiber)への対応は行われません。
Perfに変わる何かについては検討されるので、将来的に何か提供される可能性もありますが、とりあえずは<code>?react_perf</code>によるBrowser Timelineを使った計測が推奨されています。</p>

<ul>
<li><a href="https://facebook.github.io/react/docs/optimizing-performance.html#profiling-components-with-chrome-timeline">https://facebook.github.io/react/docs/optimizing-performance.html#profiling-components-with-chrome-timeline</a></li>
</ul>


<h2>15.6（予定）</h2>

<p><a href="https://github.com/facebook/react/issues/9398">https://github.com/facebook/react/issues/9398</a></p>

<ul>
<li><code>React.DOM.{p, div,...}</code>として提供されていたファクトリ関数が廃止となります。</li>
<li>APIの廃止などの警告は、これまでは<code>console.error</code>として出力されていましたが、<code>console.warn</code>で出力されるようになります。</li>
</ul>


<h2>16に向けて</h2>

<p>v16はすでに<code>@next</code>でインストールできます。
そのため、まだ実装されていないサーバーサイドレンダリングとShallowRenderを使っていない部分では試すことが可能です。</p>

<p><code>
npm i react@next react-dom@next
</code></p>

<h3>Fiber</h3>

<p>v16の一番大きな目玉は、Fiberに内部実装が置き換えられることです。
ただし、v16の時点ではFiberは現在のStackのrendererと互換性のあるモードで動作します。
そのため、Fiberの特徴である<code>requestIdleCallback</code>によってスケジューリングされた非同期なrenderではなく、同期的なrenderとなるため、利用者として大きな違いは感じないかもしれません。
（call stack見ると全く変わっていることがわかると思いますが）</p>

<p>文字列や配列をComponentでラップすることなく直接返すことができるのは嬉しい部分かもしれません。</p>

<p><code>js
const Text = ({text}) =&gt; text;
const List = () =&gt; [1, 2, 3];
</code></p>

<p>ちなみに、v16の時点でも<code>ReactDOM.unstable_deferredUpdates</code>を使うことで、非同期なrenderが出来るようにはなりそうです。
あとは、<code>ReactDOMFiber.js</code>にある<code>useSyncScheduling</code>というフラグを無理やり<code>false</code>にすればデフォルトで非同期なrenderになります。（軽く試した感じだと問題なく動いていた）</p>

<p>非同期のrenderをどのようにユーザー側のAPIとして見せるのかは、まだ明らかになっていなくてこれから議論していくようです。</p>

<p>Fiberについては、下記に集めたリソースを読むとわかると思います。（今後紹介的な何かを書くかも）</p>

<ul>
<li><a href="https://github.com/koba04/react-fiber-resources">https://github.com/koba04/react-fiber-resources</a></li>
</ul>


<p>最初に見るものとしてのおすすめは、Lin ClarkによるA Cartoon Intro to Fiber(React.js Conf 2017)です。</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ZCuYPiUIONs?ecver=1" frameborder="0" allowfullscreen></iframe>


<p>互換モードによるFiber自体はfacebook.comでも問題なく動作しているようです。
ただし、サーバーサイドレンダリングに対する対応は、まだ全く入っておらず今後どうなっていくのかは不明です。FiberになるとStreaming renderingもやりやすくなるのではとは思いますが。</p>

<h3>No more direct import!</h3>

<p>v16からは、それぞれのエントリーポイントがRollupを使ってバンドルされたものになります。
なので下のような構造になります。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">react@next and react-dom@next are flat bundles! 👀 <a href="https://twitter.com/hashtag/reactjs?src=hash">#reactjs</a> <a href="https://t.co/5ezjjf08sd">pic.twitter.com/5ezjjf08sd</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/850180571653222400">April 7, 2017</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>これにより、初期ロード時間の短縮やサーバーサイドでのパフォーマンスの向上が見込まれています。
また、利用者側には関係ないですがビルド周りが見直されており、GruntやgulpやBrowserifyのタスクがリポジトリから削除されています。すっきり。</p>

<p>この変更による、一番大きな影響は<code>react/lib/xxxx</code>として直接Reactの内部ライブラリを利用しているライブラリが動作しなくなることです。
<code>enzyme</code>などのメジャーなライブラリはReact側でもケアされていますが、それ以外のライブラリーは壊れてどうにもならなくなることがあるかもしれません。
したがって、そのようなハックをしているライブラリーを利用している場合は注意した方がよさそうです。</p>

<h3>リリース？</h3>

<p>ちなみにv16は、夏くらい(?)をターゲットに考えているようです。</p>

<p>また何か動きがあれば追記するかも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.12]]></title>
    <link href="http://blog.koba04.com/post/2016/09/30/reactjs-links-vol12/"/>
    <updated>2016-09-30T14:00:10+09:00</updated>
    <id>http://blog.koba04.com/post/2016/09/30/reactjs-links-vol12</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.3.2</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.3.2">https://github.com/facebook/react/releases/tag/v15.3.2</a></li>
</ul>


<p>React v15.3.2がリリースされています。
細かなバグフィックスなどが中心です。</p>

<h2>Our First 50,000 Stars</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/09/28/our-first-50000-stars.html">https://facebook.github.io/react/blog/2016/09/28/our-first-50000-stars.html</a></li>
</ul>


<p>ReactのGitHubでのstarが50,000を超えたことを記念するエントリーです。
Reactの前にはFaxJSというのがあって〜など、Reactが誕生するまでの流れの話などとても面白いです。</p>

<h2>Codebase Overview</h2>

<ul>
<li><a href="https://facebook.github.io/react/contributing/codebase-overview.html">https://facebook.github.io/react/contributing/codebase-overview.html</a></li>
</ul>


<p>React本体のコードについての解説です。
Reactを使う人にとってはほとんど知る必要のないことですが、contributeしたい場合にはとても役に立つドキュメントです。
特に<code>Haste</code>とというCommonJSではないFacebook独自のモジュールシステムを使っていたりするので&hellip;。
最初からこれがあれば&hellip;。</p>

<h2>If TypeScript is so great, how come all notable ReactJS projects use Babel?</h2>

<ul>
<li><a href="https://discuss.reactjs.org/t/if-typescript-is-so-great-how-come-all-notable-reactjs-projects-use-babel/4887">https://discuss.reactjs.org/t/if-typescript-is-so-great-how-come-all-notable-reactjs-projects-use-babel/4887</a></li>
</ul>


<p>TypeScriptが最高なら、どうしてReact周りのプロジェクトはみんなBabelを使っているの？という疑問に対するスレッドです。
FlowTypeとTypeScriptの違いなどの話も登場して面白いです。</p>

<h2>Redux Patterns and Anti-Patterns</h2>

<ul>
<li><a href="https://tech.affirm.com/redux-patterns-and-anti-patterns-7d80ef3d53bc">https://tech.affirm.com/redux-patterns-and-anti-patterns-7d80ef3d53bc</a></li>
</ul>


<p>Reduxでのアンチパターンについての記事です。
Immutable.jsと組み合わせた場合や、redux-thunkでのAPIアクセスの書き方について解説されています。</p>

<h2>You Might Not Need Redux</h2>

<ul>
<li><a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367">https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367</a></li>
</ul>


<p>Dan Abramov自身によるエントリーで、何も考えずにとりあえずRedux使うのをやめようという記事です。</p>

<h2>Declarative Routing for React</h2>

<ul>
<li><a href="https://react-router-website-uxmsaeusnn.now.sh/">https://react-router-website-uxmsaeusnn.now.sh/</a></li>
</ul>


<p>react-router v4についてのページです。
react-routerでは、Reactのためのルーティングライブラリーではなく、Reactを使ったルーティングライブラリーになっています。
そのため、<code>Match</code>や<code>Redirect</code>といったComponentが登場しており、議論を呼びそうな感じの変わり方をしています。
（反応を見ていると、概ねポジティブに捉えられているのがビックリですが）</p>

<h2>AMA with Redux</h2>

<ul>
<li><a href="https://hashnode.com/ama/with-redux-cisteui6p005gzx53fstg8t6l">https://hashnode.com/ama/with-redux-cisteui6p005gzx53fstg8t6l</a></li>
</ul>


<p>Reduxの作者であるDan Abramovと初期からの開発者であるAndrew ClarkによるAMAです。
Reduxについての実際に作った人たちの考えが説明されているので、興味のある人は読むといいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js meetup #4]]></title>
    <link href="http://blog.koba04.com/post/2016/09/30/reactjs-meetup-vol4/"/>
    <updated>2016-09-30T13:56:56+09:00</updated>
    <id>http://blog.koba04.com/post/2016/09/30/reactjs-meetup-vol4</id>
    <content type="html"><![CDATA[<p>前回が2月だったので約半年振りですが、React.js meetup #4を開催しました。</p>

<ul>
<li><a href="http://reactjs-meetup.connpass.com/event/39793/">http://reactjs-meetup.connpass.com/event/39793/</a></li>
</ul>


<p>今回は <strong>67/80人</strong> の方が参加してくださりました！感謝！</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">たくさんの方に参加してもらって感謝！！ <a href="https://twitter.com/hashtag/reactjs_meetup?src=hash">#reactjs_meetup</a> <a href="https://t.co/1tTO5gKDxP">pic.twitter.com/1tTO5gKDxP</a></p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/780747386251415552">September 27, 2016</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>今回も、前回同様にサイボウズさんに会場を提供して頂き開催することができました。
 サイボウズの皆様、参加者の皆様、発表者の皆様ありがとうございました！！</p>

<!-- more -->


<h2>本編</h2>

<p>今回はメインのTalk(20min)が4本、LT(10min)が4本とかなり多く、さらにそれぞれのTalkもかなり濃かったので、その場では消化しきれなかった方も多かったのではないでしょうか。
資料も公開されているので、是非見返してみてください。</p>

<ul>
<li><a href="http://reactjs-meetup.connpass.com/event/39793/presentation/">http://reactjs-meetup.connpass.com/event/39793/presentation/</a></li>
</ul>


<p>Tweetはここにまとめてあります。</p>

<ul>
<li><a href="http://togetter.com/li/1029915">http://togetter.com/li/1029915</a></li>
</ul>


<p>さらに今回は、直前に<a href="https://twitter.com/cpojer">@cpojer</a>さんから、ちょうど日本にいるタイミングなので参加したいという連絡があり、急遽JestについてのLTをしてもらいました。</p>

<p>Jestは、最近になってものすごい勢いで開発されていて、全く別のライブラリーと言えるくらい進化しているので、それを紹介できる機会になってよかったなぁと思っています。</p>

<ul>
<li><a href="http://facebook.github.io/jest/">http://facebook.github.io/jest/</a></li>
</ul>


<p>後、これまでは先着での受付にしていたのですが、すぐに埋まってしまうので今回は抽選にしました。
Twitterのpollを見る感じでも、抽選の方がよさそうですね。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">ちなみに次回 <a href="https://twitter.com/hashtag/reactjs_meetup?src=hash">#reactjs_meetup</a> やるとしたら、募集方法は抽選と先着のどちらがいいですか？</p>&mdash; Toru Kobayashi (@koba04) <a href="https://twitter.com/koba04/status/780705408335753222">September 27, 2016</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>React.js meetupについて</h2>

<p>そういえば、React.js meetupをどんな感じでやっているかを書いてなかったので、少しだけ書いてみます。</p>

<p>React.js meetupは、メインのTalkは全てこちらからお願いして決めています。
<a href="https://twitter.com/koba04">@koba04</a> が個人的に聞きたいものや多くの人が関心のありそうなテーマから選んでいます。
それを普段からアウトプットしている方にお願いしています。</p>

<p>その結果、React.js meetupはクオリティの高いTalkが聞ける場だと思ってもらえていたら嬉しいなと思っています。</p>

<p>LTは、新しい発見の場として募集で受付けています。5minだと短いので10minで。
(これはNode学園を参考にしました)</p>

<p>毎回面白いTalkが多いのでいつも楽しみにしています。</p>

<p>それを<a href="https://twitter.com/yosuke_furukawa">@yosuke_furukawa</a>や<a href="https://twitter.com/teppeis">@teppeis</a>や<a href="https://twitter.com/yoshiko_pg">@yoshiko_pg</a>や、<a href="https://twitter.com/ama_ch">@ama_ch</a>に相談したり、会場を探したり、色々と準備を手伝ってもらいながら運営しています。</p>

<p>（<a href="http://reactjs-meetup.connpass.com/event/19504/">#2</a>に関しては、別のイベントとしてすでにあったものをReact.js meetupという名前を使う形にしたのでちょっと違いますが）</p>

<p>そんな感じで小さくやっているので、あまり規模を拡大したり、頻繁に開催するといったことは考えていません。
すでにReactに関するイベントはたくさん行なわれていると思うので。</p>

<p>基本的には、自分たちが楽しむためにやっている感じです。
聞きたいTalkを聞いて、参加者の人とディスカッションして。
（参加したけど知っている人がいないという人は是非声かけてください！）</p>

<p>実際のところ、当日は事前に懇親会の食べ物・飲み物を頼んでいたりするので参加率を気にしたり、ピザの配達状況を確認したりしているので、正直ちゃんとTalk聞けていないのですが&hellip;。</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/reactjs_meetup?src=hash">#reactjs_meetup</a> <br>yield pizza;<br><br>とのこと <a href="https://t.co/RDGQgcMKsz">pic.twitter.com/RDGQgcMKsz</a></p>&mdash; Yosuke FURUKAWA (@yosuke_furukawa) <a href="https://twitter.com/yosuke_furukawa/status/780737219464007682">September 27, 2016</a></blockquote>


<script async src="http://blog.koba04.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>次回？</h2>

<p>今のところ、特に考えていないので、何か話したいこととか、聞きたいテーマなどあれば教えてください！
今回は詰め込みすぎたので、次回はメインのTalkは2本くらいにしようと思っています。</p>

<p>来年かな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.11]]></title>
    <link href="http://blog.koba04.com/post/2016/09/07/reactjs-links-vol11d/"/>
    <updated>2016-09-07T19:26:04+09:00</updated>
    <id>http://blog.koba04.com/post/2016/09/07/reactjs-links-vol11d</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Meeting Notes</h2>

<p>7/21, 28, 8/4, 25のMeeting Noteがまとめて公開されました。</p>

<p><code>React.createClass</code>のES classes化については、引き続き進められているようで、すでに80%がES classesになったそうです。
Public Class Fieldsがstage2になったことも紹介されています。</p>

<p>その他には、<code>create-react-app</code>をリリースしたことや、そこでのJestサポートについても紹介されています。
また7/28のMeeting Noteでは、Reconcilerの位置付けについて解説されています。Reconcilerはrendererに属するものであり、react本体にはComponentやReactElementを作成する部分のみが含まれているという形です。
それにより、新しいReactFiberのReconcilerの導入もすでにあるReact Componentに手を入れることなくできるとしています。</p>

<p>（Reactの中では、完全にrenderer毎にコードが分かれているわけではなくて、共通化されている部分もありますが）</p>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-07/july-21.md">https://github.com/reactjs/core-notes/blob/master/2016-07/july-21.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-07/july-28.md">https://github.com/reactjs/core-notes/blob/master/2016-07/july-28.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-08/august-04.md">https://github.com/reactjs/core-notes/blob/master/2016-08/august-04.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-08/august-25.md">https://github.com/reactjs/core-notes/blob/master/2016-08/august-25.md</a></li>
</ul>


<h2>PATTERNS FOR STYLE COMPOSITION IN REACT</h2>

<p>CSS in JSでのパターン集です。</p>

<ul>
<li><a href="http://jxnblk.com/writing/posts/patterns-for-style-composition-in-react/">http://jxnblk.com/writing/posts/patterns-for-style-composition-in-react/</a></li>
</ul>


<h2>Strip flow-only class props without needing transform-class-properties. #3655 (Babel)</h2>

<p><code>babel-plugin-transform-flow-strip-types</code>でtype annotationのためだけに使われているclass propertiesを削除するというPRです。
これがmergeされると、Flowのtype annotationのためだけに<code>babel-plugin-transform-class-properties</code>を追加する必要はなくなります。</p>

<ul>
<li><a href="https://github.com/babel/babel/pull/3655">https://github.com/babel/babel/pull/3655</a></li>
</ul>


<h2>exponentjs/exponent</h2>

<p>ReactEurope 2016でAndroid版の事例を紹介していたReactNativeで作られたExponentのiOS/Android版が公開されています。</p>

<ul>
<li><a href="https://github.com/exponentjs/exponent">https://github.com/exponentjs/exponent</a></li>
</ul>


<h2>react-history</h2>

<p><code>history</code>をラップしたようなReactComponentです。
<code>react-router</code>のv4はこれを使うというような話もあり、あいかわらず落ち着かない感じです&hellip;。</p>

<ul>
<li><a href="https://github.com/ReactTraining/react-history">https://github.com/ReactTraining/react-history</a></li>
</ul>


<h2>Animating in React</h2>

<p>ReactでのAnimationの方法についてのスライドです。
codepenによるサンプルも多く埋め込まれており、とてもわかりやすいです。</p>

<p>CSS、DOM、SVG、Canvasなどによるアプローチの比較や、react-motionなどライブラリーに関する解説もあり、アニメーションで悩んでいる人にはおすすめのスライドです。</p>

<ul>
<li><a href="http://slides.com/sdrasner/react-rally#/">http://slides.com/sdrasner/react-rally#/</a></li>
</ul>


<h2>Async Redux Actions With RxJS</h2>

<p>NetflixのエンジニアでRxJSの開発者であるBen Leshによる、redux-observableを使ってReduxとRxJSを組み合わせる話です。
なぜReduxにRxJSを組み合わせる必要があるのか、redux-observableにあるEpicとは何なのかということがわかりやすく解説されています。</p>

<ul>
<li><a href="http://www.slideshare.net/benlesh1/async-redux-actions-with-rxjs-react-rally-2016">http://www.slideshare.net/benlesh1/async-redux-actions-with-rxjs-react-rally-2016</a></li>
</ul>


<h2>React: Facebook&rsquo;s Functional Turn on Writing JavaScript</h2>

<p>Reactの初期の開発者であるPete Huntと、現在の開発者であるPaul O'Shannessyに対するReactに関するインタビューです。
Reactの思想などについて語られていて、面白いです。</p>

<ul>
<li><a href="http://queue.acm.org/detail.cfm?id=2994373">http://queue.acm.org/detail.cfm?id=2994373</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.10]]></title>
    <link href="http://blog.koba04.com/post/2016/08/10/react-dot-js-links-vol-dot-10/"/>
    <updated>2016-08-10T14:09:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/08/10/react-dot-js-links-vol-dot-10</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。
10回目!!!</p>

<!-- more -->


<h2>React v15.3.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.3.0">https://github.com/facebook/react/releases/tag/v15.3.0</a></li>
</ul>


<p>Reactのv15.3.0がリリースされました。</p>

<p>今回の大きな変更点は、<code>React.PureComponent</code>の追加です。
これは、PureRenderMixinのES Classes版というような実装で、自動的に<code>shouldComponentUpdate</code>にshallowEqualが適用されるというものです。
最初このPRが出された時には、内部のStateless Functional Componentにも最適化が適用されるという実装も含まれていましたが、PR内での議論で問題点などが見えたため、今回はただのPureRenderMixin for ES Claseesとして入りました。</p>

<p>今後、v16のタイミングなどでさらなる最適化が追加される可能性はあります。</p>

<p>もう一つ、大きな点は<code>react-test-render</code>というパッケージのリリースです。
これは、TestUtilsのShallowRenderと似ていますが、Shallowではなく子孫までrenderして結果をReactElementのJSONとして返します。
refやライフサイクルメソッドなどが呼ばれる点もShallowRenderとは異なります。</p>

<p>```js
import renderer from &lsquo;react-test-renderer&rsquo;;</p>

<p>const json = renderer.create(<App />).toJSON();
```</p>

<p>Jestにはこれを使ったsnapshottestが追加されました。</p>

<h2>Create Apps with No Configuration</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html">https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html</a></li>
<li><a href="https://github.com/facebookincubator/create-react-app">https://github.com/facebookincubator/create-react-app</a></li>
</ul>


<p>Reactを使ったSingle Page Applicationのひな形を作成している公式のcliがリリースされました。
これまでFacebookは自分たちが実際にプロダクトで使っているものだけをOSSにする方針でしたが、今回はコミュニティーの声に応えて作成したものです。</p>

<p>インストールして、<code>create-react-app hello-world</code>として、<code>npm start</code>すればもう開発できるのは手軽でいいですね。
また、<code>npm run eject</code>すると<code>react-scripts</code>というパッケージの内部に隠れていたwebpackの設定などが全部展開されてカスタマイズ出来るようになるのも面白いですね。</p>

<p>まだ公開されてすぐなので、<code>facebookincubator/create-react-app</code>のリポジトリが、Reactを使ったプロジェクトの構成について多くの人が意見を交わしていてなかなか混沌としています。</p>

<h2>Jest 14.0: React Tree Snapshot Testing</h2>

<ul>
<li><a href="http://facebook.github.io/jest/blog/2016/07/27/jest-14.html">http://facebook.github.io/jest/blog/2016/07/27/jest-14.html</a></li>
</ul>


<p>Jestが密かに追加されている新しいテスト用のrendererを使って、snapshot testをサポートしたという話です。
snapshot testなので、一度テストを実行するとスナップショットのファイルが作成されて、次回からはそのスナップショットとテストが一致するかどうかを判定する感じです。</p>

<p>その他にもReactNativeのサポートや、今後の予定(Jasmine捨てる)などが書かれています。</p>

<h2>React.js in patterns</h2>

<ul>
<li><a href="http://krasimirtsonev.com/blog/article/react-js-in-design-patterns">http://krasimirtsonev.com/blog/article/react-js-in-design-patterns</a></li>
</ul>


<p>High Order ComponentsやContextをDIなど、Reactのパターン集です。</p>

<h2>Function as Child Components</h2>

<ul>
<li><a href="https://medium.com/@iammerrick/function-as-child-components-5f3920a9ace9#.bnfwsk5un">https://medium.com/@iammerrick/function-as-child-components-5f3920a9ace9#.bnfwsk5un</a></li>
</ul>


<p>公式のブログでも言及されて、広く使われるようになったHigh Order Components(HOC)ですが、HOCではなくてchildrenに関数を渡すFunction as Child Componentsのパターンの方が有効ではないかとエントリーです。</p>

<p>Function as Child Componentsにすることで、不要なComponentのラッピングをなくすことが出来たり、Propsの衝突を避けることも容易だとしています。</p>

<h2>Use RxJS with React</h2>

<ul>
<li><a href="http://michalzalecki.com/use-rxjs-with-react/">http://michalzalecki.com/use-rxjs-with-react/</a></li>
</ul>


<p>RxJSを使ってReduxライクな状態管理を行う方法についてのエントリーです。</p>

<h2>How to handle state in React. The missing FAQ.</h2>

<ul>
<li><a href="https://medium.com/react-ecosystem/how-to-handle-state-in-react-6f2d3cd73a0c">https://medium.com/react-ecosystem/how-to-handle-state-in-react-6f2d3cd73a0c</a></li>
</ul>


<p>Reactを学ぶ時に最初からReduxなどを使うのではなくて、ReactのStateから始めようってことで、Stateを扱う方法についてエントリーです。</p>

<h2>Redux vs MobX vs Flux vs&hellip; Do you even need that?</h2>

<ul>
<li><a href="http://goshakkk.name/redux-vs-mobx-vs-flux-etoomanychoices/">http://goshakkk.name/redux-vs-mobx-vs-flux-etoomanychoices/</a></li>
</ul>


<p>上記のエントリーと同じように、まずはReactだけで始めて必要になったらReduxやMobXについて検討しましょうというエントリーです。
Reactだけだと何が辛くて、何を解決するためにReduxなどのライブラリーを使うのかを理解してないと、ただ覚えることが増えたみたいに感じるということはありそうです。</p>

<h2>A STEP-BY-STEP TDD APPROACH ON TESTING REACT COMPONENTS USING ENZYME</h2>

<ul>
<li><a href="http://thereignn.ghost.io/a-step-by-step-tdd-approach-on-testing-react-components-using-enzyme/">http://thereignn.ghost.io/a-step-by-step-tdd-approach-on-testing-react-components-using-enzyme/</a></li>
</ul>


<p>Enzymeを使って、React ComponentをTDDでテストを書いていく方法についてのエントリーです。
TDDの流れに沿って順番にテストを書いていく方法が丁寧に解説されています。</p>

<h2>The Problem with CSS-In-JS, circa Mid-2016</h2>

<ul>
<li><a href="https://medium.com/@taion/the-problem-with-css-in-js-circa-mid-2016-14060e69bf68#.ndfajua3p">https://medium.com/@taion/the-problem-with-css-in-js-circa-mid-2016-14060e69bf68#.ndfajua3p</a></li>
</ul>


<p>CSS in JSやCSS ModulesのようなComponentに閉じたCSSを使う場合の問題点についてのエントリーです。
コンテキストによるスタイルの違いを、CSSがそれぞれ独立している中でどのようにComponentとして表現するかという内容です。</p>

<h2>React Native at SoundCloud</h2>

<ul>
<li><a href="https://developers.soundcloud.com/blog/react-native-at-soundcloud">https://developers.soundcloud.com/blog/react-native-at-soundcloud</a></li>
</ul>


<p>SoundCloudがReactNativeでSoundCloud Purseのアプリを作った時の話です。
なぜReactNativeを使ったのか、実際使ってみてどうだったのかが書かれています。</p>

<h2>A Glimpse Into The Future With React Native For Web</h2>

<ul>
<li><a href="https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/">https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/</a></li>
</ul>


<p><code>react-native-web</code>の現状についてのエントリーです。
基本的には、まだプロダクションで使うレベルにはなっていないけど今後に期待という感じです。</p>

<h2>React Fiber Architecture</h2>

<ul>
<li><a href="https://github.com/acdlite/react-fiber-architecture">https://github.com/acdlite/react-fiber-architecture</a></li>
</ul>


<p>現在実装が進められているReact内部のアルゴリズムであるReact Fiberについてのエントリーです。
詳細については書かれていませんが、導入としては良さそうです。</p>

<p>ちなみにacdliteさんは、今setStateのReact Fiber対応をやっています。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/7344">https://github.com/facebook/react/pull/7344</a></li>
</ul>


<h2>Internationalization in React</h2>

<ul>
<li><a href="https://medium.freecodecamp.com/internationalization-in-react-7264738274a0#.33osi3w58">https://medium.freecodecamp.com/internationalization-in-react-7264738274a0#.33osi3w58</a></li>
</ul>


<p><code>react-intl</code>を使ったReactを使ったアプリケーションでのi18n対応についてのエントリーです。</p>

<h2>Flow: Mapping an object</h2>

<ul>
<li><a href="https://medium.com/@thejameskyle/flow-mapping-an-object-373d64c44592#.xm62m8pic">https://medium.com/@thejameskyle/flow-mapping-an-object-373d64c44592#.xm62m8pic</a></li>
</ul>


<p>Flowでどのように型付けをしていけばいいのかということを、<code>map-obj</code>に型付けしていきながら解説しているエントリーです。
わかりやすいです。</p>
]]></content>
  </entry>
  
</feed>
