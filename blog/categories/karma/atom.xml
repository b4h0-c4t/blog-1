<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: karma | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/karma/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2016-03-09T13:38:07+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up minimum single page application]]></title>
    <link href="http://blog.koba04.com/post/2015/03/19/setting-up-minimum-single-page-application/"/>
    <updated>2015-03-19T18:54:49+09:00</updated>
    <id>http://blog.koba04.com/post/2015/03/19/setting-up-minimum-single-page-application</id>
    <content type="html"><![CDATA[<p>React.jsなどを試そうとするときに、browserify? gulp? grunt? webpack? どれ使えばいいのとか、テストは何を使えばいいのかとかよくわからないというのをたまに聞くので、最低限の設定だけどES6で書けたりautobuildやlivereloadが出来る構成のサンプルを作ってみました。</p>

<p>あと、テストはkarma + mocha + power-assertでchromeでテスト出来るようにしています。</p>

<!-- more -->


<p>本当はpackage.jsonだけにしたかったのですがkarmaの設定だけは別ファイルになってます&hellip;。
テストが必要ない場合は、package.jsonの指定だけで大丈夫です。</p>

<ul>
<li><a href="https://github.com/koba04/minimum-spa-boilerplate">https://github.com/koba04/minimum-spa-boilerplate</a></li>
</ul>


<p>git cloneして<code>npm install</code>して<code>npm start</code>すればいいだけの設定になっています。</p>

<p><code>
git clone git@github.com:koba04/minimum-spa-boilerplate.git
npm install
npm start
</code></p>

<p><img src="http://i.gyazo.com/f906464bfb325437c5c905f80a5b976d.gif" alt="gif" /></p>

<h2>概要</h2>

<h3>tree</h3>

<p><code>
➜  tree -L 1
.
├── README.md
├── index.js         // エントリーポイント
├── karma.conf.js    // karmaの設定
├── lib              // ソース
├── node_modules
├── package.json     // 設定はこの中
├── public           // document root
└── test             // テスト
</code></p>

<h3>package.json</h3>

<p>基本的には<code>npm init</code>で作ったものに色々インストールしてnpm scriptの設定をしているだけです。</p>

<p>```json
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"build": "NODE_ENV=production browserify index.js -t babelify | uglifyjs &gt; public/bundle.js",
"watch": "watchify -d index.js -t babelify -o public/bundle.js -v",
"server": "browser-sync start --server public --files public/**/*",
"test": "karma start",
"start": "npm run watch &amp; npm run server &amp; npm test"
</code></pre>

<p>  },</p>

<p>  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"react": "^0.13.1"
</code></pre>

<p>  },
  &ldquo;devDependencies&rdquo;: {</p>

<pre><code>"babelify": "^5.0.4",
"browser-sync": "^2.3.1",
"browserify": "^9.0.3",
"espowerify": "^0.10.0",
"karma": "^0.12.31",
"karma-browserify": "^4.0.0",
"karma-chrome-launcher": "^0.1.7",
"karma-cli": "0.0.4",
"karma-mocha": "^0.1.10",
"mocha": "^2.2.1",
"power-assert": "^0.10.2",
"uglify-js": "^2.4.17",
"watchify": "^2.4.0"
</code></pre>

<p>  }
```
<a href="https://github.com/koba04/minimum-spa-boilerplate/blob/master/package.json">https://github.com/koba04/minimum-spa-boilerplate/blob/master/package.json</a></p>

<ul>
<li><code>npm run build</code></li>
</ul>


<p>これはReactに依存したビルドになっているのですが、production用にビルドされたファイルを生成することを想定しています。</p>

<ul>
<li><code>npm run watch</code></li>
</ul>


<p>watchifyによってファイルが変更されたら自動的にbrowserifyのビルドが走るようになっています。
watchifyはキャッシュするので二回目以降のビルドが高速化されるのもポイントです。</p>

<ul>
<li><code>npm run server</code></li>
</ul>


<p>BrowserSyncによって<code>public</code>をrootにしたserverを立ちあげつつ、<code>public</code>以下のファイルを監視してlivereloadするようになっています。</p>

<ul>
<li><code>npm test</code></li>
</ul>


<p>テストはkarmaを使うので<code>karma start</code>しているだけです。<code>karma</code>の設定は<code>karma.conf.js</code>にあります。</p>

<ul>
<li><code>npm start</code></li>
</ul>


<p>上記のweatchとbrowserとtestをまとめて実行するコマンドで、これだけ実行すれば開発を始められるようになっています。</p>

<h3>karma</h3>

<p>karmaは<code>karma init</code>で対話的に作成出来る<code>karma.conf.js</code>にbrowserifyの設定を追加したくらいです。</p>

<p>```js
// frameworks to use
// available frameworks: <a href="https://npmjs.org/browse/keyword/karma-adapter">https://npmjs.org/browse/keyword/karma-adapter</a>
frameworks: [&lsquo;mocha&rsquo;, &lsquo;browserify&rsquo;],</p>

<p>// list of files / patterns to load in the browser
files: [
  &lsquo;test/<em>*/</em>.js&rsquo;
],</p>

<p>// list of files to exclude
exclude: [
],</p>

<p>// preprocess matching files before serving them to the browser
// available preprocessors: <a href="https://npmjs.org/browse/keyword/karma-preprocessor">https://npmjs.org/browse/keyword/karma-preprocessor</a>
preprocessors: {
  &lsquo;test/<em>*/</em>.js&rsquo;: &lsquo;browserify&rsquo;
},</p>

<p>browserify: {
  debug: true,
  transform: [</p>

<pre><code>"babelify",
"espowerify"
</code></pre>

<p>  ]
},
```</p>

<p>karmaについては以前にも書いたのでそちらも。</p>

<ul>
<li><a href="http://blog.koba04.com/post/2014/06/23/karma-for-javascript-test-runner/">http://blog.koba04.com/post/2014/06/23/karma-for-javascript-test-runner/</a></li>
</ul>


<p>今回はカジュアルさを優先したので設定していませんが、travis-ciを使いたい場合は、<code>karma-phantomjs-launcher</code>を入れて<code>npm test</code>でPhantomJSで実行出来るようにすればOKだと思います。</p>

<h3>Code</h3>

<p>コードはこんな感じで書けます。</p>

<p>```js
import React from &lsquo;react&rsquo;;</p>

<p>export default class App extends React.Component {
  render() {</p>

<pre><code>return &lt;div&gt;Hello World&lt;/div&gt;;
</code></pre>

<p>  }
}
```
<a href="https://github.com/koba04/minimum-spa-boilerplate/blob/master/lib/components/app.js">https://github.com/koba04/minimum-spa-boilerplate/blob/master/lib/components/app.js</a></p>

<h3>Test</h3>

<p>テストはこんな感じ</p>

<p>```js
import assert from &lsquo;power-assert&rsquo;;
import React from &lsquo;react/addons&rsquo;;
import App from &lsquo;../../lib/components/app&rsquo;;</p>

<p>const {TestUtils} = React.addons;</p>

<p>describe(&ldquo;App&rdquo;, () => {
  let component;</p>

<p>  beforeEach(() => {</p>

<pre><code>component = TestUtils.renderIntoDocument(&lt;App /&gt;);
</code></pre>

<p>  });</p>

<p>  it(&ldquo;returns Hello World in div&rdquo;, () => {</p>

<pre><code>const div = TestUtils.findRenderedDOMComponentWithTag(component, 'div');
assert(
  React.findDOMNode(div).textContent
  ===
  'Hello World'
);
</code></pre>

<p>  });
});
```</p>

<h2>おまけ</h2>

<h3>karma-browserify + power-assert + babel</h3>

<p>npm scriptでbrowserifyとwatchifyの引数に<code>babelify</code>を指定していますが、本当は↓のようにbrowserifyのtransformフィールドにだけ指定してkarmaには<code>espowerify</code>だけを指定したいところなのですが、<code>karma-browserify</code>に指定するtransformはbrowserifyにoptionとしてそのまま渡されるのではなくて事前にtransformするので、<code>espowerify</code>が<code>babelify</code>される前のコードを対象としてしまいエラーになります&hellip;。</p>

<p>なのでここでは、それぞれに個別に設定する形になっています&hellip;。
レアケースですがなんとかしたいなぁと思いつつ&hellip;。</p>

<p>```
&ldquo;browserify&rdquo;: {
  &ldquo;transform&rdquo;: [</p>

<pre><code>["babelify"]
</code></pre>

<p>  ]
}
```</p>

<hr />

<p>そこそこカジュアルな感じになっているかなぁと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Release karma-say-reporter]]></title>
    <link href="http://blog.koba04.com/post/2014/06/29/release-karma-say-reporter/"/>
    <updated>2014-06-29T01:14:36+09:00</updated>
    <id>http://blog.koba04.com/post/2014/06/29/release-karma-say-reporter</id>
    <content type="html"><![CDATA[<p>最近karmaを使っているのもあって、karma-say-reporterっていうのをリリースしました。</p>

<p><a href="https://www.npmjs.org/package/karma-say-reporter">https://www.npmjs.org/package/karma-say-reporter</a></p>

<!-- more -->


<p>karmaでテストの結果によって通知するものとしては、<a href="https://www.npmjs.org/package/karma-mp3-reporter">karma-mp3-reporter</a>というものがありますが、好きな言葉を指定したいということでOSXにあるsayコマンドで結果を通知してくれるものです。</p>

<h2>Config</h2>

<p>こんな感じでreportersにsayを追加して、successとfailのときのメッセージを指定出来るようになっています。また、sayコマンドの-vで指定出来るvoiceの種類も設定出来るようになっています。</p>

<p>```js
// karma.conf.js
module.exports = function(config) {
  config.set({</p>

<pre><code>reporters: ['progress', 'say'],

sayReporter: {
  success: "test all successs",
  fail: "test failed",
  voice: "Agnes"
}
</code></pre>

<p>  });
};
```</p>

<h2>Kyoko for Japanese</h2>

<p>デフォルトだと日本語を指定することが出来ないのですが、環境設定の「音声入力と読み上げ」からKyokoさんを追加すれば日本語を指定できるようになるので、Kyokoさんを追加した後に下記のように設定することで日本語で通知することも出来ます。</p>

<p>```js
// karma.conf.js
module.exports = function(config) {
  config.set({</p>

<pre><code>reporters: ['progress', 'say'],

sayReporter: {
  success: "やったね",
  fail: "テストこけてるで",
  voice: "Kyoko"
}
</code></pre>

<p>  });
};
```</p>

<h2>Linux&hellip;</h2>

<p>ソース見てもらえれば分かる通り、voiceを覗いてはただsayコマンドに渡してるだけなので、独自にsayコマンドを定義してあげれば多分動くと思います。</p>

<p>なので汎用的なreporterとしても使えるかもしれないです。</p>

<h2>Enjoy!</h2>

<p>Karmaのpluginはまだ未開の地な感があるのでいろんなplugin作っていくと楽しくテスト書けそうでいいですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Karma for JavaScript test runner]]></title>
    <link href="http://blog.koba04.com/post/2014/06/23/karma-for-javascript-test-runner/"/>
    <updated>2014-06-23T00:48:32+09:00</updated>
    <id>http://blog.koba04.com/post/2014/06/23/karma-for-javascript-test-runner</id>
    <content type="html"><![CDATA[<p><img src="/images/karma.png" title="&lsquo;karma&rsquo;" ></p>

<p>今まではなんとなくtestemを使っていたのですが、Karmaを検討する必要があったので試してみました。</p>

<p>サンプルの設定などは↓で見ることが出来ます。</p>

<ul>
<li><a href="https://github.com/koba04/backbone-boilerplate">https://github.com/koba04/backbone-boilerplate</a></li>
</ul>


<!-- more -->


<h2>testem to karma</h2>

<p>これまでは業務でもtestemを使っていて、テストの数が少ないうち(1000以下)は問題なかったのですが、
段々テストが増えてくるとCPU100%になってテストが走るブラウザが固まることが増えてきて辛い感じになってきました。</p>

<p>そんなときに下記の記事を見て同じような現象だなと思いKarmaを試してみることにしました。</p>

<ul>
<li><a href="http://developer.cybozu.co.jp/tech/?p=7089">http://developer.cybozu.co.jp/tech/?p=7089</a></li>
</ul>


<h2>Installation</h2>

<p>インストールは<strong>npm install karma</strong>するだけです。</p>

<p>globalでkarmaのコマンドが使いたい場合はgruntのように<strong>npm install -g karma-cli</strong>します。</p>

<ul>
<li>karmaはglobalに入れません。</li>
</ul>


<h2>Easy to use</h2>

<p>テストを読み込むためのHTMLを用意して色々書いたりする必要がなくて、<strong>karma init</strong>してframeworkやテスト対象のファイルを指定して、
<strong>karma start</strong>するだけで変更を監視しての自動テストを行うことが出来ます。簡単です。</p>

<h2>Configration</h2>

<p>最初の設定は、<strong>karma init</strong>することで対話的に作成することが出来て、終了すると<strong>karma.conf.js</strong>が作成されます。</p>

<p>ちなみに<strong>karma init karma.conf.coffee</strong>のように拡張子をcoffeeにして指定することでcoffeescriptで作成することも出来ます。</p>

<p>生成されたファイルはこんな感じで、使うフレームワークや対象ファイル、実行するブラウザ、出力形式、ファイルの変更を監視して自動でテストするか、テスト終了後もプロセスを残すかどうかなどを設定します。</p>

<ul>
<li>設定項目の抜粋</li>
</ul>


<p>```js
module.exports = function(config) {
  config.set({</p>

<pre><code>// ベースとなるパス
basePath: '',

// 使用するフレームワーク。ここから探せる https://npmjs.org/browse/keyword/karma-adapter
frameworks: ['mocha'],

// 読み込むファイル(テスト対象のファイルやテストファイルなど)。
files: ['js/*.js'],

// filesから除外したファイル
exclude: [],

// テストの実行前に差し込む処理。ここから探せる https://npmjs.org/browse/keyword/karma-preprocessor
preprocessors: {}

// テストの結果を出力する形式。ここから探せる https://npmjs.org/browse/keyword/karma-reporter
// 'dots'と'progress'は最初から使える
reporters: ['progress'],

// 使用するport
port: 9876,

// 出力に色を付けるか
colors: true,

// ログレベル: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
logLevel: config.LOG_INFO,

// ファイルの変更を監視してテストを自動的に実行するかどうか
autoWatch: true,

// テストするブラウザ。ここから探せる https://npmjs.org/browse/keyword/karma-launcher
browsers: ['Chrome'],

// trueにすると一回テストを実行するとプロセスが終了する
// CIのときに使ったり。
singleRun: false
</code></pre>

<p>  });
};
```</p>

<p>その他では、<strong>autoWatchBatchDelay</strong>を使うと指定したms内での変更をまとめて一つとして扱ってくれるので、監視対象のファイルが短い時間に連続して更新されて複数回テストが実行される場合は、この値を長めにするといいかもしれません(defaultは250ms)。</p>

<h2>Browsers</h2>

<p>ブラウザはChromeやSafariやPhantomJSなど色々ありますので、<strong>karma-xxx-launcher</strong>で探すことが出来ます。</p>

<h2>Frameworks</h2>

<p><strong>mocha</strong>や<strong>jasmine</strong>や<strong>qunit</strong>などの場合は<strong>karma-mocha</strong>のようにすでにadapterが用意されているので、
ここにframeworkを設定に書いてadapterをインストールするだけで使うことが出来ます。</p>

<h3>karma-mocha-debug</h3>

<ul>
<li><a href="https://github.com/maksimr/karma-mocha-debug">https://github.com/maksimr/karma-mocha-debug</a></li>
</ul>


<p><code>js
frameworks: ['mocha-debug', 'mocha'],
</code></p>

<p>testem+mochaでやっている時に、ブラウザで結果を確認してそこから指定したテストだけを再実行出来るのが便利だったので
karmaでも出来ないないかな思って調べるみると、karma-mocha-debugを使うと出来るようでした。
karmaのブラウザからdebugボタンを押してdebug.htmlを開くと見ることが出来ます。素晴らしい！</p>

<p><img src="/images/karma-mocha-debug.png" title="&lsquo;karma mocha debug&rsquo;" ></p>

<h2>Preprocessors</h2>

<p>preprocessorsを指定することで<strong>files</strong>に書いたファイルに対してテストを実行する前に処理を挟むことが出来、柔軟なテストの設定が可能です。</p>

<p>coffeescriptのコンパイルだったりbrowserifyのビルドなどで<strong>karma-xxxx-preprocessor</strong>で探すことが出来ます。</p>

<p><code>js
preprocessors: {
  '**/*.coffee': ['coffee']
}
</code></p>

<h3>karma-html2js-preprocessor</h3>

<ul>
<li><a href="https://github.com/karma-runner/karma-html2js-preprocessor">https://github.com/karma-runner/karma-html2js-preprocessor</a></li>
</ul>


<p>また、karma-html2js-preprocessorというものもあって、これを使うと指定したHTMLを<strong>window.__html__[&lsquo;name.html&rsquo;]</strong>に入れてくれるので、fixtureデータとして使うことが出来ます。アプリのテストだとどうしてもDOMが必要になるので便利です。</p>

<p><code>js
files: [
  '**/*.html'
],
preprocessors: {
  '**/*.html': ['html2js']
},
</code></p>

<p><code>coffeescript
before -&gt;
  $('body').append window.__html__['fixture.html']
</code></p>

<h2>Reporters</h2>

<p>reporterを指定することで、様々な形式でテストの結果を出力したり通知したりすることが出来ます。</p>

<p>karma-xxxx-reporterで探すことが出来て、
nyanやtapやmocha形式のような出力形式のカスタマイズ以外にも、結果をgrowlやmp3で通知したりcoverageを計測したりなどさまざまなreporterがあります。</p>

<h3>karma-nyan-reporter</h3>

<ul>
<li><a href="https://github.com/dgarlitt/karma-nyan-reporter">https://github.com/dgarlitt/karma-nyan-reporter</a></li>
</ul>


<p><code>js
reporters: ["nyan"]
</code></p>

<p>nyanの形式でテストを出力してくれるのでもっとテスト書こうという気持ちになっていいです。(バグってたのpull reqして直してもらいました&hellip;)</p>

<p><img src="/images/karma-nyan-reporter.gif" title="&lsquo;karma nyan reporter&rsquo;" ></p>

<h3>karma-growl-reporter,karma-osx-reporter</h3>

<ul>
<li><a href="https://github.com/petrbela/karma-osx-reporter">https://github.com/petrbela/karma-osx-reporter</a></li>
<li><a href="https://github.com/karma-runner/karma-growl-reporter">https://github.com/karma-runner/karma-growl-reporter</a></li>
</ul>


<p><code>js
reporters: ["growl", "osx"]
</code></p>

<p>GrowlかNotificationCenterでテストの結果を通知してくれるので便利です。</p>

<h3>karma-mp3-reporter</h3>

<p><a href="https://github.com/x2es/karma-mp3-reporter">https://github.com/x2es/karma-mp3-reporter</a></p>

<p>成功したとき、失敗したときに好きな音が流せて楽しいですね。</p>

<p>```js
reporters: [&ldquo;mp3&rdquo;]</p>

<p>mp3Reporter: {
  red: &ldquo;go-to-hell.mp3&rdquo;,
  green: &ldquo;happy.mp3&rdquo;
}
```</p>

<h3>karma-mocha-reporter</h3>

<p><a href="https://github.com/litixsoft/karma-mocha-reporter">https://github.com/litixsoft/karma-mocha-reporter</a></p>

<p>mochaの形式で出力してくれるreporterなのですが、describeとitに与える説明をObjectが持っている関数名にすると"Cannot assign to read only property"というエラーになるので注意が必要です(describe &ldquo;method名"の形式で書いていたのでハマった&hellip;)。</p>

<p>```coffeescript</p>

<h1>Error!!!!</h1>

<p>describe &ldquo;constructor&rdquo;, &ndash;>
  it &ldquo;xxxx&rdquo;, &ndash;></p>

<pre><code>...
</code></pre>

<p>```</p>

<p>原因としては、下記のようにdescriptionをpropertyとして使っているため、constructorやtoStringとかを指定すると関数が取得されて、そこにnameを追加しようとしてエラーになる感じです(use strictが指定されてるためエラーになる)。</p>

<ul>
<li><a href="https://github.com/litixsoft/karma-mocha-reporter/blob/master/index.js#L178-L182">https://github.com/litixsoft/karma-mocha-reporter/blob/master/index.js#L178-L182</a></li>
</ul>


<p>```js</p>

<pre><code>    path.reduce(function (suite, description, depth) {
        var item = suite[description] || {};
        suite[description] = item;

        item.name = description;
</code></pre>

<p>```</p>

<h2>Conclution</h2>

<p>というわけでKarmaを試したのですが、思った以上に簡単に始めることが出来て、<strong>preprocessors</strong>や<strong>reporters</strong>などの仕組みがあってプラガブルな感じがとてもいいなぁと思いました。</p>

<p>今後もっとpluginが増えていくことに期待です。</p>

<h2>おまけ</h2>

<h3>power-assert対応しました</h3>

<p>もともとbrowserifyを使っていたので、transformにespowerifyを指定してあとはテストをassertに書き換えるだけだったのでとても簡単に出来てよかったです！素晴らしい！</p>

<p>コミットログはこの辺り。 <a href="https://github.com/koba04/backbone-boilerplate/commit/2fadec43e46f99cce0d3d828c66d4b12d758f4f0">https://github.com/koba04/backbone-boilerplate/commit/2fadec43e46f99cce0d3d828c66d4b12d758f4f0</a></p>

<p><img src="/images/power-assert.png" title="&lsquo;power-assert&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
