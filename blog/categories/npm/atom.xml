<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: npm | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/npm/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2018-04-04T15:34:26+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up minimum single page application]]></title>
    <link href="http://blog.koba04.com/post/2015/03/19/setting-up-minimum-single-page-application/"/>
    <updated>2015-03-19T18:54:49+09:00</updated>
    <id>http://blog.koba04.com/post/2015/03/19/setting-up-minimum-single-page-application</id>
    <content type="html"><![CDATA[<p>React.jsなどを試そうとするときに、browserify? gulp? grunt? webpack? どれ使えばいいのとか、テストは何を使えばいいのかとかよくわからないというのをたまに聞くので、最低限の設定だけどES6で書けたりautobuildやlivereloadが出来る構成のサンプルを作ってみました。</p>

<p>あと、テストはkarma + mocha + power-assertでchromeでテスト出来るようにしています。</p>

<!-- more -->


<p>本当はpackage.jsonだけにしたかったのですがkarmaの設定だけは別ファイルになってます&hellip;。
テストが必要ない場合は、package.jsonの指定だけで大丈夫です。</p>

<ul>
<li><a href="https://github.com/koba04/minimum-spa-boilerplate">https://github.com/koba04/minimum-spa-boilerplate</a></li>
</ul>


<p>git cloneして<code>npm install</code>して<code>npm start</code>すればいいだけの設定になっています。</p>

<p><code>
git clone git@github.com:koba04/minimum-spa-boilerplate.git
npm install
npm start
</code></p>

<p><img src="http://i.gyazo.com/f906464bfb325437c5c905f80a5b976d.gif" alt="gif" /></p>

<h2>概要</h2>

<h3>tree</h3>

<p><code>
➜  tree -L 1
.
├── README.md
├── index.js         // エントリーポイント
├── karma.conf.js    // karmaの設定
├── lib              // ソース
├── node_modules
├── package.json     // 設定はこの中
├── public           // document root
└── test             // テスト
</code></p>

<h3>package.json</h3>

<p>基本的には<code>npm init</code>で作ったものに色々インストールしてnpm scriptの設定をしているだけです。</p>

<p>```json
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"build": "NODE_ENV=production browserify index.js -t babelify | uglifyjs &gt; public/bundle.js",
"watch": "watchify -d index.js -t babelify -o public/bundle.js -v",
"server": "browser-sync start --server public --files public/**/*",
"test": "karma start",
"start": "npm run watch &amp; npm run server &amp; npm test"
</code></pre>

<p>  },</p>

<p>  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"react": "^0.13.1"
</code></pre>

<p>  },
  &ldquo;devDependencies&rdquo;: {</p>

<pre><code>"babelify": "^5.0.4",
"browser-sync": "^2.3.1",
"browserify": "^9.0.3",
"espowerify": "^0.10.0",
"karma": "^0.12.31",
"karma-browserify": "^4.0.0",
"karma-chrome-launcher": "^0.1.7",
"karma-cli": "0.0.4",
"karma-mocha": "^0.1.10",
"mocha": "^2.2.1",
"power-assert": "^0.10.2",
"uglify-js": "^2.4.17",
"watchify": "^2.4.0"
</code></pre>

<p>  }
```
<a href="https://github.com/koba04/minimum-spa-boilerplate/blob/master/package.json">https://github.com/koba04/minimum-spa-boilerplate/blob/master/package.json</a></p>

<ul>
<li><code>npm run build</code></li>
</ul>


<p>これはReactに依存したビルドになっているのですが、production用にビルドされたファイルを生成することを想定しています。</p>

<ul>
<li><code>npm run watch</code></li>
</ul>


<p>watchifyによってファイルが変更されたら自動的にbrowserifyのビルドが走るようになっています。
watchifyはキャッシュするので二回目以降のビルドが高速化されるのもポイントです。</p>

<ul>
<li><code>npm run server</code></li>
</ul>


<p>BrowserSyncによって<code>public</code>をrootにしたserverを立ちあげつつ、<code>public</code>以下のファイルを監視してlivereloadするようになっています。</p>

<ul>
<li><code>npm test</code></li>
</ul>


<p>テストはkarmaを使うので<code>karma start</code>しているだけです。<code>karma</code>の設定は<code>karma.conf.js</code>にあります。</p>

<ul>
<li><code>npm start</code></li>
</ul>


<p>上記のweatchとbrowserとtestをまとめて実行するコマンドで、これだけ実行すれば開発を始められるようになっています。</p>

<h3>karma</h3>

<p>karmaは<code>karma init</code>で対話的に作成出来る<code>karma.conf.js</code>にbrowserifyの設定を追加したくらいです。</p>

<p>```js
// frameworks to use
// available frameworks: <a href="https://npmjs.org/browse/keyword/karma-adapter">https://npmjs.org/browse/keyword/karma-adapter</a>
frameworks: [&lsquo;mocha&rsquo;, &lsquo;browserify&rsquo;],</p>

<p>// list of files / patterns to load in the browser
files: [
  &lsquo;test/<em>*/</em>.js&rsquo;
],</p>

<p>// list of files to exclude
exclude: [
],</p>

<p>// preprocess matching files before serving them to the browser
// available preprocessors: <a href="https://npmjs.org/browse/keyword/karma-preprocessor">https://npmjs.org/browse/keyword/karma-preprocessor</a>
preprocessors: {
  &lsquo;test/<em>*/</em>.js&rsquo;: &lsquo;browserify&rsquo;
},</p>

<p>browserify: {
  debug: true,
  transform: [</p>

<pre><code>"babelify",
"espowerify"
</code></pre>

<p>  ]
},
```</p>

<p>karmaについては以前にも書いたのでそちらも。</p>

<ul>
<li><a href="http://blog.koba04.com/post/2014/06/23/karma-for-javascript-test-runner/">http://blog.koba04.com/post/2014/06/23/karma-for-javascript-test-runner/</a></li>
</ul>


<p>今回はカジュアルさを優先したので設定していませんが、travis-ciを使いたい場合は、<code>karma-phantomjs-launcher</code>を入れて<code>npm test</code>でPhantomJSで実行出来るようにすればOKだと思います。</p>

<h3>Code</h3>

<p>コードはこんな感じで書けます。</p>

<p>```js
import React from &lsquo;react&rsquo;;</p>

<p>export default class App extends React.Component {
  render() {</p>

<pre><code>return &lt;div&gt;Hello World&lt;/div&gt;;
</code></pre>

<p>  }
}
```
<a href="https://github.com/koba04/minimum-spa-boilerplate/blob/master/lib/components/app.js">https://github.com/koba04/minimum-spa-boilerplate/blob/master/lib/components/app.js</a></p>

<h3>Test</h3>

<p>テストはこんな感じ</p>

<p>```js
import assert from &lsquo;power-assert&rsquo;;
import React from &lsquo;react/addons&rsquo;;
import App from &lsquo;../../lib/components/app&rsquo;;</p>

<p>const {TestUtils} = React.addons;</p>

<p>describe(&ldquo;App&rdquo;, () => {
  let component;</p>

<p>  beforeEach(() => {</p>

<pre><code>component = TestUtils.renderIntoDocument(&lt;App /&gt;);
</code></pre>

<p>  });</p>

<p>  it(&ldquo;returns Hello World in div&rdquo;, () => {</p>

<pre><code>const div = TestUtils.findRenderedDOMComponentWithTag(component, 'div');
assert(
  React.findDOMNode(div).textContent
  ===
  'Hello World'
);
</code></pre>

<p>  });
});
```</p>

<h2>おまけ</h2>

<h3>karma-browserify + power-assert + babel</h3>

<p>npm scriptでbrowserifyとwatchifyの引数に<code>babelify</code>を指定していますが、本当は↓のようにbrowserifyのtransformフィールドにだけ指定してkarmaには<code>espowerify</code>だけを指定したいところなのですが、<code>karma-browserify</code>に指定するtransformはbrowserifyにoptionとしてそのまま渡されるのではなくて事前にtransformするので、<code>espowerify</code>が<code>babelify</code>される前のコードを対象としてしまいエラーになります&hellip;。</p>

<p>なのでここでは、それぞれに個別に設定する形になっています&hellip;。
レアケースですがなんとかしたいなぁと思いつつ&hellip;。</p>

<p>```
&ldquo;browserify&rdquo;: {
  &ldquo;transform&rdquo;: [</p>

<pre><code>["babelify"]
</code></pre>

<p>  ]
}
```</p>

<hr />

<p>そこそこカジュアルな感じになっているかなぁと思います。</p>
]]></content>
  </entry>
  
</feed>
