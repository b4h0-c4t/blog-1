<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: backbone.js | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/backbone-dot-js/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2014-03-25T00:04:35+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[browserify in Backbone.Marionette project]]></title>
    <link href="http://blog.koba04.com/post/2014/03/23/browserify-in-backbone-marionette-project/"/>
    <updated>2014-03-23T21:05:46+09:00</updated>
    <id>http://blog.koba04.com/post/2014/03/23/browserify-in-backbone-marionette-project</id>
    <content type="html"><![CDATA[<h2>browserify</h2>

<ul>
<li><a href="http://browserify.org/">http://browserify.org/</a></li>
</ul>


<p>browserifyはbrowser環境でもnodeのようにrequire(&lsquo;xxx&rsquo;)というスタイルで依存しているライブラリを読み込むことが出来るようになるもので、最近盛り上がってますね。</p>

<p>(Backboneなど色々なプロジェクトでbrowserifyについて議論されていたり)</p>

<p>ここでは基本的な使い方は省略して、Backbone + Marionetteなサンプルプロジェクトをbrowserify対応してみたのでその構成についてを書きたいと思います。</p>

<!-- more -->


<p>(まだ全然理解出来てないので、もっといい方法があれば教えて欲しいです)</p>

<h2>Sample Project</h2>

<ul>
<li><a href="https://github.com/koba04/backbone-boilerplate">https://github.com/koba04/backbone-boilerplate</a></li>
</ul>


<p><img src="/images/last-fm-top-tracks.png" title="&lsquo;Atrist Top Tracks by Last.FM&rsquo;" ></p>

<ul>
<li><a href="http://koba04.com/last-fm-top-tracks/">http://koba04.com/last-fm-top-tracks/</a></li>
</ul>


<p>サンプルプロジェクト過ぎると役に立たないと思うので、テストも書きつつwebアプリっぽくLast.FMのAPI使ってアーティストの人気の曲一覧を表示するようなアプリにしてみました。</p>

<p>(testling対応はIssueにしているのでそのうちやります&hellip; <a href="https://ci.testling.com/">https://ci.testling.com/</a>)</p>

<h2>grunt-browserify</h2>

<ul>
<li>Gruntfile.coffee
<code>coffeescript
  browserify:
    app:
      files: "public/js/app.js": [ "coffee/**/*.coffee", "template/**/*.hbs" ]
      options:
        ignore: ["coffee/vendor.coffee"]
        extensions: [".coffee", ".hbs"]
        transform: ["coffeeify", "hbsfy"]
        aliasMappings: [
          {
            cwd: 'coffee'
            dest: 'myapp'
            src: ['**/*.coffee']
          }
          {
            cwd: 'template'
            dest: 'template'
            src: ['**/*.hbs']
          }
        ]
        external: [
          "jquery"
          "underscore"
          "backbone"
          "backbone.marionette"
          "handlebars"
        ]
        alias: [ "hbsfy/runtime:handlebars" ]
    vendor:
      files: "public/js/vendor.js": ["coffee/vendor.coffee"]
      options:
        transform: ["coffeeify"]
        alias: [
          "jquery"
          "underscore"
          "backbone"
          "backbone.marionette"
        ]
    spec:
      files: "specs/spec.js": [ "specs/**/*.coffee" ]
      options: "&lt;%= browserify.app.options %&gt;"
</code></li>
</ul>


<h3>transform</h3>

<p>coffeescriptのcompileやhandlebarsのprecompileは、coffeeifyとhbsfyというtransformを使っています。</p>

<p>coffeescriptやhandlebarsのgrunt pluginを別途使用する必要がなくていいですね。</p>

<h3>separate files</h3>

<p>ライブラリ(vendor)とアプリ(app)のjsを分けているのは、vendor.jsはほとんど変更されることがないので毎回ビルドに含まれるのは無駄なためです。</p>

<h3>external</h3>

<p>vendor.jsのaliasで指定して、app.jsのexternalでそれを指定することでapp.js側にライブラリが含まれないようになります。</p>

<p>hbsfy/runtimeもそうしたかったのですが、どうしてもapp.js内で展開されてしまったのでapp.js内で指定しています&hellip;</p>

<h3>aliasMappings</h3>

<p>browserifyはそのファイルからの相対パスを指定する必要があるので階層が深くなってくると階層を意識するのが面倒になります。</p>

<p>そこで、aliasmappingsを使ってどこからでも同じパス指定(<strong>require &lsquo;myapp/collections/users&rsquo;</strong>)のように指定出来るようにしています。</p>

<p>```</p>

<h1>coffee/view/items/hoge.coffee</h1>

<h1>before</h1>

<p>users = require &lsquo;../../collections/users&rsquo;</p>

<h1>after (anywhere!)</h1>

<p>users = require &lsquo;myapp/collections/users&rsquo;
```</p>

<h3>???</h3>

<p>テスト用のspec.jsにアプリのjsも含まれてしまっているので、ホントはspec.jsにはテストだけが含まれてapp.jsを別に読み込むようにしたいのですがその方法がわからず・・・</p>

<ul>
<li>aliasで全部のmodelとかviewを指定すれば出来そうな気もするけどそれは面倒なのでやりたくない・・・。</li>
</ul>


<h2>Sample</h2>

<ul>
<li>App(coffee/views/layouts/top.coffee)</li>
</ul>


<p>```coffeescript
&lsquo;use strict&rsquo;</p>

<p>Backbone          = require &lsquo;backbone&rsquo;
ArtistSearchView  = require &lsquo;myapp/views/items/artist_search&rsquo;
TracksView        = require &lsquo;myapp/views/collections/tracks&rsquo;
Artist            = require &lsquo;myapp/models/artist&rsquo;
tracks            = require &lsquo;myapp/collections/tracks&rsquo;
template          = require &lsquo;template/layouts/top&rsquo;</p>

<p>module.exports = class extends Backbone.Marionette.Layout
  template: template
  regions:</p>

<pre><code>artistSearch: ".js-artist-search"
topTracks:    ".js-top-tracks"
</code></pre>

<p>  onRender: &ndash;></p>

<pre><code>@artistSearch.show new ArtistSearchView model: new Artist
@listenTo tracks, 'reset', @showTracks
</code></pre>

<p>  showTracks: &ndash;></p>

<pre><code>@topTracks.show new TracksView collection: tracks
</code></pre>

<p>```</p>

<ul>
<li>Spec(specs/views/layouts/top_spec.coffee)</li>
</ul>


<p>```coffeescript
describe &ldquo;views/layouts/top&rdquo;, &ndash;>
  expect            = require &lsquo;expect.js&rsquo;
  sinon             = require &lsquo;sinon&rsquo;
  Backbone          = require &lsquo;backbone&rsquo;
  TopView           = require &lsquo;myapp/views/layouts/top&rsquo;
  ArtistSearchView  = require &lsquo;myapp/views/items/artist_search&rsquo;
  TracksView        = require &lsquo;myapp/views/collections/tracks&rsquo;
  Artist            = require &lsquo;myapp/models/artist&rsquo;
  tracks            = require &lsquo;myapp/collections/tracks&rsquo;
  template          = require &lsquo;template/layouts/top&rsquo;</p>

<p>  view = null
  beforeEach &ndash;></p>

<pre><code>view = new TopView
</code></pre>

<p>  it &ldquo;extends Marionette.Layout&rdquo;, &ndash;></p>

<pre><code>expect(view).to.be.a Backbone.Marionette.Layout
</code></pre>

<p>  it &ldquo;template is layouts/top&rdquo;, &ndash;></p>

<pre><code>expect(view.template).to.be template
</code></pre>

<p>  describe &ldquo;onRender&rdquo;, &ndash;></p>

<pre><code>beforeEach -&gt;
  sinon.spy view, "showTracks"
  view.onRender()

it "artistSearch region has artist_search view", -&gt;
  expect(view.artistSearch.currentView).to.be.a ArtistSearchView

it "artist_search view has models/artist", -&gt;
  expect(view.artistSearch.currentView.model).to.be.a Artist

it "listenTo tracks's reset event, trigger showTracks", -&gt;
  tracks.reset []
  expect(view.showTracks.calledOnce).to.be.ok()
</code></pre>

<p>  describe &ldquo;showTracks&rdquo;, &ndash;></p>

<pre><code>beforeEach -&gt;
  view.showTracks()

it "topTracks region has tracks view", -&gt;
  expect(view.topTracks.currentView).to.be.a TracksView

it "tracks view has collections/tracks", -&gt;
  expect(view.topTracks.currentView.collection).to.be tracks
</code></pre>

<p>```</p>

<h2>Summary</h2>

<p>まだまだ情報が少ない気がしますが、依存関係を意識せずrequireでライブラリを使えるのはわかりやすくてよさそうに感じました(実装を理解するともっと便利に使えそう)。</p>

<p>npmで提供されているライブラリだけ使うのであればbowerを使わなくてよくなるのもいいなと思いました。</p>

<p>repositoryはこちら</p>

<ul>
<li><a href="https://github.com/koba04/backbone-boilerplate">https://github.com/koba04/backbone-boilerplate</a></li>
</ul>


<h2>References</h2>

<ul>
<li><a href="http://aeflash.com/2014-03/a-year-with-browserify.html">http://aeflash.com/2014-03/a-year-with-browserify.html</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
