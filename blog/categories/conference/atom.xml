<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: conference | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/conference/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2018-04-05T17:22:46+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A brief note of ReactEurope2016 sessions]]></title>
    <link href="http://blog.koba04.com/post/2016/07/15/a-brief-note-of-reacteurope2016-sessions/"/>
    <updated>2016-07-15T14:56:46+09:00</updated>
    <id>http://blog.koba04.com/post/2016/07/15/a-brief-note-of-reacteurope2016-sessions</id>
    <content type="html"><![CDATA[<p>ReactEurope 2016に行ってきて、改めてメインのTalkの動画を一通り見たので、一言解説を。</p>

<p><a href="https://www.react-europe.org/">https://www.react-europe.org/</a></p>

<!-- more -->


<h2>Day 1</h2>

<p><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa">https://www.youtube.com/playlist?list=PLCC436JpVnK09bZeayg-KeLuHfHgc-tDa</a></p>

<h2>Dan Abramov &ndash; The Redux Journey</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/uvAXVMwHJXU" frameborder="0" allowfullscreen></iframe>


<p>去年のReactEuropeでのTalkで一躍有名になり、Reactの中の人になったDan AbramovによるKeynoteです。
Reduxを発表してから何が起きたのか、何を大事にしているのかについて話しています。</p>

<p>改めてReduxのパターンを説明しつつ、ConstraintsとしてReduxが大事に考えていることについて話しています。
全体を通して、Reduxの考え方や現状がわかりやすく説明されています。</p>

<p>また、Talkの最後には新しいReduxのegghead.ioのビデオが公開されました。
これは、前回のものに比べて、より実践的な内容になっています(まだ見てないけど&hellip;)。</p>

<ul>
<li><a href="https://egghead.io/courses/building-react-applications-with-idiomatic-redux">https://egghead.io/courses/building-react-applications-with-idiomatic-redux</a></li>
</ul>


<h2>Eric Vicenti &ndash; Native Navigation for Every Platform</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/dOSwHABLvdM" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeでiOS、Android、Webの各Platform共通で使えるNavigationExperimentalについてのTalkです。</p>

<ul>
<li><a href="https://github.com/ericvicenti/navigation-rfc">https://github.com/ericvicenti/navigation-rfc</a></li>
</ul>


<p>DeeplinkやAndroidのバックボタンなど様々なActionを、ReduxのようにStateをReducerを使って宣言的に処理するアプローチです。
また、アプリの中の1機能としてNavigationを持った機能を埋め込む方法についても解説されています。</p>

<p>Navigator、NavigatorIOSと比べて、NavigationのComponentの外に状態が持てるのはよさそうです。
Reduxを使ったアプリケーションとも親和性が高そうです。</p>

<p>ReactNativeのNavigationについては下にまとまっています。</p>

<ul>
<li><a href="http://facebook.github.io/react-native/docs/navigator-comparison.html">http://facebook.github.io/react-native/docs/navigator-comparison.html</a></li>
</ul>


<h2>Lin Clark &ndash; A cartoon guide to performance in React</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-t8eOoRsJ7M" frameborder="0" allowfullscreen></iframe>


<p>Code CartoonsでおなじみのLin ClarkによるReactアプリケーションのパフォーマンスについてのTalkです。</p>

<p><a href="https://code-cartoons.com/">https://code-cartoons.com/</a></p>

<p>Reactをガッツリ使っている人は知っていることが多いと思いますが、Reactでのパフォーマンスのポイントをブラウザーのレンダリングの仕組みからReactでのレンダリングの流れまで通してわかりやすく説明しています。</p>

<h2>Krzysztof Magiera &ndash; React Native ❤ 60FPS &mdash; Improving React Native</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/qgSMjYWqBk4" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeでのアニメーションについてのTalkです。
Platform固有のNativeComponentを使ったAnimationと、LayoutAnimationとAnimated.jsを使った場合のそれぞれCons,Prosについて、パフォーマンスチューニングついてのポイントについて解説しています。</p>

<ul>
<li><a href="https://facebook.github.io/react-native/docs/animations.html">https://facebook.github.io/react-native/docs/animations.html</a></li>
<li><a href="http://facebook.github.io/react-native/docs/interactionmanager.html">http://facebook.github.io/react-native/docs/interactionmanager.html</a></li>
</ul>


<h2>Christopher Chedeau &ndash; Being Successful at Open Source</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/nRF0OVQL9Nw" frameborder="0" allowfullscreen></iframe>


<p>CSS in JSのプレゼンでもおなじみで、ReactやReactNative、css-layoutをやっているvjeuxによる、OSSを成功に導くために必要なことについてのTalkです。
テクニカルな内容ではなく、ReactをどのようにOSSとして成功させたのかということについて解説しています。
OSSのプロジェクトをやっていたり、参加したいと思っている人にとっては面白いTalkだと思います。
GitHubのIssueスタイルなプレゼンも面白いです。</p>

<p>Demo Driven Developmentという言葉も飛び出していました。</p>

<h2>Dan Schafer &ndash; GraphQL at Facebook</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/etax3aEe2dA" frameborder="0" allowfullscreen></iframe>


<p>GraphQLの基本的な概念の説明と、認証はどのように実装するのか、効果的なデータの取得方法などを実際のコードを出しながら解説したTalkです。
GraphQLには含まれていない部分で、データソースから効率的にデータを取得する方法については、Dataloaderを紹介しています。
Dataloaderを使うことで、N+1問題やオーバーフェッチングを回避しています。</p>

<ul>
<li><a href="https://github.com/facebook/dataloader">https://github.com/facebook/dataloader</a></li>
</ul>


<p>最後に、GraphQL概念として下の3つを紹介していました。</p>

<ul>
<li>Think Graphs, not Endpoints</li>
<li>Single Source of Truth</li>
<li>Thin API layer</li>
</ul>


<p>Talkの後の休憩でQ&amp;Aが盛り上がってたことが印象的でした。</p>

<h2>Jeff Morrison &ndash; A Deepdive Into Flow</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/VEaDsKyDxkY" frameborder="0" allowfullscreen></iframe>


<p>Flowの内部についてのTalkです。
FlowがどのようにJavaScriptのコードを解析しているのか、Parse(AST) 後の InferのフェーズでTypeHeapやOpenTを使ってどのように型情報を保持しているのかなど、かなりテクニカルな情報です。</p>

<p>ただ、内容自体は難しいというわけでもなく丁寧に説明されているので、面白いと思います。</p>

<p>Flowの使い方を知るのではなく、Flowがどのように型チェックを行っているのかを知りたい人にとっては面白いTalkだと思います。
OpenTを利用して複数ファイルを並列にチェックしてる話とか面白いなぁと思いました。
また、FlowGraphはDead Code Eliminationなど様々なことにも利用できるとしています。</p>

<p>個人的にはベストトークかなーという思うくらい面白かったです。Flowの内部に興味が湧きました。</p>

<h2>Mihail Diordiev &ndash; Debugging flux applications in production</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cbXLohVbzNI" frameborder="0" allowfullscreen></iframe>


<p>昨年のDan AbramovのReact Europeでのタイムトラベルのデモをさらに発展させたようなデモ中心のTalkです。</p>

<p>Redux DevTool Extensionを使ったActionとStateのexport、importやテストケースの作成の他、Remote Redux DevToolsを使い、本番でエラーや特定のActionが発生した時にActionとStateのhistoryを送信して手元で再現できるようにしています。</p>

<p>バグが起きるActionとStateをファイルに記録しておいて、記録したActionとStateを再生しながら修正するのはよさそうです。</p>

<p>また、ReduxだけでなくRxJSなどとも組み合わせて使ったり、ReactNativeやElectron環境でも使えるようです。</p>

<h2>Cheng Lou &ndash; On the Spectrum of Abstraction</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/mVVNJKv9esE" frameborder="0" allowfullscreen></iframe>


<p>ReactMotionやAnimationの話をするのかと思っていたら、ライブラリーやフレームワークなどの抽象化についてのTalkでした。</p>

<p>抽象化によるコスト、ライブラリーとフレームワークの違い、抽象化のレイヤーの違いによってどんな影響があるのか、Reactはなぜ今のようなアーキテクチャになっているのかといったことについて熱く話されています。</p>

<p>Grunt vs Gulp、React vs Templates、Immutability vs Mutability、CSS in JS vs Traditional CSSなどのわかりやすい例を用いた説明もあって面白いです。</p>

<ul>
<li>Don&rsquo;t Cover Every Use-case</li>
<li>Not DRY is Fine</li>
<li>Don&rsquo;t Be Swayed by Elegance</li>
<li>When in Doubt, Use Examples</li>
</ul>


<h2>Bertrand Karerangabo &amp; Evan Schultz &ndash; React Redux Analytics</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/MBTgiMLujek" frameborder="0" allowfullscreen></iframe>


<p>Lean Analyticsを回すにあたり、Reduxでどのように計測するのかというTalkです。
後半はSegment.ioと組み合わせて使うためのredux-segmentというライブラリーの紹介やデモです。</p>

<hr />

<h2>Day 2</h2>

<p><a href="https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof">https://www.youtube.com/playlist?list=PLCC436JpVnK0LTDKW3O_BGTZnrZ8dBAof</a></p>

<h2>Jonas Gebhardt &ndash; Evolving the Visual Programming Environment with React</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/WjJdaDXN5Vs" frameborder="0" allowfullscreen></iframe>


<p>ブラウザー上でのビジュアルプログラミングについてのデモと解説によるTalkです。
React、Flow、Redux、Immutable.js、RxJSなどを使い、データの流れをコードとビジュアルプログラミングをうまく連携させていて、とても面白いです。Flowの型情報を使って接続できる要素を可視化しているところとか。</p>

<p>ビジュアルプログラミングもただのデータの入力と出力であることがよくわかります。</p>

<h2>Bonnie Eisenman &ndash; React Native Retrospective</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/-vl57brMWNg" frameborder="0" allowfullscreen></iframe>


<p>オライリーから出ている「Learning ReactNative」の作者の人のTalkです。</p>

<ul>
<li><a href="http://shop.oreilly.com/product/0636920041511.do">http://shop.oreilly.com/product/0636920041511.do</a></li>
</ul>


<p>ReactNativeが発表されてから、今までの流れを時系列にわかりやすく説明しています。
具体的な使い方などではなくて、モバイルアプリ開発の状況やReactNativeの状況など、どのようにReactNativeが捉えられているのかがよくわかります。</p>

<p>ReactNativeに手を出してみようかと思っている人にとっては参考になると思います。</p>

<h2>Max Stoiber &amp; Nik Graf &ndash; The Evolution of React UI Development</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/0IkWuXeKPV0" frameborder="0" allowfullscreen></iframe>


<p>Hot Reloadingを使って、Componentをインタラクティブに開発していくことについてのTalkです。
紹介していたCarte Blancheというライブラリーでは、PropTypes or FlowtypeからPropデータをランダムに生成してComponentの表示を確認できるようになっています。</p>

<ul>
<li><a href="https://github.com/carteb/carte-blanche">https://github.com/carteb/carte-blanche</a></li>
</ul>


<p>また、データはファイルとして書き出されて、それを編集することでHot Reloadingで反映されるようになっています。
今は、React用でwebpackに依存していますが、様々な環境やライブラリーに対応する予定があるそうです。</p>

<p>react-storybookと似ていますが、こちらはデータをランダムに生成してくれる点などが違う点なのかなと思います。
どちらも使っていないので間違っているかもですが&hellip;。</p>

<ul>
<li><a href="https://github.com/kadirahq/react-storybook">https://github.com/kadirahq/react-storybook</a></li>
</ul>


<h2>Andrew Clark &ndash; Recomposing your React application</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/zD_judE-bXk" frameborder="0" allowfullscreen></iframe>


<p>ReactEuropeの中で数少ない、Reactに関するTalkです。
High Order Componentsとは何か、どんなユースケースがあるのか、パフォーマンスについてはどうなのかについて話されています。</p>

<p><code>
// High Order Components
(...args) =&gt; Component =&gt; EnhancedComponent
</code></p>

<p>Reduxなどを使う中で、HOCを使っている人も多いと思いますが、実際どうなっているのかやどんなことができるのかを知りたい人にとっては面白いTalkです。
また、HOCを多用した場合にComponentが深くネストした構造になり、パフォーマンスに影響を与えることについても、<code>compose</code>を使った方法やStateless Functional Componentsの場合にはその場でReactElementに展開するようにするといった方法を紹介しています。</p>

<p>実際のHigh Order Componentsの例については、本人が作っている<code>recompose</code>をみるといいと思います。</p>

<p>いかにPresentational Componentにロジックを入れないようにするかのヒントとなるTalkだと思います。</p>

<ul>
<li><a href="https://github.com/acdlite/recompose">https://github.com/acdlite/recompose</a></li>
</ul>


<h2>Tadeu Zagallo &ndash; JavaScript, React Native and Performance</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/1oL_OJ3UePU" frameborder="0" allowfullscreen></iframe>


<p>ReactNativeが起動時にJavaScriptの部分で内部でどのように高速化しているのかという話です。</p>

<p>初期化をマルチスレッド化やモジュール初期化の遅延の他、プラットフォーム固有のコードのDead Code Eliminationなど。</p>

<p>またiOSではJITが使えず、AndroidではJITが使えたけど結果的に遅いという中で、ProfileをとってParse結果をバイトコードでキャッシュして改善していく流れが解説されています。
この最適化は今のところAndroidだけでまた有効化されているわけではないようです。</p>

<p>ReactNativeの内部的な話とか、JavaScriptの最適化に興味がある人にとっては面白いTalkだと思います。</p>

<h2>Jafar Husain &ndash; Falcor: One Model Everywhere</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/nxQweyTUj5s" frameborder="0" allowfullscreen></iframe>


<p>NetflixのTechnical LeadであるJafar HusainさんによるFalcorについてのTalkです。
話すペースは速いですが、さすが話し慣れているだけあってわかりやすいです。</p>

<p><a href="https://twitter.com/jhusain">https://twitter.com/jhusain</a></p>

<p>なぜNetflixがFalcorを作ったのか、Falcorの基本的な説明から、
ReactEuropeなのでGraphQLと比較しつつ、Falcorの方がシンプルで小さく簡単に始められることを強調しています。
GraphQLのように型が必要な場合は、JSONSchemaやTypeScriptと組み合わせることも可能だと説明しています。
また、GraphQLのQueriesのアプローチとFalcorのPathsの違いについても解説しています。</p>

<p>ベタに書いたJSONデータからFalcorを使うように変えていく説明もわかりやすいです。</p>

<p>Falcorの基本を知るにはとてもいいTalkです。JSON Graphをどのように実現しているのかなど。</p>

<h2>Brent Vatne &ndash; Building li.st for Android with Exponent and React Native</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/cI9bDvDEsYE" frameborder="0" allowfullscreen></iframe>


<p>ExponentでReactNativeを使ってAndroidのアプリを作った時の話です。
Nativeのカスタムビューを作成することなくできる、かなり実践的な快適なUIを実現する方法が解説されています。</p>

<ul>
<li>UIをブロックしないスムーズなListViewを、IncrementalなRenderingにより実現した話</li>
<li>アニメーションを処理の前後で行うのではなく、同時にバックグラウンドの処理を実行することにより快適なアニメーションの実現する方法</li>
<li><code>ex-navigation</code>を使ったNavigationについて</li>
<li>ユーザーインプットについて。キーボードイベントをどのようにハンドリングするか</li>
<li>タッチやジェスチャーをどのようにハンドリングするのか</li>
</ul>


<p>ReactNativeのAndroidでの事例として貴重なTalkだと感じました。</p>

<ul>
<li><a href="https://github.com/exponentjs/">https://github.com/exponentjs/</a></li>
</ul>


<h2>Laney Kuenzel &amp; Lee Byron &ndash; GraphQL Future</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ViXL0YQnioU" frameborder="0" allowfullscreen></iframe>


<p>GraphQL TeamのメンバーによるGraphQLがオープンソースになってから起きたことと、GraphQLのこれからについてのTalkです。Keynoteっ
ぽい感じもあり、GraphQL使ってない人でも面白いTalkです。</p>

<blockquote><p>We only open source what we use</p>

<p>We release what is generally useful</p></blockquote>

<p>というFacebookの考えの中で、Facebook内で試していることをあくまでExperimentalとして紹介されています。</p>

<ul>
<li>少しでも早く最初のコンテンツを返すための工夫としての<code>@defer</code>や<code>@stream</code>ディレクティブ</li>
<li>リアルタイムアップデートを行うための<code>@live</code>ディレクティブ（プロダクションではまだ使われていない）</li>
<li>現時点ではReactiveなバックエンドを持っていないFacebookでは<code>@live</code>ディレクティブの導入も難しく、さらに複雑な依存関係の中で全ての変更を追従することが難しく、そのような状況の中でイベントベースのSubscriptionをGraphQLで実現するGraphQL Subscriptionsについて

<ul>
<li>Facebookでは、GraphQL SubscriptionsをMQTTを使って実現しているようです。</li>
<li><code>subscription</code>のキーワード自体はgraphql-jsでもサポートされているようです。pubsubの処理は自身で実装する必要がありますが。このあたりはもっと一般化された際にはオープンソースになるかも？</li>
<li>Facebooで実際に使われている規模としては、<code>150B daily subscribes</code>、<code>35B daily payload deliveries</code>、<code>〜30 subscriptions in schema</code>だそうです。</li>
<li>GraphQL Subscriptionsによって、「xxx is writing a comment&hellip;」の表示や、live video上でのlive reactionの機能など多くのことが可能になったそうです。</li>
</ul>
</li>
</ul>


<h2>Martijn Walraven &ndash; Building native mobile apps with GraphQL</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/z5rz3saDPJ8" frameborder="0" allowfullscreen></iframe>


<p>Facebookの外ではまだまだGraphQL導入の敷居が高く、その中でiOSやAndroidアプリからどのようにGraphQLを使えばいいのかというTalkです。
GraphQL Schemaを使ってクライアントでどのように型付けをするのか、RelayのようにGraphQLから取得したデータをどのように一元管理するかという内容です。
ちょっと消化不良感がありました。</p>

<ul>
<li><a href="https://medium.com/apollo-stack">https://medium.com/apollo-stack</a></li>
</ul>


<h2>Question and Answers with core team members</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/5pMDd1t2thc" frameborder="0" allowfullscreen></iframe>


<p>Sessionに登壇していたFacebookのエンジニアによるQ&amp;Aです。
ざっくりまとめると前半がGraphQLについて、後半がアーキテクチャについての話が多い印象です。</p>

<p>GraphQLについては、どのようにSQLに変換すればいいか、本編のTalkにあったGraphQL Subscriptionsについて、GraphQL Fragmentをどうやってテストするのか、バージョニングについてなどの質問がありました。</p>

<p>Reactについては、DevTool APIがそのうち公開されるという話がありました。内部的にはReactPerfで使われているものです。
あとはHigh Order Componentsについての質問もありました。
このあたりは「Andrew Clark &ndash; Recomposing your React application」や下記のブログで詳しく解説されています。</p>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html">https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html</a></li>
</ul>


<p>後半はImmutable.jsについての質問や、1からFacebookを作り直すならどういうアーキテクチャで作るかという質問から、アーキテクチャの話になっています。
JavaScriptにImmutableなデータ型があれば何が変わるのかと言ったことや、Immutabilityとパフォーマンスについてなど。
JavaScriptではMutablityがデフォルトなので、Immutablityが複雑なものとして捉えられますがそれはコンテキストによるもので、デフォルトがImmutableで例外としてMutableを扱う言語もあり、Immutabilityの方がローレベルでシンプルなだという話など。</p>

<p>途中で紹介されるImmutable App Architectureについては別でブログ書いたのでそちらを。</p>

<ul>
<li><a href="http://blog.koba04.com/post/2016/06/21/immutable-app-architecture/">http://blog.koba04.com/post/2016/06/21/immutable-app-architecture/</a></li>
</ul>


<p>その他には、TypeScriptではなくFlowを採用するメリットについての質問やTypeScriptとFlowを組み合わせることについてなど、Flowについての質問もありました。</p>

<p>全体的には、Lee Byron劇場な感じですが、とても面白いQ&amp;Aになっています。</p>

<hr />

<p>そういえば、ReactEurope行ったことについてのエントリー書いてなかったので別途書こう&hellip;。</p>
]]></content>
  </entry>
  
</feed>
