<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react-links | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/react-links/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2018-04-04T15:21:01+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.12]]></title>
    <link href="http://blog.koba04.com/post/2016/09/30/reactjs-links-vol12/"/>
    <updated>2016-09-30T14:00:10+09:00</updated>
    <id>http://blog.koba04.com/post/2016/09/30/reactjs-links-vol12</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.3.2</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.3.2">https://github.com/facebook/react/releases/tag/v15.3.2</a></li>
</ul>


<p>React v15.3.2がリリースされています。
細かなバグフィックスなどが中心です。</p>

<h2>Our First 50,000 Stars</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/09/28/our-first-50000-stars.html">https://facebook.github.io/react/blog/2016/09/28/our-first-50000-stars.html</a></li>
</ul>


<p>ReactのGitHubでのstarが50,000を超えたことを記念するエントリーです。
Reactの前にはFaxJSというのがあって〜など、Reactが誕生するまでの流れの話などとても面白いです。</p>

<h2>Codebase Overview</h2>

<ul>
<li><a href="https://facebook.github.io/react/contributing/codebase-overview.html">https://facebook.github.io/react/contributing/codebase-overview.html</a></li>
</ul>


<p>React本体のコードについての解説です。
Reactを使う人にとってはほとんど知る必要のないことですが、contributeしたい場合にはとても役に立つドキュメントです。
特に<code>Haste</code>とというCommonJSではないFacebook独自のモジュールシステムを使っていたりするので&hellip;。
最初からこれがあれば&hellip;。</p>

<h2>If TypeScript is so great, how come all notable ReactJS projects use Babel?</h2>

<ul>
<li><a href="https://discuss.reactjs.org/t/if-typescript-is-so-great-how-come-all-notable-reactjs-projects-use-babel/4887">https://discuss.reactjs.org/t/if-typescript-is-so-great-how-come-all-notable-reactjs-projects-use-babel/4887</a></li>
</ul>


<p>TypeScriptが最高なら、どうしてReact周りのプロジェクトはみんなBabelを使っているの？という疑問に対するスレッドです。
FlowTypeとTypeScriptの違いなどの話も登場して面白いです。</p>

<h2>Redux Patterns and Anti-Patterns</h2>

<ul>
<li><a href="https://tech.affirm.com/redux-patterns-and-anti-patterns-7d80ef3d53bc">https://tech.affirm.com/redux-patterns-and-anti-patterns-7d80ef3d53bc</a></li>
</ul>


<p>Reduxでのアンチパターンについての記事です。
Immutable.jsと組み合わせた場合や、redux-thunkでのAPIアクセスの書き方について解説されています。</p>

<h2>You Might Not Need Redux</h2>

<ul>
<li><a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367">https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367</a></li>
</ul>


<p>Dan Abramov自身によるエントリーで、何も考えずにとりあえずRedux使うのをやめようという記事です。</p>

<h2>Declarative Routing for React</h2>

<ul>
<li><a href="https://react-router-website-uxmsaeusnn.now.sh/">https://react-router-website-uxmsaeusnn.now.sh/</a></li>
</ul>


<p>react-router v4についてのページです。
react-routerでは、Reactのためのルーティングライブラリーではなく、Reactを使ったルーティングライブラリーになっています。
そのため、<code>Match</code>や<code>Redirect</code>といったComponentが登場しており、議論を呼びそうな感じの変わり方をしています。
（反応を見ていると、概ねポジティブに捉えられているのがビックリですが）</p>

<h2>AMA with Redux</h2>

<ul>
<li><a href="https://hashnode.com/ama/with-redux-cisteui6p005gzx53fstg8t6l">https://hashnode.com/ama/with-redux-cisteui6p005gzx53fstg8t6l</a></li>
</ul>


<p>Reduxの作者であるDan Abramovと初期からの開発者であるAndrew ClarkによるAMAです。
Reduxについての実際に作った人たちの考えが説明されているので、興味のある人は読むといいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.11]]></title>
    <link href="http://blog.koba04.com/post/2016/09/07/reactjs-links-vol11d/"/>
    <updated>2016-09-07T19:26:04+09:00</updated>
    <id>http://blog.koba04.com/post/2016/09/07/reactjs-links-vol11d</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React Core Meeting Notes</h2>

<p>7/21, 28, 8/4, 25のMeeting Noteがまとめて公開されました。</p>

<p><code>React.createClass</code>のES classes化については、引き続き進められているようで、すでに80%がES classesになったそうです。
Public Class Fieldsがstage2になったことも紹介されています。</p>

<p>その他には、<code>create-react-app</code>をリリースしたことや、そこでのJestサポートについても紹介されています。
また7/28のMeeting Noteでは、Reconcilerの位置付けについて解説されています。Reconcilerはrendererに属するものであり、react本体にはComponentやReactElementを作成する部分のみが含まれているという形です。
それにより、新しいReactFiberのReconcilerの導入もすでにあるReact Componentに手を入れることなくできるとしています。</p>

<p>（Reactの中では、完全にrenderer毎にコードが分かれているわけではなくて、共通化されている部分もありますが）</p>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-07/july-21.md">https://github.com/reactjs/core-notes/blob/master/2016-07/july-21.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-07/july-28.md">https://github.com/reactjs/core-notes/blob/master/2016-07/july-28.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-08/august-04.md">https://github.com/reactjs/core-notes/blob/master/2016-08/august-04.md</a></li>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-08/august-25.md">https://github.com/reactjs/core-notes/blob/master/2016-08/august-25.md</a></li>
</ul>


<h2>PATTERNS FOR STYLE COMPOSITION IN REACT</h2>

<p>CSS in JSでのパターン集です。</p>

<ul>
<li><a href="http://jxnblk.com/writing/posts/patterns-for-style-composition-in-react/">http://jxnblk.com/writing/posts/patterns-for-style-composition-in-react/</a></li>
</ul>


<h2>Strip flow-only class props without needing transform-class-properties. #3655 (Babel)</h2>

<p><code>babel-plugin-transform-flow-strip-types</code>でtype annotationのためだけに使われているclass propertiesを削除するというPRです。
これがmergeされると、Flowのtype annotationのためだけに<code>babel-plugin-transform-class-properties</code>を追加する必要はなくなります。</p>

<ul>
<li><a href="https://github.com/babel/babel/pull/3655">https://github.com/babel/babel/pull/3655</a></li>
</ul>


<h2>exponentjs/exponent</h2>

<p>ReactEurope 2016でAndroid版の事例を紹介していたReactNativeで作られたExponentのiOS/Android版が公開されています。</p>

<ul>
<li><a href="https://github.com/exponentjs/exponent">https://github.com/exponentjs/exponent</a></li>
</ul>


<h2>react-history</h2>

<p><code>history</code>をラップしたようなReactComponentです。
<code>react-router</code>のv4はこれを使うというような話もあり、あいかわらず落ち着かない感じです&hellip;。</p>

<ul>
<li><a href="https://github.com/ReactTraining/react-history">https://github.com/ReactTraining/react-history</a></li>
</ul>


<h2>Animating in React</h2>

<p>ReactでのAnimationの方法についてのスライドです。
codepenによるサンプルも多く埋め込まれており、とてもわかりやすいです。</p>

<p>CSS、DOM、SVG、Canvasなどによるアプローチの比較や、react-motionなどライブラリーに関する解説もあり、アニメーションで悩んでいる人にはおすすめのスライドです。</p>

<ul>
<li><a href="http://slides.com/sdrasner/react-rally#/">http://slides.com/sdrasner/react-rally#/</a></li>
</ul>


<h2>Async Redux Actions With RxJS</h2>

<p>NetflixのエンジニアでRxJSの開発者であるBen Leshによる、redux-observableを使ってReduxとRxJSを組み合わせる話です。
なぜReduxにRxJSを組み合わせる必要があるのか、redux-observableにあるEpicとは何なのかということがわかりやすく解説されています。</p>

<ul>
<li><a href="http://www.slideshare.net/benlesh1/async-redux-actions-with-rxjs-react-rally-2016">http://www.slideshare.net/benlesh1/async-redux-actions-with-rxjs-react-rally-2016</a></li>
</ul>


<h2>React: Facebook&rsquo;s Functional Turn on Writing JavaScript</h2>

<p>Reactの初期の開発者であるPete Huntと、現在の開発者であるPaul O'Shannessyに対するReactに関するインタビューです。
Reactの思想などについて語られていて、面白いです。</p>

<ul>
<li><a href="http://queue.acm.org/detail.cfm?id=2994373">http://queue.acm.org/detail.cfm?id=2994373</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.10]]></title>
    <link href="http://blog.koba04.com/post/2016/08/10/react-dot-js-links-vol-dot-10/"/>
    <updated>2016-08-10T14:09:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/08/10/react-dot-js-links-vol-dot-10</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。
10回目!!!</p>

<!-- more -->


<h2>React v15.3.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.3.0">https://github.com/facebook/react/releases/tag/v15.3.0</a></li>
</ul>


<p>Reactのv15.3.0がリリースされました。</p>

<p>今回の大きな変更点は、<code>React.PureComponent</code>の追加です。
これは、PureRenderMixinのES Classes版というような実装で、自動的に<code>shouldComponentUpdate</code>にshallowEqualが適用されるというものです。
最初このPRが出された時には、内部のStateless Functional Componentにも最適化が適用されるという実装も含まれていましたが、PR内での議論で問題点などが見えたため、今回はただのPureRenderMixin for ES Claseesとして入りました。</p>

<p>今後、v16のタイミングなどでさらなる最適化が追加される可能性はあります。</p>

<p>もう一つ、大きな点は<code>react-test-render</code>というパッケージのリリースです。
これは、TestUtilsのShallowRenderと似ていますが、Shallowではなく子孫までrenderして結果をReactElementのJSONとして返します。
refやライフサイクルメソッドなどが呼ばれる点もShallowRenderとは異なります。</p>

<p>```js
import renderer from &lsquo;react-test-renderer&rsquo;;</p>

<p>const json = renderer.create(<App />).toJSON();
```</p>

<p>Jestにはこれを使ったsnapshottestが追加されました。</p>

<h2>Create Apps with No Configuration</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html">https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html</a></li>
<li><a href="https://github.com/facebookincubator/create-react-app">https://github.com/facebookincubator/create-react-app</a></li>
</ul>


<p>Reactを使ったSingle Page Applicationのひな形を作成している公式のcliがリリースされました。
これまでFacebookは自分たちが実際にプロダクトで使っているものだけをOSSにする方針でしたが、今回はコミュニティーの声に応えて作成したものです。</p>

<p>インストールして、<code>create-react-app hello-world</code>として、<code>npm start</code>すればもう開発できるのは手軽でいいですね。
また、<code>npm run eject</code>すると<code>react-scripts</code>というパッケージの内部に隠れていたwebpackの設定などが全部展開されてカスタマイズ出来るようになるのも面白いですね。</p>

<p>まだ公開されてすぐなので、<code>facebookincubator/create-react-app</code>のリポジトリが、Reactを使ったプロジェクトの構成について多くの人が意見を交わしていてなかなか混沌としています。</p>

<h2>Jest 14.0: React Tree Snapshot Testing</h2>

<ul>
<li><a href="http://facebook.github.io/jest/blog/2016/07/27/jest-14.html">http://facebook.github.io/jest/blog/2016/07/27/jest-14.html</a></li>
</ul>


<p>Jestが密かに追加されている新しいテスト用のrendererを使って、snapshot testをサポートしたという話です。
snapshot testなので、一度テストを実行するとスナップショットのファイルが作成されて、次回からはそのスナップショットとテストが一致するかどうかを判定する感じです。</p>

<p>その他にもReactNativeのサポートや、今後の予定(Jasmine捨てる)などが書かれています。</p>

<h2>React.js in patterns</h2>

<ul>
<li><a href="http://krasimirtsonev.com/blog/article/react-js-in-design-patterns">http://krasimirtsonev.com/blog/article/react-js-in-design-patterns</a></li>
</ul>


<p>High Order ComponentsやContextをDIなど、Reactのパターン集です。</p>

<h2>Function as Child Components</h2>

<ul>
<li><a href="https://medium.com/@iammerrick/function-as-child-components-5f3920a9ace9#.bnfwsk5un">https://medium.com/@iammerrick/function-as-child-components-5f3920a9ace9#.bnfwsk5un</a></li>
</ul>


<p>公式のブログでも言及されて、広く使われるようになったHigh Order Components(HOC)ですが、HOCではなくてchildrenに関数を渡すFunction as Child Componentsのパターンの方が有効ではないかとエントリーです。</p>

<p>Function as Child Componentsにすることで、不要なComponentのラッピングをなくすことが出来たり、Propsの衝突を避けることも容易だとしています。</p>

<h2>Use RxJS with React</h2>

<ul>
<li><a href="http://michalzalecki.com/use-rxjs-with-react/">http://michalzalecki.com/use-rxjs-with-react/</a></li>
</ul>


<p>RxJSを使ってReduxライクな状態管理を行う方法についてのエントリーです。</p>

<h2>How to handle state in React. The missing FAQ.</h2>

<ul>
<li><a href="https://medium.com/react-ecosystem/how-to-handle-state-in-react-6f2d3cd73a0c">https://medium.com/react-ecosystem/how-to-handle-state-in-react-6f2d3cd73a0c</a></li>
</ul>


<p>Reactを学ぶ時に最初からReduxなどを使うのではなくて、ReactのStateから始めようってことで、Stateを扱う方法についてエントリーです。</p>

<h2>Redux vs MobX vs Flux vs&hellip; Do you even need that?</h2>

<ul>
<li><a href="http://goshakkk.name/redux-vs-mobx-vs-flux-etoomanychoices/">http://goshakkk.name/redux-vs-mobx-vs-flux-etoomanychoices/</a></li>
</ul>


<p>上記のエントリーと同じように、まずはReactだけで始めて必要になったらReduxやMobXについて検討しましょうというエントリーです。
Reactだけだと何が辛くて、何を解決するためにReduxなどのライブラリーを使うのかを理解してないと、ただ覚えることが増えたみたいに感じるということはありそうです。</p>

<h2>A STEP-BY-STEP TDD APPROACH ON TESTING REACT COMPONENTS USING ENZYME</h2>

<ul>
<li><a href="http://thereignn.ghost.io/a-step-by-step-tdd-approach-on-testing-react-components-using-enzyme/">http://thereignn.ghost.io/a-step-by-step-tdd-approach-on-testing-react-components-using-enzyme/</a></li>
</ul>


<p>Enzymeを使って、React ComponentをTDDでテストを書いていく方法についてのエントリーです。
TDDの流れに沿って順番にテストを書いていく方法が丁寧に解説されています。</p>

<h2>The Problem with CSS-In-JS, circa Mid-2016</h2>

<ul>
<li><a href="https://medium.com/@taion/the-problem-with-css-in-js-circa-mid-2016-14060e69bf68#.ndfajua3p">https://medium.com/@taion/the-problem-with-css-in-js-circa-mid-2016-14060e69bf68#.ndfajua3p</a></li>
</ul>


<p>CSS in JSやCSS ModulesのようなComponentに閉じたCSSを使う場合の問題点についてのエントリーです。
コンテキストによるスタイルの違いを、CSSがそれぞれ独立している中でどのようにComponentとして表現するかという内容です。</p>

<h2>React Native at SoundCloud</h2>

<ul>
<li><a href="https://developers.soundcloud.com/blog/react-native-at-soundcloud">https://developers.soundcloud.com/blog/react-native-at-soundcloud</a></li>
</ul>


<p>SoundCloudがReactNativeでSoundCloud Purseのアプリを作った時の話です。
なぜReactNativeを使ったのか、実際使ってみてどうだったのかが書かれています。</p>

<h2>A Glimpse Into The Future With React Native For Web</h2>

<ul>
<li><a href="https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/">https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/</a></li>
</ul>


<p><code>react-native-web</code>の現状についてのエントリーです。
基本的には、まだプロダクションで使うレベルにはなっていないけど今後に期待という感じです。</p>

<h2>React Fiber Architecture</h2>

<ul>
<li><a href="https://github.com/acdlite/react-fiber-architecture">https://github.com/acdlite/react-fiber-architecture</a></li>
</ul>


<p>現在実装が進められているReact内部のアルゴリズムであるReact Fiberについてのエントリーです。
詳細については書かれていませんが、導入としては良さそうです。</p>

<p>ちなみにacdliteさんは、今setStateのReact Fiber対応をやっています。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/7344">https://github.com/facebook/react/pull/7344</a></li>
</ul>


<h2>Internationalization in React</h2>

<ul>
<li><a href="https://medium.freecodecamp.com/internationalization-in-react-7264738274a0#.33osi3w58">https://medium.freecodecamp.com/internationalization-in-react-7264738274a0#.33osi3w58</a></li>
</ul>


<p><code>react-intl</code>を使ったReactを使ったアプリケーションでのi18n対応についてのエントリーです。</p>

<h2>Flow: Mapping an object</h2>

<ul>
<li><a href="https://medium.com/@thejameskyle/flow-mapping-an-object-373d64c44592#.xm62m8pic">https://medium.com/@thejameskyle/flow-mapping-an-object-373d64c44592#.xm62m8pic</a></li>
</ul>


<p>Flowでどのように型付けをしていけばいいのかということを、<code>map-obj</code>に型付けしていきながら解説しているエントリーです。
わかりやすいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.9]]></title>
    <link href="http://blog.koba04.com/post/2016/07/21/react-dot-js-links-vol-dot-9/"/>
    <updated>2016-07-21T19:38:19+09:00</updated>
    <id>http://blog.koba04.com/post/2016/07/21/react-dot-js-links-vol-dot-9</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.2.1</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.2.1">https://github.com/facebook/react/releases/tag/v15.2.1</a></li>
</ul>


<p>Bug Fixやwarningの追加などが中心です。</p>

<h2>Introducing React&rsquo;s Error Code System</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/11/introducing-reacts-error-code-system.html">https://facebook.github.io/react/blog/2016/07/11/introducing-reacts-error-code-system.html</a></li>
</ul>


<p>React v15.2.0で導入されたエラーコードシステムの解説です。
これにより、プロダクションビルドでもエラーの詳細を確認することができるようになります。</p>

<h2>Design Principles</h2>

<ul>
<li><a href="https://facebook.github.io/react/contributing/design-principles.html">https://facebook.github.io/react/contributing/design-principles.html</a></li>
</ul>


<p>Reactのドキュメントに新しく「Contributing」というセクションが追加されて、Design Principlesというドキュメントが追加されました。
今後、実装のOverviewなどが追加される予定で楽しみです。</p>

<p>Design Principlesでは、Reactが何を重要に考えていてどのように開発をされているかということを「Composition」「Common Abstraction」「Escape Hatches」「Stability」「Interoperability」「Scheduling」「Developer Experience」「Debugging」「Configuration」「Beyond the DOM」「Implementation」「Optimized for Tooling」「Driven by Facebook」という分類で解説されています。</p>

<p>Reactを始める時に最初に読む必要はないですが、Reactについてもっと知りたい人や、Reactを使うかどうか判断する場合に、とてもドキュメントになっています。</p>

<h2>Mixins Considered Harmful</h2>

<ul>
<li><a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html">https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html</a></li>
</ul>


<p>Facebook内のコードからMixinを削除しているという話をCore Noteで何度か紹介していましたが、その際の知見も含めた形で、Mixinからの移行を促すエントリーです。
（Mixin自体は、<code>React.createClass</code>に残されます）</p>

<p>Facebook内でMixinが利用されていたケースを取り上げ、High Order Componentsなどのパターンで置き換える方法が丁寧に説明されています。</p>

<p>Design Principlesのドキュメントもそうですが、Dan AbramovがReact Teamに加わってから色々整備されて、よくなってきてるのを感じます。</p>

<h2>Core Team meeting note</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-07/july-07.md">https://github.com/reactjs/core-notes/blob/master/2016-07/july-07.md</a></li>
</ul>


<p>ReactComponentは複数のReactElementを返すことができないので、<code>&lt;div&gt;</code>などで囲む必要があるのですが、これをFragmentsのようなものを導入してどうにかするという話が出ています。
2016年中には入れたいという感じのようです。</p>

<p>Rollupを使ったUMD Bundleのサイズ削減も取り上げられています。
ReactはCommonJSで書かれているのでCommonJSからES Moudlesに変換してRollupに渡す形になっていて、将来的にはES Modulesに移行したいけど、Facebook内部のビルドシステムでES Modulesを使えないのでそうせざるを得ないということのようです。</p>

<p>ファイルサイズについて考えた時に、Reactのイベントシステムの部分が大きな割合を占めていて、これはブラウザー間のAPIや挙動の違いを吸収するレイヤーになっているけど、必要なのかということも取り上げられています。</p>

<h2>Optimizing Compiler: Component Folding #7323</h2>

<ul>
<li><a href="https://github.com/facebook/react/issues/7323">https://github.com/facebook/react/issues/7323</a></li>
</ul>


<p>Reactでの新たな最適化についてのIssueです。
<a href="https://en.wikipedia.org/wiki/Constant_folding">Constant folding</a>や<a href="https://en.wikipedia.org/wiki/Inline_expansion">Inline expansion</a>や<a href="https://en.wikipedia.org/wiki/Dead_code_elimination">Dead code elimination</a>を使って最適化を行いたいようです。
一部はRollupがやっていることですね。</p>

<p>ただ、JSはデフォルトがMutableであったり、依存関係をどのように解決するのかなど検討すべき点は多そうです。</p>

<h2>Codemod tests from createClass to ES2015 classes #7321</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7321">https://github.com/facebook/react/pull/7321</a></li>
</ul>


<p>Codemodを使って、<code>React.createClass</code>で書かれたComponentをES2015 classesに変換するPRです。
Codemodのテストのようですが。</p>

<h2>Has Redux&rsquo;s Time Come and Gone #775</h2>

<ul>
<li><a href="https://github.com/reactjs/redux/issues/775">https://github.com/reactjs/redux/issues/775</a></li>
</ul>


<p>ReduxとRelayやGraphQLを組み合わせることについての議論です。
この辺りの組み合わせについて興味がある人は読んでみるといいと思います。</p>

<h2>[META] v3.0.0 (ReactRouter)</h2>

<ul>
<li><a href="https://github.com/reactjs/react-router/issues/3611">https://github.com/reactjs/react-router/issues/3611</a></li>
</ul>


<p>ReactRouter v3.0.0についてのIssueです。
alpha.1から結構経ってますがそろそろ出そうですね。</p>

<h2>You might not need React Router</h2>

<ul>
<li><a href="https://medium.com/@tarkus/you-might-not-need-react-router-38673620f3d#.3ech54krr">https://medium.com/@tarkus/you-might-not-need-react-router-38673620f3d#.3ech54krr</a></li>
</ul>


<p>ReactRouterを使わずに、ReactRouterが内部で使っている<code>history</code>を直接使えばいいのではというエントリーです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React.js Links vol.8]]></title>
    <link href="http://blog.koba04.com/post/2016/06/23/react-dot-js-links-vol-dot-8/"/>
    <updated>2016-06-23T13:33:36+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/23/react-dot-js-links-vol-dot-8</id>
    <content type="html"><![CDATA[<p>これはReactに関する記事や気になるissueなどのリンクを紹介する記事です。</p>

<!-- more -->


<h2>React v15.2.0</h2>

<ul>
<li><a href="https://github.com/facebook/react/releases/tag/v15.2.0">https://github.com/facebook/react/releases/tag/v15.2.0</a></li>
</ul>


<p>15.2.0がリリースされました。</p>

<p>プロダクションビルドでエラーコードが付加されるようになりエラーの調査がしやすくなったことや、PropTypesやkeyのwarning時のスタックトレースがComponentのツリーで表示されるようになりました。
開発をサポートするための機能です。</p>

<p>その他はちょっとしたバグ修正などが中心です。</p>

<h2>Core Notes June 23</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-23.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-23.md</a></li>
</ul>


<p>恒例のCore TeamのMeeting Noteです。</p>

<p>Facebook内での<code>React.createClass</code>からClassによるComponent定義への移行作業は引き続き行われているようです。</p>

<h2>Core Notes June 30</h2>

<ul>
<li><a href="https://github.com/reactjs/core-notes/blob/master/2016-06/june-30.md">https://github.com/reactjs/core-notes/blob/master/2016-06/june-30.md</a></li>
</ul>


<p>こちらもMeeting Noteです。
新しいReconcilerが徐々に動き始めているようです。
また、<code>React.createClass</code>からClassによるComponentによる移行についても進んでいるようです。
下のcodemodを使って、ClassによるComponent定義&amp;property initializer&amp;Flowに変換を行っているようです。</p>

<ul>
<li><a href="https://github.com/reactjs/react-codemod/pull/54">https://github.com/reactjs/react-codemod/pull/54</a></li>
</ul>


<p>React Teamとしては、Class + property initializer + Flowの組み合わせについては、ドッグフーディング中なので現時点では推奨しているわけでないという立場です。</p>

<p>また、Facebook内部ではPureRenderMixinがたくさん使われていて、それを置き換えるためのものとして<code>React.PureComponent</code>が考えられているようです。</p>

<p><code>React.PureComponent</code>に関しては、最初のProposalでは内部のStateless Functional Componentsにも最適化が適用される予定でしたが、混乱や問題点があることから、新しく出されたPRではただのClass版のPureRenderMixinとなっています。そしてmergeされました。</p>

<ul>
<li><a href="https://github.com/facebook/react/pull/7195">https://github.com/facebook/react/pull/7195</a></li>
<li><a href="https://github.com/facebook/react/issues/6914">https://github.com/facebook/react/issues/6914</a></li>
</ul>


<p>また、<code>React.createClass</code>をAddonにして、さらに<code>Perf</code>と<code>TestUtils</code>以外のAddonsについては、React Team外にownershipを移して管理するも考えているようです。</p>

<h2>Resolve refs in the order of the children #7101</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7101">https://github.com/facebook/react/pull/7101</a></li>
</ul>


<p>更新時の新しくマウントされるReactElementに対するRefの解決する順番を変更するPRです。
詳しくはPRにある画像を見るとわかると思います。</p>

<h2>Added jsx-self babel transform plugin #3540</h2>

<ul>
<li><a href="https://github.com/babel/babel/pull/3540">https://github.com/babel/babel/pull/3540</a></li>
</ul>


<p>warning目的でReactElementに<code>__self</code>のPropを追加するBabelのtransfomerです。
developmentの時だけ有効にすることが推奨されています。</p>

<h2>Spec proposal: extending the language to allow spreading children #57</h2>

<ul>
<li><a href="https://github.com/facebook/jsx/issues/57">https://github.com/facebook/jsx/issues/57</a></li>
</ul>


<p>JSXでのchildrenの仕様に対するProposalです。
JSXChildを拡張して<code>{...children}</code>を許容するようにするものです。</p>

<h2>RFC: Flat bundle using Rollup</h2>

<ul>
<li><a href="https://github.com/facebook/react/pull/7178">https://github.com/facebook/react/pull/7178</a></li>
</ul>


<p>現在CommonJSベースで書かれているReactのコードをRollupでバンドルしてTree ShakingやDead Code Eliminationによりファイルサイズを削減するPRです。React Teamのインターンの人ですね。</p>

<p>まずはトップレベルでない<code>require</code>を全てトップレベルにしてES Modulesに変換できるようにして、BabelでCommonJSをES Modulesに変換してRollupでバンドルするという方法を採っているようです。
(RollupのCommonJSプラグインを使う方法よりサイズが小さくなるらしいです)</p>

<h2>Flow v0.28.0</h2>

<ul>
<li><a href="https://github.com/facebook/flow/releases/tag/v0.28.0">https://github.com/facebook/flow/releases/tag/v0.28.0</a></li>
</ul>


<p>Flowの0.28.0がリリースされています。
変更内容については、下記のブログでも書かれています。</p>

<ul>
<li><a href="https://flowtype.org/blog/2016/07/01/New-Unions-Intersections.html">https://flowtype.org/blog/2016/07/01/New-Unions-Intersections.html</a></li>
</ul>


<h2>ReactNative v0.29.0</h2>

<ul>
<li><a href="https://github.com/facebook/react-native/releases/tag/v0.29.0">https://github.com/facebook/react-native/releases/tag/v0.29.0</a></li>
</ul>


<p>ReactNativeの0.29.0がリリースされています。</p>

<h2>Don&rsquo;t Use Bind When Passing Props</h2>

<ul>
<li><a href="https://daveceddia.com/avoid-bind-when-passing-props/">https://daveceddia.com/avoid-bind-when-passing-props/</a></li>
</ul>


<p>PureComponentなんかとも関連しますが、なぜrenderメソッドの中でFunction.prototype.bindしたりArrow Function使うのがダメなのかについて書いたエントリーです。
過去にもあったような気もしますが。
上記を使って書かれているサンプルも多いので、使うときは何が起きているのか意識して使った方がいいと思います。
（Function.prototype.bindやArrow Functionsを使うと当たり前ですが新しい関数が都度生成されるので）</p>
]]></content>
  </entry>
  
</feed>
