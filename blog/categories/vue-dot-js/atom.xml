<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vue.js | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/vue-dot-js/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2014-06-24T09:46:44+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reusable components by Vue.js and Browserify]]></title>
    <link href="http://blog.koba04.com/post/2014/04/17/reusable-components-by-vuejs-and-browserify/"/>
    <updated>2014-04-17T01:27:24+09:00</updated>
    <id>http://blog.koba04.com/post/2014/04/17/reusable-components-by-vuejs-and-browserify</id>
    <content type="html"><![CDATA[<p>最近Vue.jsについて調べたり試したりしていて、browserifyと組み合わせたexampleがなかなか興味深かったので参考に自分でも作ってみました。</p>

<p>参考</p>

<ul>
<li><a href="https://github.com/vuejs/vue-browserify-example">https://github.com/vuejs/vue-browserify-example</a></li>
</ul>


<p>作ったサンプル</p>

<ul>
<li><a href="https://github.com/koba04/vue-boilerplate">https://github.com/koba04/vue-boilerplate</a></li>
<li><a href="http://koba04.com/vue-boilerplate/">http://koba04.com/vue-boilerplate/</a></li>
</ul>


<!-- more -->


<h2>browserify</h2>

<p>Vue.js自体はビルドに<a href="https://github.com/component/component">Compoment</a>を使っているのですが、ここでは個人的な好みによりbrowserifyを使っています。</p>

<p>上記のexampleではbrowserifyにプラスしてwatchifyとpartialifyを使っていたのですが、今回はlivereloadもしたかったのでwatchifyではなくて<a href="https://github.com/chrisdickinson/beefy">beefy</a>にして、さらにcoffeeifyとstylifyも使ってcoffeescriptとstylusのcompileも任せることにしました。</p>

<p>その結果の起動scriptはこんな感じで、<strong>npm run dev</strong>するとlivereload + auto buildな環境が立ち上がり、<strong>npm run build</strong>するとbundle.jsが生成されるようになっています。</p>

<ul>
<li><a href="https://github.com/koba04/vue-boilerplate/blob/master/package.json">https://github.com/koba04/vue-boilerplate/blob/master/package.json</a>
<code>javascript
"scripts": {
  "dev": "beefy src/index.coffee:bundle.js --live -- -t partialify -t coffeeify -t stylify --extension=coffee",
  "build": "browserify src/index.coffee -t partialify -t coffeeify -t stylify --extension=coffee &gt; bundle.js"
}
</code></li>
</ul>


<p>ちなみに<a href="https://github.com/bclinkinbeard/partialify">partialify</a>はhtmlをrequireで読み込むのに使っています。</p>

<p>これで、gruntを使うことなくbrowserifyだけでlivereload + auto buildが出来るようになりました。便利！</p>

<h2>Reusable components</h2>

<p>Vue.jsを使っていると、ViewModelをCompomentとして組み合わせてアプリケーションを作る感じになっていくので、Component単位でhtml、js、cssをまとめたくなります(ならない？)。</p>

<p>Vue.jsにはcompomentという概念があるのでこんな感じでViewModelをcompomentとして登録することが出来ます。</p>

<p>```coffeescript</p>

<h1>グローバルにcompomentを登録</h1>

<p>Vue.component &lsquo;artist&rsquo;,   require &lsquo;./artist/index.coffee&rsquo;</p>

<h1>or</h1>

<h1>ViewModelに紐づけて登録</h1>

<p>module.exports = Vue.extend
  components:</p>

<pre><code>"nav":          require '../nav/index.coffee'
</code></pre>

<p>```</p>

<p>exampleでもそのようになっていて、partialifyでhtmlとcssをrequireして読み込んでcssの方はinsert-cssで追加する感じになっています。</p>

<ul>
<li>insert-cssというのはsubstackが作っているライブラリで、CSSを渡すとDOMにstyle要素を作ってhead要素にappendしてくれるというライブラリです。

<ul>
<li><a href="https://www.npmjs.org/package/insert-css">https://www.npmjs.org/package/insert-css</a></li>
</ul>
</li>
</ul>


<p>ただCSSはグローバルに作用してしまいます。なので名前ベースで解決したくなりますがCSSではネストした記述をサポートしていません。そこでstylusを使ってネストで書きやすくしてみました。</p>

<ul>
<li><a href="https://github.com/koba04/vue-boilerplate/blob/master/src/top/index.coffee">https://github.com/koba04/vue-boilerplate/blob/master/src/top/index.coffee</a>
```coffeescript
require(&lsquo;insert-css&rsquo;)(require(&lsquo;./index.styl&rsquo;))</li>
</ul>


<p>Vue = require &lsquo;vue&rsquo;
module.exports = Vue.extend
  template: require &lsquo;./index.html&rsquo;
  className: &lsquo;top&rsquo;
  components:</p>

<pre><code>"nav":          require '../nav/index.coffee'
</code></pre>

<p>```</p>

<ul>
<li><a href="https://github.com/koba04/vue-boilerplate/blob/master/src/top/index.styl">https://github.com/koba04/vue-boilerplate/blob/master/src/top/index.styl</a>
<code>sass
.top
h1
  font-family: 'Playfair Display SC', serif
</code></li>
</ul>


<p>こんな感じにすると、Compoment単位でディレクトリ作ってindex.coffeeの中でinsert-cssを使ってcssを追加しつつpartialifyでhtmlをtemplateとして設定することで、javascriptとhtmlとcssをまとめることが出来ます。</p>

<ul>
<li><p>ファイル名の付け方は悩ましいですが・・・。</p></li>
<li><p><a href="https://github.com/koba04/vue-boilerplate">https://github.com/koba04/vue-boilerplate</a>
<code>sh
src
├── artist
│   ├── components
│   │   └── input-artist
│   │       ├── index.coffee
│   │       ├── index.html
│   │       └── index.styl
│   ├── index.coffee
│   ├── index.html
│   └── index.styl
├── country
│   ├── components
│   │   └── select-country
│   │       ├── index.coffee
│   │       ├── index.html
│   │       └── index.styl
│   ├── index.coffee
│   ├── index.html
│   └── index.styl
├── index.coffee
├── index.html
├── index.styl
├── nav
│   ├── index.coffee
│   ├── index.html
│   └── index.styl
├── partials
│   └── footer.html
├── top
│   ├── index.coffee
│   ├── index.html
│   └── index.styl
└── tracks
  ├── index.coffee
  ├── index.html
  └── index.styl
</code></p></li>
</ul>


<p>まぁ実際はcompoment化してもなかなか再利用は難しいのですが、こういう分け方もありかなーと思いました。</p>

<h2>routing animation by v-view and css animation</h2>

<p>余談ですが、今回作ったサンプルの遷移時のウザイアニメーションは、v-viewとv-animationを組み合わせています。</p>

<ul>
<li><a href="http://koba04.com/vue-boilerplate/">http://koba04.com/vue-boilerplate/</a></li>
</ul>


<p>routingは<a href="https://www.npmjs.org/package/director">director</a>とv-viewとVue.compomentを組み合わせています。</p>

<ul>
<li>angular.jsのng-animateみたいな感じでv-enterとv-leaveというクラスがあてられるのでそれを使ってアニメーションさせています。</li>
</ul>


<p>v-viewとv-animationの組み合わせについては、v-leaveのanimation-endで要素が削除されるためアニメーションが指定されていないと古い要素が残ったりと若干ハマりどころもあるのですが、それはまた別の機会にまとめたいと思います。</p>

<ul>
<li><a href="https://github.com/koba04/vue-boilerplate/blob/master/src/index.html">https://github.com/koba04/vue-boilerplate/blob/master/src/index.html</a>
```html</li>
</ul>


<div v-view="view" v-animation></div>


<p>```</p>

<ul>
<li><a href="https://github.com/koba04/vue-boilerplate/blob/master/src/index.styl">https://github.com/koba04/vue-boilerplate/blob/master/src/index.styl</a>
```sass

<h1>app</h1>

<p>.v-enter
  -webkit-animation: fadein 0.5s
  -webkit-animation-delay: 0.2s
  animation: fadein 0.5s
  animation-delay: 0.2s
  opacity: 0
.v-leave
  -webkit-animation: fadeout 0.2s
  animation: fadeout 0.2s</p></li>
</ul>


<p>@keyframes fadein
  0%</p>

<pre><code>transform: scale(0.5)
-webkit-transform: scale(0.5)
opacity: 0
</code></pre>

<p>  50%</p>

<pre><code>transform: scale(1.2)
-webkit-transform: scale(1.2)
opacity: 0.7
</code></pre>

<p>  100%</p>

<pre><code>transform: scale(1)
-webkit-transform: scale(1)
opacity: 1
</code></pre>

<p>@keyframes fadeout
  0%</p>

<pre><code>transform: scale(1)
-webkit-transform: scale(1)
</code></pre>

<p>  100%</p>

<pre><code>transform: scale(0)
-webkit-transform: scale(0)
</code></pre>

<p>```</p>

<h3>追記</h3>

<p>ちなみにネストしたViewの場合は色々な解決方法があると思うのですが、v-viewとv-refを組み合わせて実現することも出来ます</p>

<p>v-refを使うことで子のViewを参照することができるのでそれを使って同じようにv-componentを更新する感じです</p>

<p>サンプルはこんな感じ</p>

<p><a href="http://jsfiddle.net/koba04/WgSK9/1/">http://jsfiddle.net/koba04/WgSK9/1/</a></p>

<h2>more?</h2>

<p>本当はここにtestling + mocha + power-assertな組み合わせのテストも含めたかったのですが間に合わず・・。</p>

<p>Vue.js自体についても下記のメモをスライドにでもまとめようかなと思っています..そのうち..</p>

<ul>
<li><a href="https://gist.github.com/koba04/9776792">https://gist.github.com/koba04/9776792</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
