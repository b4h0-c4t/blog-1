<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: architecture | blog.koba04.com]]></title>
  <link href="http://blog.koba04.com/blog/categories/architecture/atom.xml" rel="self"/>
  <link href="http://blog.koba04.com/"/>
  <updated>2017-10-01T23:14:56+09:00</updated>
  <id>http://blog.koba04.com/</id>
  <author>
    <name><![CDATA[koba04]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Immutable App ArchitectureについてのTalkを観た]]></title>
    <link href="http://blog.koba04.com/post/2016/06/21/immutable-app-architecture/"/>
    <updated>2016-06-21T01:30:35+09:00</updated>
    <id>http://blog.koba04.com/post/2016/06/21/immutable-app-architecture</id>
    <content type="html"><![CDATA[<iframe src="https://player.vimeo.com/video/166790294" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p><a href="https://vimeo.com/166790294">Render 2016 - Lee Byron</a> from <a href="https://vimeo.com/whiteoctober">White October</a> on <a href="https://vimeo.com">Vimeo</a>.</p>


<ul>
<li><a href="https://vimeo.com/166790294">https://vimeo.com/166790294</a></li>
<li><a href="http://2016.render-conf.com/talks.php#immutable-user-interfaces">http://2016.render-conf.com/talks.php#immutable-user-interfaces</a></li>
</ul>


<p>Dan AbramovもReact EuropeのQ&amp;AでおすすめしていたTalkで、改めて見て面白い内容だったので紹介します。</p>

<p>FacebookがReactやGraphQL、Immutable.jsを使ってどのようなアーキテクチャでアプリケーションを作成しているのかということを解説したTalkです。
特にFluxのような新しい概念が提唱されているわけではありませんが、最近のフロントエンドの流れやFacebookが目指しているものがわかりやすく解説されています。</p>

<p>Architectureの話が中心で各ライブラリーの説明や、細かい実装についてのTalkではありません。
各ライブラリーの使い方が〜という話ではなく、どういったArchitectureでWebやiOSやAndroidなどのクライアントサイドを作っていくのかを考えたい人にとっては、参考になるTalkだと思います。</p>

<p>というわけで、軽く内容を。
いろいろ省略しているので、気になった人はぜひTalkを観てください。</p>

<!-- more -->


<h2>Immutable App Architecture</h2>

<p>まず最初に、Architectureの選択は、アプリケーションの品質、開発の簡単さや難しさ、リリース後の改善のサイクルにも大きく影響を及ぼすものであるとしています。</p>

<blockquote><p>Architecture is about Choosing Elements of Abstraction</p></blockquote>

<p>例として、MVC &amp; RESTなArchitectureをInformation Richなアプリケーションで採用した場合、<strong>What Changed</strong> と <strong>Data Synchronization</strong> の部分が問題になるとしています。
変更管理とデータ同期の部分ですね。</p>

<p>特にFacebookは、ネットワーク環境が整備されていない国も含めた全世界にサービスを提供しているので、<strong>Data Synchronization</strong> におけるネットワークのレイテンシーの解決については力を注いでいるように感じます。</p>

<p>Webの場合、 <strong>What Changed</strong> の部分にはReactを使ったComponentによるViewの抽象化とImmutable.jsによるデータ管理の単純化、 <strong>Data Synchronization</strong> の部分にはGraphQLを使って必要最低限のデータのやりとりのみ行う方法を解説しています。</p>

<p>これらを踏まえて、Immutable App Architectureとして、下記の図のような構成を紹介しています。</p>

<p>{% img /images/posts/immutable-app-architecture/immutable-app-architecture.png &lsquo;Immutable App Architecture&rsquo; %}</p>

<p>詳細については動画を見てほしいのですが下のような要素があります。
Fluxについて聞いたことがあるとだいたいイメージできると思います。</p>

<h3>Component</h3>

<p>Componentは下のようなStateを受け取りViewを返すピュアな関数です。
Viewへの反映を最適化します。</p>

<p><code>
(State) =&gt; View
</code></p>

<p>ReactやReactNative、ComponentKitが担っている部分です。</p>

<h3>View</h3>

<p>DOMやUIViewやAndroidのViewなど各Platformが提供しているViewです。
Mutationが前提になっていて、管理や最適化が難しいとしています。</p>

<h3>Actions</h3>

<p>新しいStateを作成する部分です。</p>

<p><code>
(State) =&gt; State
</code></p>

<p>ActionごとにStateを再作成するのはパフォーマンス的にツラいのでは？ということに対しては、<strong>Structural Sharing</strong> のアプローチを紹介しています。</p>

<p>Structural Sharingは、Immurable.jsなどで使われていて、変更があった箇所とその上位の要素だけを再作成して、その他は参照を付け替えるだけなので全体を毎回再生成しているわけではないということです。
もちろん、Immutable.jsを使わなくても実装することは可能で、Reduxを使っている人にはおなじみだと思います。</p>

<p>{% img /images/posts/immutable-app-architecture/structual-sharing.png &lsquo;Structural Sharing&rsquo; %}</p>

<p>Immutableにすることにより、Memoizationなどの最適化のテクニックも適用しやすいとしています。</p>

<p>また、サーバーからデータを取得するActionのI/Fは下記のように定義しています。</p>

<p><code>
(State) =&gt; State, Promise&lt;State&gt;
</code></p>

<p><code>(State) =&gt; Promise&lt;State&gt;</code>の場合、ネットワークが貧弱な環境ではユーザーにすぐにレスポンスを返せないので、「すぐに反映させるためにクライアント側で作成したState」と「サーバーからのレスポンスを反映したStateを返すPromise」の2つを返しています。
このアプローチは次のQueueの部分でも重要になってきます。</p>

<p>もっと複雑な非同期処理をやっている人にとっては、Observableなどで処理した方がいいのかもしれませんが、これで十分なことも多いのかなと思います。</p>

<h3>Queue</h3>

<p>同時に発生する複数のActionをシリアライズして処理するためのQueueです。</p>

<p><code>(State) =&gt; State, Promise&lt;State&gt;</code>のActionの場合、Promiseで解決されるStateを本当のState(<strong>True State</strong>)として、Promiseでない方のStateを <strong>Optimistic State</strong> として扱います。</p>

<p><code>
(State) =&gt; State, Promise&lt;State&gt;
   |         |              |--------&gt; True State
   |         |----&gt; Optimistic State
   |--&gt; Current State
</code></p>

<p><code>(State) =&gt; State, Promise&lt;State&gt;</code>の場合、まずは <strong>Optimistic State</strong> の方をStateとして扱いViewが更新されます。その後、Promiseがresolveされた時に、<strong>True State</strong> が更新されてQueueにあるActionが再度適用されます。</p>

<p>TODOアイテムの作成を例にすると、下記のような流れになると解説されています。</p>

<hr />

<ul>
<li>入力したTODOのテキストをOptimistic Stateとして即時にStateに反映する</li>
<li>QueueにあるActionをOptimistic Stateに適用する</li>
</ul>


<p>〜サーバーからレスポンスが返ってくる〜</p>

<ul>
<li>サーバーから受け取ったidなどを持った完全な形のTODOをTrue Stateに反映する</li>
<li>QueueにあるActionを再度True Stateに適用する</li>
</ul>


<hr />

<p>これにより、ネットワークリクエストが失敗した場合は、 <strong>Optimistic State</strong> から <strong>True State</strong> に戻せばいいだけなのでロールバックも簡単だとしています。</p>

<p>{% img /images/posts/immutable-app-architecture/action-queue.png &lsquo;Action Queue&rsquo; %}</p>

<p>それぞれ依存する<code>(State) =&gt; State, Promise&lt;State&gt;</code>のActionが複数Queueに積まれた時にどう処理するのかなど細かい不明な点はありますが、こんな感じだと思います。</p>

<h3>State</h3>

<p>Stateはアプリケーションの状態でImmutableです。
Action毎に作成されます。</p>

<p>Initial Stateはサーバーから作成されます。</p>

<h3>Models</h3>

<p>ModelはStateを構成するComponentが必要とするGraphQLのTypeで定義されたデータの形です。</p>

<blockquote><p>Colocated Data Dependencies</p></blockquote>

<p>Plainなオブジェクト（JavaでいうPOJO）であることを推奨しています（JSの場合はImmutable.jsのデータ構造の場合も）。</p>

<p>{% img /images/posts/immutable-app-architecture/immutable-app-model.png &lsquo;Model&rsquo; %}</p>

<h2>まとめ</h2>

<p>{% img /images/posts/immutable-app-architecture/immutable-app-architecture.png &lsquo;Immutable App Architecture&rsquo; %}</p>

<p>上記のように構成されるImmutable App Architectureは <strong>Pure Function</strong>、<strong>Immutability</strong>、<strong>Composition</strong> を組み合わせた <strong>Composition of Simple Elements</strong> だとしています。
Immutable App ArchitectureはFacebookのアプリでも使われていてフィットしているとのことです。</p>

<p>と、しながらもArchitectureの選択はトレードオフだとしています。
なのでアプリケーションを完成させた後も、すぐにゼロから再構築することを考えて、よりよいArchitectureを常に探求する必要があるとしています。</p>

<blockquote><p>There is no Architecture Nirvana.</p>

<p>Exploration and Improvement.</p></blockquote>

<p>Please watch the video!</p>

<ul>
<li><a href="https://vimeo.com/166790294">https://vimeo.com/166790294</a></li>
</ul>


<p>(詳細が聞き取れなかった部分もあるので、間違ってるところがあったら指摘してもらえるとありがたいです)</p>
]]></content>
  </entry>
  
</feed>
